
GradCap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005464  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00054724  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08059cc8  08059cc8  00069cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08059cd0  08059cd0  00069cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08059cd4  08059cd4  00069cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08059cd8  00070004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000448  20000010  08059ce4  00070010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000458  08059ce4  00070458  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00070010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001268f  00000000  00000000  00070040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026e8  00000000  00000000  000826cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016b8  00000000  00000000  00084db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001590  00000000  00000000  00086470  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002170d  00000000  00000000  00087a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e69f  00000000  00000000  000a910d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d5fd2  00000000  00000000  000b77ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0018d77e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005fd0  00000000  00000000  0018d7fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	0800558c 	.word	0x0800558c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	0800558c 	.word	0x0800558c

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b972 	b.w	800047c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	4688      	mov	r8, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14b      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4615      	mov	r5, r2
 80001c2:	d967      	bls.n	8000294 <__udivmoddi4+0xe4>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0720 	rsb	r7, r2, #32
 80001ce:	fa01 f302 	lsl.w	r3, r1, r2
 80001d2:	fa20 f707 	lsr.w	r7, r0, r7
 80001d6:	4095      	lsls	r5, r2
 80001d8:	ea47 0803 	orr.w	r8, r7, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001e2:	0c23      	lsrs	r3, r4, #16
 80001e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e8:	fa1f fc85 	uxth.w	ip, r5
 80001ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80001f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f4:	fb07 f10c 	mul.w	r1, r7, ip
 80001f8:	4299      	cmp	r1, r3
 80001fa:	d909      	bls.n	8000210 <__udivmoddi4+0x60>
 80001fc:	18eb      	adds	r3, r5, r3
 80001fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000202:	f080 811b 	bcs.w	800043c <__udivmoddi4+0x28c>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 8118 	bls.w	800043c <__udivmoddi4+0x28c>
 800020c:	3f02      	subs	r7, #2
 800020e:	442b      	add	r3, r5
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0fe 	udiv	r0, r3, lr
 8000218:	fb0e 3310 	mls	r3, lr, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 fc0c 	mul.w	ip, r0, ip
 8000224:	45a4      	cmp	ip, r4
 8000226:	d909      	bls.n	800023c <__udivmoddi4+0x8c>
 8000228:	192c      	adds	r4, r5, r4
 800022a:	f100 33ff 	add.w	r3, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000232:	45a4      	cmp	ip, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x290>
 8000238:	3802      	subs	r0, #2
 800023a:	442c      	add	r4, r5
 800023c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000240:	eba4 040c 	sub.w	r4, r4, ip
 8000244:	2700      	movs	r7, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa0>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	4639      	mov	r1, r7
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xbe>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80eb 	beq.w	8000436 <__udivmoddi4+0x286>
 8000260:	2700      	movs	r7, #0
 8000262:	e9c6 0100 	strd	r0, r1, [r6]
 8000266:	4638      	mov	r0, r7
 8000268:	4639      	mov	r1, r7
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f783 	clz	r7, r3
 8000272:	2f00      	cmp	r7, #0
 8000274:	d147      	bne.n	8000306 <__udivmoddi4+0x156>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd0>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fa 	bhi.w	8000474 <__udivmoddi4+0x2c4>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa0>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa0>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xe8>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 808f 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a2:	1b49      	subs	r1, r1, r5
 80002a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a8:	fa1f f885 	uxth.w	r8, r5
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb08 f10c 	mul.w	r1, r8, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4299      	cmp	r1, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2bc>
 80002d2:	4684      	mov	ip, r0
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	b2a3      	uxth	r3, r4
 80002d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80002e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x14c>
 80002ec:	192c      	adds	r4, r5, r4
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14a>
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	f200 80b6 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002fa:	4618      	mov	r0, r3
 80002fc:	eba4 0408 	sub.w	r4, r4, r8
 8000300:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000304:	e79f      	b.n	8000246 <__udivmoddi4+0x96>
 8000306:	f1c7 0c20 	rsb	ip, r7, #32
 800030a:	40bb      	lsls	r3, r7
 800030c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000310:	ea4e 0e03 	orr.w	lr, lr, r3
 8000314:	fa01 f407 	lsl.w	r4, r1, r7
 8000318:	fa20 f50c 	lsr.w	r5, r0, ip
 800031c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000320:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000324:	4325      	orrs	r5, r4
 8000326:	fbb3 f9f8 	udiv	r9, r3, r8
 800032a:	0c2c      	lsrs	r4, r5, #16
 800032c:	fb08 3319 	mls	r3, r8, r9, r3
 8000330:	fa1f fa8e 	uxth.w	sl, lr
 8000334:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000338:	fb09 f40a 	mul.w	r4, r9, sl
 800033c:	429c      	cmp	r4, r3
 800033e:	fa02 f207 	lsl.w	r2, r2, r7
 8000342:	fa00 f107 	lsl.w	r1, r0, r7
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1e 0303 	adds.w	r3, lr, r3
 800034c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	429c      	cmp	r4, r3
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a9 0902 	sub.w	r9, r9, #2
 800035e:	4473      	add	r3, lr
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	b2ad      	uxth	r5, r5
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000370:	fb00 fa0a 	mul.w	sl, r0, sl
 8000374:	45a2      	cmp	sl, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1e 0404 	adds.w	r4, lr, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a2      	cmp	sl, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3802      	subs	r0, #2
 8000388:	4474      	add	r4, lr
 800038a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038e:	fba0 8902 	umull	r8, r9, r0, r2
 8000392:	eba4 040a 	sub.w	r4, r4, sl
 8000396:	454c      	cmp	r4, r9
 8000398:	46c2      	mov	sl, r8
 800039a:	464b      	mov	r3, r9
 800039c:	d354      	bcc.n	8000448 <__udivmoddi4+0x298>
 800039e:	d051      	beq.n	8000444 <__udivmoddi4+0x294>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d069      	beq.n	8000478 <__udivmoddi4+0x2c8>
 80003a4:	ebb1 050a 	subs.w	r5, r1, sl
 80003a8:	eb64 0403 	sbc.w	r4, r4, r3
 80003ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003b0:	40fd      	lsrs	r5, r7
 80003b2:	40fc      	lsrs	r4, r7
 80003b4:	ea4c 0505 	orr.w	r5, ip, r5
 80003b8:	e9c6 5400 	strd	r5, r4, [r6]
 80003bc:	2700      	movs	r7, #0
 80003be:	e747      	b.n	8000250 <__udivmoddi4+0xa0>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f703 	lsr.w	r7, r0, r3
 80003c8:	4095      	lsls	r5, r2
 80003ca:	fa01 f002 	lsl.w	r0, r1, r2
 80003ce:	fa21 f303 	lsr.w	r3, r1, r3
 80003d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d6:	4338      	orrs	r0, r7
 80003d8:	0c01      	lsrs	r1, r0, #16
 80003da:	fbb3 f7fe 	udiv	r7, r3, lr
 80003de:	fa1f f885 	uxth.w	r8, r5
 80003e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ea:	fb07 f308 	mul.w	r3, r7, r8
 80003ee:	428b      	cmp	r3, r1
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f6:	1869      	adds	r1, r5, r1
 80003f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3f02      	subs	r7, #2
 8000404:	4429      	add	r1, r5
 8000406:	1acb      	subs	r3, r1, r3
 8000408:	b281      	uxth	r1, r0
 800040a:	fbb3 f0fe 	udiv	r0, r3, lr
 800040e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb00 f308 	mul.w	r3, r0, r8
 800041a:	428b      	cmp	r3, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x27e>
 800041e:	1869      	adds	r1, r5, r1
 8000420:	f100 3cff 	add.w	ip, r0, #4294967295
 8000424:	d217      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000426:	428b      	cmp	r3, r1
 8000428:	d915      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042a:	3802      	subs	r0, #2
 800042c:	4429      	add	r1, r5
 800042e:	1ac9      	subs	r1, r1, r3
 8000430:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xfe>
 8000436:	4637      	mov	r7, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e709      	b.n	8000250 <__udivmoddi4+0xa0>
 800043c:	4607      	mov	r7, r0
 800043e:	e6e7      	b.n	8000210 <__udivmoddi4+0x60>
 8000440:	4618      	mov	r0, r3
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x8c>
 8000444:	4541      	cmp	r1, r8
 8000446:	d2ab      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 8000448:	ebb8 0a02 	subs.w	sl, r8, r2
 800044c:	eb69 020e 	sbc.w	r2, r9, lr
 8000450:	3801      	subs	r0, #1
 8000452:	4613      	mov	r3, r2
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4660      	mov	r0, ip
 8000458:	e7e9      	b.n	800042e <__udivmoddi4+0x27e>
 800045a:	4618      	mov	r0, r3
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4667      	mov	r7, ip
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	4681      	mov	r9, r0
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3802      	subs	r0, #2
 8000468:	442c      	add	r4, r5
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0x14c>
 800046c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000470:	442b      	add	r3, r5
 8000472:	e72f      	b.n	80002d4 <__udivmoddi4+0x124>
 8000474:	4638      	mov	r0, r7
 8000476:	e708      	b.n	800028a <__udivmoddi4+0xda>
 8000478:	4637      	mov	r7, r6
 800047a:	e6e9      	b.n	8000250 <__udivmoddi4+0xa0>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004de:	b480      	push	{r7}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4013      	ands	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fe81 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f997 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fb5b 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f000 fb27 	bl	8000b74 <MX_DMA_Init>
  MX_SPI1_Init();
 8000526:	f000 fa35 	bl	8000994 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800052a:	f000 faaf 	bl	8000a8c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800052e:	f000 faf9 	bl	8000b24 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000532:	f000 fa6d 	bl	8000a10 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //OE high
  GPIOA -> ODR |= GPIO_PIN_8;
 8000536:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000544:	6153      	str	r3, [r2, #20]

  int scan = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  int count = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  int frame = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]

  int im =0;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  int rep = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
     {
    	if(im==numImage){
 800055a:	2206      	movs	r2, #6
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	4293      	cmp	r3, r2
 8000560:	d101      	bne.n	8000566 <main+0x56>
    		im =0;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
    	}
    	if(rep == repeat[im]){
 8000566:	4ab1      	ldr	r2, [pc, #708]	; (800082c <main+0x31c>)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	d104      	bne.n	800057e <main+0x6e>
    		im++;
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	3301      	adds	r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
    		rep=0;
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
    	}
    	// subframe finished, move onto next line
    	if(count >=16){
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	2b0f      	cmp	r3, #15
 8000582:	dd04      	ble.n	800058e <main+0x7e>
			scan++;
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	3301      	adds	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
			count = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
		}
    	// finished with animation, loop back
		if(frame>=framesN[im]*frameMod[im]){
 800058e:	4aa8      	ldr	r2, [pc, #672]	; (8000830 <main+0x320>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000596:	49a7      	ldr	r1, [pc, #668]	; (8000834 <main+0x324>)
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800059e:	fb02 f303 	mul.w	r3, r2, r3
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	db04      	blt.n	80005b2 <main+0xa2>
			frame = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
			rep++;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3301      	adds	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
		}

		// last row, change frame and loop back
		if(scan>=16){
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	dd04      	ble.n	80005c2 <main+0xb2>
			scan = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
			frame ++;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
		}

		// new row, set row selects
		if(count==0){
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d147      	bne.n	8000658 <main+0x148>
			if(scan & 0x1){
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <main+0xd0>
				GPIOB -> ODR  |= GPIO_PIN_0;
 80005d2:	4b99      	ldr	r3, [pc, #612]	; (8000838 <main+0x328>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a98      	ldr	r2, [pc, #608]	; (8000838 <main+0x328>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	e005      	b.n	80005ec <main+0xdc>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_0;
 80005e0:	4b95      	ldr	r3, [pc, #596]	; (8000838 <main+0x328>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a94      	ldr	r2, [pc, #592]	; (8000838 <main+0x328>)
 80005e6:	f023 0301 	bic.w	r3, r3, #1
 80005ea:	6153      	str	r3, [r2, #20]
			}
			if(scan & 0x2){
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <main+0xf4>
				GPIOB -> ODR  |= GPIO_PIN_1;
 80005f6:	4b90      	ldr	r3, [pc, #576]	; (8000838 <main+0x328>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a8f      	ldr	r2, [pc, #572]	; (8000838 <main+0x328>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	e005      	b.n	8000610 <main+0x100>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_1;
 8000604:	4b8c      	ldr	r3, [pc, #560]	; (8000838 <main+0x328>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a8b      	ldr	r2, [pc, #556]	; (8000838 <main+0x328>)
 800060a:	f023 0302 	bic.w	r3, r3, #2
 800060e:	6153      	str	r3, [r2, #20]
			}

			if(scan & 0x4){
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <main+0x118>
				GPIOD -> ODR  |= GPIO_PIN_1;
 800061a:	4b88      	ldr	r3, [pc, #544]	; (800083c <main+0x32c>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a87      	ldr	r2, [pc, #540]	; (800083c <main+0x32c>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	e005      	b.n	8000634 <main+0x124>
			}
			else{
				GPIOD -> ODR  &=~ GPIO_PIN_1;
 8000628:	4b84      	ldr	r3, [pc, #528]	; (800083c <main+0x32c>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a83      	ldr	r2, [pc, #524]	; (800083c <main+0x32c>)
 800062e:	f023 0302 	bic.w	r3, r3, #2
 8000632:	6153      	str	r3, [r2, #20]
			}
			if(scan & 0x8){
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <main+0x13c>
				GPIOB -> ODR  |= GPIO_PIN_14;
 800063e:	4b7e      	ldr	r3, [pc, #504]	; (8000838 <main+0x328>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a7d      	ldr	r2, [pc, #500]	; (8000838 <main+0x328>)
 8000644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	e005      	b.n	8000658 <main+0x148>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_14;
 800064c:	4b7a      	ldr	r3, [pc, #488]	; (8000838 <main+0x328>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a79      	ldr	r2, [pc, #484]	; (8000838 <main+0x328>)
 8000652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000656:	6153      	str	r3, [r2, #20]
			}
		}

		// OE high (LEDs off)
		GPIOA -> ODR |= GPIO_PIN_8;
 8000658:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000666:	6153      	str	r3, [r2, #20]

		// latch low (load on)
		GPIOC -> ODR &= ~GPIO_PIN_13;
 8000668:	4b75      	ldr	r3, [pc, #468]	; (8000840 <main+0x330>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4a74      	ldr	r2, [pc, #464]	; (8000840 <main+0x330>)
 800066e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000672:	6153      	str	r3, [r2, #20]


		// brightness modulation
		if(count>=8){
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	2b07      	cmp	r3, #7
 8000678:	dd22      	ble.n	80006c0 <main+0x1b0>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][0+(frame/frameMod[im])*5][scan*4*3*2]), 24, 100);
 800067a:	4a6e      	ldr	r2, [pc, #440]	; (8000834 <main+0x324>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	fb92 f2f3 	sdiv	r2, r2, r3
 8000688:	4613      	mov	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	441a      	add	r2, r3
 800068e:	6979      	ldr	r1, [r7, #20]
 8000690:	460b      	mov	r3, r1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	440b      	add	r3, r1
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4618      	mov	r0, r3
 800069a:	4613      	mov	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	4413      	add	r3, r2
 80006a0:	01db      	lsls	r3, r3, #7
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80006a8:	fb01 f202 	mul.w	r2, r1, r2
 80006ac:	4413      	add	r3, r2
 80006ae:	4403      	add	r3, r0
 80006b0:	4a64      	ldr	r2, [pc, #400]	; (8000844 <main+0x334>)
 80006b2:	1899      	adds	r1, r3, r2
 80006b4:	2364      	movs	r3, #100	; 0x64
 80006b6:	2218      	movs	r2, #24
 80006b8:	4863      	ldr	r0, [pc, #396]	; (8000848 <main+0x338>)
 80006ba:	f003 f8ff 	bl	80038bc <HAL_SPI_Transmit>
 80006be:	e09a      	b.n	80007f6 <main+0x2e6>
		}
		else if(count>=4){
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	dd23      	ble.n	800070e <main+0x1fe>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][1+(frame/frameMod[im])*5][scan*4*3*2]), 24, 100);
 80006c6:	4a5b      	ldr	r2, [pc, #364]	; (8000834 <main+0x324>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80006d4:	4613      	mov	r3, r2
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	6979      	ldr	r1, [r7, #20]
 80006de:	460b      	mov	r3, r1
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	440b      	add	r3, r1
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	4618      	mov	r0, r3
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	01db      	lsls	r3, r3, #7
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80006f6:	fb01 f202 	mul.w	r2, r1, r2
 80006fa:	4413      	add	r3, r2
 80006fc:	4403      	add	r3, r0
 80006fe:	4a51      	ldr	r2, [pc, #324]	; (8000844 <main+0x334>)
 8000700:	1899      	adds	r1, r3, r2
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2218      	movs	r2, #24
 8000706:	4850      	ldr	r0, [pc, #320]	; (8000848 <main+0x338>)
 8000708:	f003 f8d8 	bl	80038bc <HAL_SPI_Transmit>
 800070c:	e073      	b.n	80007f6 <main+0x2e6>
		}
		else if(count>=2){
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	2b01      	cmp	r3, #1
 8000712:	dd23      	ble.n	800075c <main+0x24c>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][2+(frame/frameMod[im])*5][scan*4*3*2]), 24, 100);
 8000714:	4a47      	ldr	r2, [pc, #284]	; (8000834 <main+0x324>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	1c9a      	adds	r2, r3, #2
 800072a:	6979      	ldr	r1, [r7, #20]
 800072c:	460b      	mov	r3, r1
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	440b      	add	r3, r1
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4618      	mov	r0, r3
 8000736:	4613      	mov	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4413      	add	r3, r2
 800073c:	01db      	lsls	r3, r3, #7
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000744:	fb01 f202 	mul.w	r2, r1, r2
 8000748:	4413      	add	r3, r2
 800074a:	4403      	add	r3, r0
 800074c:	4a3d      	ldr	r2, [pc, #244]	; (8000844 <main+0x334>)
 800074e:	1899      	adds	r1, r3, r2
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	2218      	movs	r2, #24
 8000754:	483c      	ldr	r0, [pc, #240]	; (8000848 <main+0x338>)
 8000756:	f003 f8b1 	bl	80038bc <HAL_SPI_Transmit>
 800075a:	e04c      	b.n	80007f6 <main+0x2e6>
		}
		else if(count>=1){
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	2b00      	cmp	r3, #0
 8000760:	dd23      	ble.n	80007aa <main+0x29a>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][3+(frame/frameMod[im])*5][scan*4*3*2]), 24, 100);
 8000762:	4a34      	ldr	r2, [pc, #208]	; (8000834 <main+0x324>)
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	1cda      	adds	r2, r3, #3
 8000778:	6979      	ldr	r1, [r7, #20]
 800077a:	460b      	mov	r3, r1
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	440b      	add	r3, r1
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	4618      	mov	r0, r3
 8000784:	4613      	mov	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	4413      	add	r3, r2
 800078a:	01db      	lsls	r3, r3, #7
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000792:	fb01 f202 	mul.w	r2, r1, r2
 8000796:	4413      	add	r3, r2
 8000798:	4403      	add	r3, r0
 800079a:	4a2a      	ldr	r2, [pc, #168]	; (8000844 <main+0x334>)
 800079c:	1899      	adds	r1, r3, r2
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	2218      	movs	r2, #24
 80007a2:	4829      	ldr	r0, [pc, #164]	; (8000848 <main+0x338>)
 80007a4:	f003 f88a 	bl	80038bc <HAL_SPI_Transmit>
 80007a8:	e025      	b.n	80007f6 <main+0x2e6>
		}
		else if(count==0){
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d122      	bne.n	80007f6 <main+0x2e6>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[im][4+(frame/frameMod[im])*5][scan*4*3*2]), 24, 100);
 80007b0:	4a20      	ldr	r2, [pc, #128]	; (8000834 <main+0x324>)
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	fb92 f2f3 	sdiv	r2, r2, r3
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	1d1a      	adds	r2, r3, #4
 80007c6:	6979      	ldr	r1, [r7, #20]
 80007c8:	460b      	mov	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	440b      	add	r3, r1
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4618      	mov	r0, r3
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	01db      	lsls	r3, r3, #7
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80007e0:	fb01 f202 	mul.w	r2, r1, r2
 80007e4:	4413      	add	r3, r2
 80007e6:	4403      	add	r3, r0
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <main+0x334>)
 80007ea:	1899      	adds	r1, r3, r2
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	2218      	movs	r2, #24
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <main+0x338>)
 80007f2:	f003 f863 	bl	80038bc <HAL_SPI_Transmit>
		}

		// OE low (LEDs on)
		GPIOA -> ODR &= ~GPIO_PIN_8;
 80007f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000804:	6153      	str	r3, [r2, #20]

		// LAT high (load off)
		GPIOC -> ODR |= GPIO_PIN_13;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <main+0x330>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <main+0x330>)
 800080c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000810:	6153      	str	r3, [r2, #20]

		// delay so leds are on for certain time
		for(int i = 0; i<40; i++){}
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	e002      	b.n	800081e <main+0x30e>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	2b27      	cmp	r3, #39	; 0x27
 8000822:	ddf9      	ble.n	8000818 <main+0x308>

		// increase count
		count++;
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	3301      	adds	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
    	if(im==numImage){
 800082a:	e696      	b.n	800055a <main+0x4a>
 800082c:	08005610 	.word	0x08005610
 8000830:	080055e0 	.word	0x080055e0
 8000834:	080055f8 	.word	0x080055f8
 8000838:	48000400 	.word	0x48000400
 800083c:	48000c00 	.word	0x48000c00
 8000840:	48000800 	.word	0x48000800
 8000844:	08005628 	.word	0x08005628
 8000848:	2000017c 	.word	0x2000017c

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b0ae      	sub	sp, #184	; 0xb8
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000856:	2248      	movs	r2, #72	; 0x48
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fe8e 	bl	800557c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2250      	movs	r2, #80	; 0x50
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f004 fe7e 	bl	800557c <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800088a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800088e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	f023 0303 	bic.w	r3, r3, #3
 800089a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fdeb 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <SystemClock_Config+0x144>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008b2:	4a37      	ldr	r2, [pc, #220]	; (8000990 <SystemClock_Config+0x144>)
 80008b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b8:	6013      	str	r3, [r2, #0]
 80008ba:	4b35      	ldr	r3, [pc, #212]	; (8000990 <SystemClock_Config+0x144>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80008c6:	2327      	movs	r3, #39	; 0x27
 80008c8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008da:	2301      	movs	r3, #1
 80008dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fd1f 	bl	8002340 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000908:	f000 f9fa 	bl	8000d00 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800090c:	236f      	movs	r3, #111	; 0x6f
 800090e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000910:	2302      	movs	r3, #2
 8000912:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800092c:	2101      	movs	r1, #1
 800092e:	4618      	mov	r0, r3
 8000930:	f002 f864 	bl	80029fc <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800093a:	f000 f9e1 	bl	8000d00 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800093e:	f242 1301 	movw	r3, #8449	; 0x2101
 8000942:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000944:	2318      	movs	r3, #24
 8000946:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800094c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800094e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000952:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000954:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000958:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800095a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800095e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000964:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800096a:	2300      	movs	r3, #0
 800096c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800096e:	2310      	movs	r3, #16
 8000970:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fc8b 	bl	8003290 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000980:	f000 f9be 	bl	8000d00 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000984:	f002 fdf9 	bl	800357a <HAL_RCCEx_EnableMSIPLLMode>
}
 8000988:	bf00      	nop
 800098a:	37b8      	adds	r7, #184	; 0xb8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58000400 	.word	0x58000400

08000994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_SPI1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <MX_SPI1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009e2:	2207      	movs	r2, #7
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009ee:	2208      	movs	r2, #8
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_SPI1_Init+0x74>)
 80009f4:	f002 fed8 	bl	80037a8 <HAL_SPI_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 f97f 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000017c 	.word	0x2000017c
 8000a0c:	40013000 	.word	0x40013000

08000a10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <MX_SPI2_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a5e:	2207      	movs	r2, #7
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_SPI2_Init+0x74>)
 8000a70:	f002 fe9a 	bl	80037a8 <HAL_SPI_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 f941 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000002c 	.word	0x2000002c
 8000a88:	40003800 	.word	0x40003800

08000a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ad6:	f003 f994 	bl	8003e02 <HAL_UART_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ae0:	f000 f90e 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ae8:	f004 fbe5 	bl	80052b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000af2:	f000 f905 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000afa:	f004 fc1a 	bl	8005332 <HAL_UARTEx_SetRxFifoThreshold>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b04:	f000 f8fc 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000b0a:	f004 fb9b 	bl	8005244 <HAL_UARTEx_DisableFifoMode>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f000 f8f4 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000090 	.word	0x20000090
 8000b20:	40013800 	.word	0x40013800

08000b24 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <MX_USB_PCD_Init+0x4c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b30:	2208      	movs	r2, #8
 8000b32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_USB_PCD_Init+0x48>)
 8000b5a:	f000 ff59 	bl	8001a10 <HAL_PCD_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b64:	f000 f8cc 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200001e0 	.word	0x200001e0
 8000b70:	40006800 	.word	0x40006800

08000b74 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void) 
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b78:	2004      	movs	r0, #4
 8000b7a:	f7ff fc97 	bl	80004ac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fc94 	bl	80004ac <LL_AHB1_GRP1_EnableClock>

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000b86:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <MX_DMA_Init+0x60>)
 8000b88:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_DMA_Init+0x5c>)
 8000bbe:	f000 fc95 	bl	80014ec <HAL_DMA_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_DMA_Init+0x58>
  {
    Error_Handler( );
 8000bc8:	f000 f89a 	bl	8000d00 <Error_Handler>
  }

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000011c 	.word	0x2000011c
 8000bd4:	40020008 	.word	0x40020008

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	2004      	movs	r0, #4
 8000bee:	f7ff fc76 	bl	80004de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fc73 	bl	80004de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fc70 	bl	80004de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2008      	movs	r0, #8
 8000c00:	f7ff fc6d 	bl	80004de <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAT_GPIO_Port, LAT_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	483a      	ldr	r0, [pc, #232]	; (8000cf4 <MX_GPIO_Init+0x11c>)
 8000c0c:	f000 fee8 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f000 fee1 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RowA_Pin|RowB_Pin|RowD_Pin|RowC_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f244 0123 	movw	r1, #16419	; 0x4023
 8000c24:	4834      	ldr	r0, [pc, #208]	; (8000cf8 <MX_GPIO_Init+0x120>)
 8000c26:	f000 fedb 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RowC_1_GPIO_Port, RowC_1_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4833      	ldr	r0, [pc, #204]	; (8000cfc <MX_GPIO_Init+0x124>)
 8000c30:	f000 fed6 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LAT_Pin */
  GPIO_InitStruct.Pin = LAT_Pin;
 8000c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LAT_GPIO_Port, &GPIO_InitStruct);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <MX_GPIO_Init+0x11c>)
 8000c4c:	f000 fd58 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f000 fd49 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481d      	ldr	r0, [pc, #116]	; (8000cf4 <MX_GPIO_Init+0x11c>)
 8000c80:	f000 fd3e 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : RowA_Pin RowB_Pin RowC_Pin */
  GPIO_InitStruct.Pin = RowA_Pin|RowB_Pin|RowC_Pin;
 8000c84:	2323      	movs	r3, #35	; 0x23
 8000c86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0x120>)
 8000c9a:	f000 fd31 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : RowD_Pin */
  GPIO_InitStruct.Pin = RowD_Pin;
 8000c9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RowD_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <MX_GPIO_Init+0x120>)
 8000cb6:	f000 fd23 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_GPIO_Init+0x124>)
 8000ccc:	f000 fd18 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : RowC_1_Pin */
  GPIO_InitStruct.Pin = RowC_1_Pin;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RowC_1_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_GPIO_Init+0x124>)
 8000ce6:	f000 fd0b 	bl	8001700 <HAL_GPIO_Init>

}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000c00 	.word	0x48000c00

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <LL_AHB2_GRP1_EnableClock>:
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b085      	sub	sp, #20
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d64:	68fb      	ldr	r3, [r7, #12]
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b085      	sub	sp, #20
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a30      	ldr	r2, [pc, #192]	; (8000e94 <HAL_SPI_MspInit+0xe0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d118      	bne.n	8000e08 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000dda:	f7ff ffca 	bl	8000d72 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff ff95 	bl	8000d0e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000de4:	23c2      	movs	r3, #194	; 0xc2
 8000de6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df4:	2305      	movs	r3, #5
 8000df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f000 fc7d 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e06:	e040      	b.n	8000e8a <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <HAL_SPI_MspInit+0xe4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d13b      	bne.n	8000e8a <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e16:	f7ff ff93 	bl	8000d40 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	2004      	movs	r0, #4
 8000e1c:	f7ff ff77 	bl	8000d0e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff ff74 	bl	8000d0e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e26:	2302      	movs	r3, #2
 8000e28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4816      	ldr	r0, [pc, #88]	; (8000e9c <HAL_SPI_MspInit+0xe8>)
 8000e42:	f000 fc5d 	bl	8001700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e46:	2304      	movs	r3, #4
 8000e48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e56:	2305      	movs	r3, #5
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480e      	ldr	r0, [pc, #56]	; (8000e9c <HAL_SPI_MspInit+0xe8>)
 8000e62:	f000 fc4d 	bl	8001700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e78:	2305      	movs	r3, #5
 8000e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f000 fc3b 	bl	8001700 <HAL_GPIO_Init>
}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40013000 	.word	0x40013000
 8000e98:	40003800 	.word	0x40003800
 8000e9c:	48000800 	.word	0x48000800

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_UART_MspInit+0x58>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d116      	bne.n	8000ef0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ec6:	f7ff ff54 	bl	8000d72 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f7ff ff1f 	bl	8000d0e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <HAL_UART_MspInit+0x5c>)
 8000eec:	f000 fc08 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	48000400 	.word	0x48000400

08000f00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_PCD_MspInit+0x5c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d118      	bne.n	8000f54 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff fef3 	bl	8000d0e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f000 fbda 	bl	8001700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f4c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f50:	f7ff fef6 	bl	8000d40 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40006800 	.word	0x40006800

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f98c 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <SystemInit+0xa0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <SystemInit+0xa0>)
 8000fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <SystemInit+0xa0>)
 8000fce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fea:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000fee:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <SystemInit+0xa4>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800100c:	f023 0305 	bic.w	r3, r3, #5
 8001010:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800101c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <SystemInit+0xa8>)
 800102e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <SystemInit+0xa8>)
 8001036:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	faf6fefb 	.word	0xfaf6fefb
 8001064:	22041000 	.word	0x22041000

08001068 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800106e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	4a47      	ldr	r2, [pc, #284]	; (8001198 <SystemCoreClockUpdate+0x130>)
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b0c      	cmp	r3, #12
 800108e:	d867      	bhi.n	8001160 <SystemCoreClockUpdate+0xf8>
 8001090:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <SystemCoreClockUpdate+0x30>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	080010cd 	.word	0x080010cd
 800109c:	08001161 	.word	0x08001161
 80010a0:	08001161 	.word	0x08001161
 80010a4:	08001161 	.word	0x08001161
 80010a8:	080010d5 	.word	0x080010d5
 80010ac:	08001161 	.word	0x08001161
 80010b0:	08001161 	.word	0x08001161
 80010b4:	08001161 	.word	0x08001161
 80010b8:	080010dd 	.word	0x080010dd
 80010bc:	08001161 	.word	0x08001161
 80010c0:	08001161 	.word	0x08001161
 80010c4:	08001161 	.word	0x08001161
 80010c8:	080010e5 	.word	0x080010e5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80010cc:	4a33      	ldr	r2, [pc, #204]	; (800119c <SystemCoreClockUpdate+0x134>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6013      	str	r3, [r2, #0]
      break;
 80010d2:	e049      	b.n	8001168 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <SystemCoreClockUpdate+0x134>)
 80010d6:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <SystemCoreClockUpdate+0x138>)
 80010d8:	601a      	str	r2, [r3, #0]
      break;
 80010da:	e045      	b.n	8001168 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <SystemCoreClockUpdate+0x134>)
 80010de:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <SystemCoreClockUpdate+0x13c>)
 80010e0:	601a      	str	r2, [r3, #0]
      break;
 80010e2:	e041      	b.n	8001168 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80010e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	3301      	adds	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d105      	bne.n	8001112 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001106:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <SystemCoreClockUpdate+0x138>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00d      	b.n	800112e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d105      	bne.n	8001124 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <SystemCoreClockUpdate+0x13c>)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e004      	b.n	800112e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	fbb2 f3f3 	udiv	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0f5b      	lsrs	r3, r3, #29
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	3301      	adds	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <SystemCoreClockUpdate+0x134>)
 800115c:	6013      	str	r3, [r2, #0]
      break;
 800115e:	e003      	b.n	8001168 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <SystemCoreClockUpdate+0x134>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6013      	str	r3, [r2, #0]
      break;
 8001166:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <SystemCoreClockUpdate+0x140>)
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <SystemCoreClockUpdate+0x134>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemCoreClockUpdate+0x134>)
 8001188:	6013      	str	r3, [r2, #0]

}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	08059c88 	.word	0x08059c88
 800119c:	20000004 	.word	0x20000004
 80011a0:	00f42400 	.word	0x00f42400
 80011a4:	01e84800 	.word	0x01e84800
 80011a8:	08059c28 	.word	0x08059c28

080011ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80011ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b0:	3304      	adds	r3, #4

080011b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80011b6:	d3f9      	bcc.n	80011ac <CopyDataInit>
  bx lr
 80011b8:	4770      	bx	lr

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80011ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80011bc:	3004      	adds	r0, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80011be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>
  bx lr
 80011c2:	4770      	bx	lr

080011c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80011c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopForever+0x8>)
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <LoopForever+0xc>)
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LoopForever+0x10>)
 80011ce:	2300      	movs	r3, #0
 80011d0:	f7ff ffef 	bl	80011b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <LoopForever+0x14>)
 80011d6:	490d      	ldr	r1, [pc, #52]	; (800120c <LoopForever+0x18>)
 80011d8:	2300      	movs	r3, #0
 80011da:	f7ff fff0 	bl	80011be <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <LoopForever+0x1c>)
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <LoopForever+0x20>)
 80011e2:	2300      	movs	r3, #0
 80011e4:	f7ff ffeb 	bl	80011be <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011e8:	f7ff fee8 	bl	8000fbc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011ec:	f004 f9a2 	bl	8005534 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80011f0:	f7ff f98e 	bl	8000510 <main>

080011f4 <LoopForever>:

LoopForever:
  b LoopForever
 80011f4:	e7fe      	b.n	80011f4 <LoopForever>
 80011f6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80011f8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80011fc:	20000004 	.word	0x20000004
 8001200:	20000010 	.word	0x20000010
 8001204:	08059cd8 	.word	0x08059cd8
  INIT_BSS _sbss, _ebss
 8001208:	20000010 	.word	0x20000010
 800120c:	20000458 	.word	0x20000458
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001210:	20030000 	.word	0x20030000
 8001214:	20030000 	.word	0x20030000

08001218 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_Init+0x3c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_Init+0x3c>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f928 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f80f 	bl	800125c <HAL_InitTick>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	e001      	b.n	800124e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800124a:	f7ff fdab 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124e:	79fb      	ldrb	r3, [r7, #7]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	58004000 	.word	0x58004000

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_InitTick+0x6c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d023      	beq.n	80012b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8001270:	f001 fd6a 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8001274:	4601      	mov	r1, r0
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_InitTick+0x6c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	fbb1 f3f3 	udiv	r3, r1, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f923 	bl	80014d2 <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10f      	bne.n	80012b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d809      	bhi.n	80012ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f8fd 	bl	800149e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a4:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_InitTick+0x70>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e007      	b.n	80012bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e004      	b.n	80012bc <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e001      	b.n	80012bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000000c 	.word	0x2000000c
 80012cc:	20000008 	.word	0x20000008

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x1c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x20>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	4a03      	ldr	r2, [pc, #12]	; (80012ec <HAL_IncTick+0x1c>)
 80012e0:	6013      	str	r3, [r2, #0]
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000454 	.word	0x20000454
 80012f0:	2000000c 	.word	0x2000000c

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000454 	.word	0x20000454

0800130c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTickPrio+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff47 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff5e 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff90 	bl	80013dc <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5f 	bl	8001388 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffb2 	bl	8001444 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e08d      	b.n	800161a <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_DMA_Init+0x138>)
 8001506:	429a      	cmp	r2, r3
 8001508:	d80f      	bhi.n	800152a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <HAL_DMA_Init+0x13c>)
 8001512:	4413      	add	r3, r2
 8001514:	4a45      	ldr	r2, [pc, #276]	; (800162c <HAL_DMA_Init+0x140>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	009a      	lsls	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a42      	ldr	r2, [pc, #264]	; (8001630 <HAL_DMA_Init+0x144>)
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
 8001528:	e00e      	b.n	8001548 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b40      	ldr	r3, [pc, #256]	; (8001634 <HAL_DMA_Init+0x148>)
 8001532:	4413      	add	r3, r2
 8001534:	4a3d      	ldr	r2, [pc, #244]	; (800162c <HAL_DMA_Init+0x140>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	009a      	lsls	r2, r3, #2
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a3c      	ldr	r2, [pc, #240]	; (8001638 <HAL_DMA_Init+0x14c>)
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800155e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001562:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800156c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f84e 	bl	800163c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a8:	d102      	bne.n	80015b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d010      	beq.n	80015f0 <HAL_DMA_Init+0x104>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d80c      	bhi.n	80015f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f86e 	bl	80016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	e008      	b.n	8001602 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020407 	.word	0x40020407
 8001628:	bffdfff8 	.word	0xbffdfff8
 800162c:	cccccccd 	.word	0xcccccccd
 8001630:	40020000 	.word	0x40020000
 8001634:	bffdfbf8 	.word	0xbffdfbf8
 8001638:	40020400 	.word	0x40020400

0800163c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800164c:	429a      	cmp	r2, r3
 800164e:	d80a      	bhi.n	8001666 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800165c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6493      	str	r3, [r2, #72]	; 0x48
 8001664:	e007      	b.n	8001676 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	009a      	lsls	r2, r3, #2
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001670:	4413      	add	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3b08      	subs	r3, #8
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800168c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 031c 	and.w	r3, r3, #28
 8001694:	2201      	movs	r2, #1
 8001696:	409a      	lsls	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40020407 	.word	0x40020407
 80016ac:	4002081c 	.word	0x4002081c
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	40020880 	.word	0x40020880

080016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a08      	ldr	r2, [pc, #32]	; (80016fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016da:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2201      	movs	r2, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	1000823f 	.word	0x1000823f
 80016fc:	40020940 	.word	0x40020940

08001700 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e14c      	b.n	80019aa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 813e 	beq.w	80019a4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x38>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b12      	cmp	r3, #18
 8001736:	d123      	bne.n	8001780 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	6939      	ldr	r1, [r7, #16]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d00b      	beq.n	80017d4 <HAL_GPIO_Init+0xd4>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d130      	bne.n	8001836 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180a:	2201      	movs	r2, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	f003 0201 	and.w	r2, r3, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8098 	beq.w	80019a4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001874:	4a54      	ldr	r2, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800189e:	d019      	beq.n	80018d4 <HAL_GPIO_Init+0x1d4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <HAL_GPIO_Init+0x2cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d013      	beq.n	80018d0 <HAL_GPIO_Init+0x1d0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a49      	ldr	r2, [pc, #292]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00d      	beq.n	80018cc <HAL_GPIO_Init+0x1cc>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <HAL_GPIO_Init+0x2d4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d007      	beq.n	80018c8 <HAL_GPIO_Init+0x1c8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a47      	ldr	r2, [pc, #284]	; (80019d8 <HAL_GPIO_Init+0x2d8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_GPIO_Init+0x1c4>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e008      	b.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018c4:	2307      	movs	r3, #7
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018d4:	2300      	movs	r3, #0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e6:	4938      	ldr	r1, [pc, #224]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 80018f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800191a:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001922:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001948:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800199e:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f aeab 	bne.w	8001710 <HAL_GPIO_Init+0x10>
  }
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40010000 	.word	0x40010000
 80019cc:	48000400 	.word	0x48000400
 80019d0:	48000800 	.word	0x48000800
 80019d4:	48000c00 	.word	0x48000c00
 80019d8:	48001000 	.word	0x48001000
 80019dc:	58000800 	.word	0x58000800

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	b08b      	sub	sp, #44	; 0x2c
 8001a14:	af06      	add	r7, sp, #24
 8001a16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0ad      	b.n	8001b7e <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fa62 	bl	8000f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fd31 	bl	80054b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e035      	b.n	8001ac0 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	015b      	lsls	r3, r3, #5
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3329      	adds	r3, #41	; 0x29
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	015b      	lsls	r3, r3, #5
 8001a68:	4413      	add	r3, r2
 8001a6a:	3328      	adds	r3, #40	; 0x28
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	b291      	uxth	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	015b      	lsls	r3, r3, #5
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3336      	adds	r3, #54	; 0x36
 8001a7e:	460a      	mov	r2, r1
 8001a80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	4413      	add	r3, r2
 8001a8a:	332b      	adds	r3, #43	; 0x2b
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	015b      	lsls	r3, r3, #5
 8001a96:	4413      	add	r3, r2
 8001a98:	3338      	adds	r3, #56	; 0x38
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	4413      	add	r3, r2
 8001aa6:	333c      	adds	r3, #60	; 0x3c
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	3301      	adds	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d3c4      	bcc.n	8001a54 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e031      	b.n	8001b34 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	015b      	lsls	r3, r3, #5
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	015b      	lsls	r3, r3, #5
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	015b      	lsls	r3, r3, #5
 8001af6:	4413      	add	r3, r2
 8001af8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	015b      	lsls	r3, r3, #5
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	330a      	adds	r3, #10
 8001b26:	015b      	lsls	r3, r3, #5
 8001b28:	4413      	add	r3, r2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	3301      	adds	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3c8      	bcc.n	8001ad0 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	687e      	ldr	r6, [r7, #4]
 8001b46:	466d      	mov	r5, sp
 8001b48:	f106 0410 	add.w	r4, r6, #16
 8001b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	602b      	str	r3, [r5, #0]
 8001b54:	1d33      	adds	r3, r6, #4
 8001b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f003 fcc6 	bl	80054ea <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d102      	bne.n	8001b7c <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f805 	bl	8001b86 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b86 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	58000400 	.word	0x58000400

08001bfc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	58000400 	.word	0x58000400

08001c18 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c2a:	d101      	bne.n	8001c30 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_RCC_HSE_EnableBypass>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_RCC_HSE_DisableBypass>:
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_RCC_HSE_Enable>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_RCC_HSE_Disable>:
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_RCC_HSE_IsReady>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cc6:	d101      	bne.n	8001ccc <LL_RCC_HSE_IsReady+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <LL_RCC_HSE_IsReady+0x1a>
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_RCC_HSI_Enable>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_RCC_HSI_Disable>:
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_RCC_HSI_IsReady>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d101      	bne.n	8001d2c <LL_RCC_HSI_IsReady+0x18>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <LL_RCC_HSI_IsReady+0x1a>
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_HSI48_Enable>:
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_RCC_HSI48_Disable>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_RCC_HSI48_IsReady>:
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d101      	bne.n	8001dbe <LL_RCC_HSI48_IsReady+0x18>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <LL_RCC_HSI48_IsReady+0x1a>
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_RCC_LSE_Enable>:
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_RCC_LSE_Disable>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_LSE_EnableBypass>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_RCC_LSE_DisableBypass>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d101      	bne.n	8001e6a <LL_RCC_LSE_IsReady+0x18>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_RCC_LSE_IsReady+0x1a>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d101      	bne.n	8001ed2 <LL_RCC_LSI1_IsReady+0x18>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_RCC_LSI1_IsReady+0x1a>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d101      	bne.n	8001f3a <LL_RCC_LSI2_IsReady+0x18>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_RCC_LSI2_IsReady+0x1a>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d101      	bne.n	8001fc6 <LL_RCC_MSI_IsReady+0x16>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <LL_RCC_MSI_IsReady+0x18>
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800200a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2bb0      	cmp	r3, #176	; 0xb0
 8002010:	d901      	bls.n	8002016 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002012:	23b0      	movs	r3, #176	; 0xb0
 8002014:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 0203 	bic.w	r2, r3, #3
 8002060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800207a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002212:	d101      	bne.n	8002218 <LL_RCC_PLL_IsReady+0x18>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <LL_RCC_PLL_IsReady+0x1a>
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0303 	and.w	r3, r3, #3
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002298:	d101      	bne.n	800229e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022be:	d101      	bne.n	80022c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d101      	bne.n	80022ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002308:	d101      	bne.n	800230e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800232c:	d101      	bne.n	8002332 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b08b      	sub	sp, #44	; 0x2c
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e34b      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 808f 	beq.w	800247e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002360:	f7ff fe89 	bl	8002076 <LL_RCC_GetSysClkSource>
 8002364:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002366:	f7ff ff82 	bl	800226e <LL_RCC_PLL_GetMainSource>
 800236a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x3e>
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d149      	bne.n	800240c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d146      	bne.n	800240c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800237e:	f7ff fe17 	bl	8001fb0 <LL_RCC_MSI_IsReady>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_OscConfig+0x54>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e32a      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002398:	f7ff fe2f 	bl	8001ffa <LL_RCC_MSI_GetRange>
 800239c:	4603      	mov	r3, r0
 800239e:	429c      	cmp	r4, r3
 80023a0:	d914      	bls.n	80023cc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fd0e 	bl	8002dc8 <RCC_SetFlashLatencyFromMSIRange>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e319      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fe09 	bl	8001fd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fe2d 	bl	8002024 <LL_RCC_MSI_SetCalibTrimming>
 80023ca:	e013      	b.n	80023f4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fdfe 	bl	8001fd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fe22 	bl	8002024 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fcef 	bl	8002dc8 <RCC_SetFlashLatencyFromMSIRange>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e2fa      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80023f4:	f7fe fe38 	bl	8001068 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023f8:	4bb4      	ldr	r3, [pc, #720]	; (80026cc <HAL_RCC_OscConfig+0x38c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe ff2d 	bl	800125c <HAL_InitTick>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d039      	beq.n	800247c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e2ee      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01e      	beq.n	8002452 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002414:	f7ff fdae 	bl	8001f74 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002418:	f7fe ff6c 	bl	80012f4 <HAL_GetTick>
 800241c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002420:	f7fe ff68 	bl	80012f4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e2db      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002432:	f7ff fdbd 	bl	8001fb0 <LL_RCC_MSI_IsReady>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f1      	beq.n	8002420 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fdc6 	bl	8001fd2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fdea 	bl	8002024 <LL_RCC_MSI_SetCalibTrimming>
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002452:	f7ff fd9e 	bl	8001f92 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002456:	f7fe ff4d 	bl	80012f4 <HAL_GetTick>
 800245a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800245e:	f7fe ff49 	bl	80012f4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e2bc      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002470:	f7ff fd9e 	bl	8001fb0 <LL_RCC_MSI_IsReady>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f1      	bne.n	800245e <HAL_RCC_OscConfig+0x11e>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d05a      	beq.n	8002540 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248a:	f7ff fdf4 	bl	8002076 <LL_RCC_GetSysClkSource>
 800248e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002490:	f7ff feed 	bl	800226e <LL_RCC_PLL_GetMainSource>
 8002494:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x168>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d10d      	bne.n	80024be <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d10a      	bne.n	80024be <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	f7ff fc04 	bl	8001cb4 <LL_RCC_HSE_IsReady>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d045      	beq.n	800253e <HAL_RCC_OscConfig+0x1fe>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d141      	bne.n	800253e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e295      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_OscConfig+0x18e>
 80024c8:	f7ff fbd6 	bl	8001c78 <LL_RCC_HSE_Enable>
 80024cc:	e00d      	b.n	80024ea <HAL_RCC_OscConfig+0x1aa>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d6:	d104      	bne.n	80024e2 <HAL_RCC_OscConfig+0x1a2>
 80024d8:	f7ff fbb0 	bl	8001c3c <LL_RCC_HSE_EnableBypass>
 80024dc:	f7ff fbcc 	bl	8001c78 <LL_RCC_HSE_Enable>
 80024e0:	e003      	b.n	80024ea <HAL_RCC_OscConfig+0x1aa>
 80024e2:	f7ff fbd8 	bl	8001c96 <LL_RCC_HSE_Disable>
 80024e6:	f7ff fbb8 	bl	8001c5a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d012      	beq.n	8002518 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe feff 	bl	80012f4 <HAL_GetTick>
 80024f6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fa:	f7fe fefb 	bl	80012f4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b64      	cmp	r3, #100	; 0x64
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e26e      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800250c:	f7ff fbd2 	bl	8001cb4 <LL_RCC_HSE_IsReady>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f1      	beq.n	80024fa <HAL_RCC_OscConfig+0x1ba>
 8002516:	e013      	b.n	8002540 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe feec 	bl	80012f4 <HAL_GetTick>
 800251c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe fee8 	bl	80012f4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e25b      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002532:	f7ff fbbf 	bl	8001cb4 <LL_RCC_HSE_IsReady>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f1      	bne.n	8002520 <HAL_RCC_OscConfig+0x1e0>
 800253c:	e000      	b.n	8002540 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d051      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254c:	f7ff fd93 	bl	8002076 <LL_RCC_GetSysClkSource>
 8002550:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002552:	f7ff fe8c 	bl	800226e <LL_RCC_PLL_GetMainSource>
 8002556:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x22a>
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	d113      	bne.n	800258c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d110      	bne.n	800258c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256a:	f7ff fbd3 	bl	8001d14 <LL_RCC_HSI_IsReady>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_OscConfig+0x240>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e234      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fbd7 	bl	8001d38 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258a:	e031      	b.n	80025f0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d019      	beq.n	80025c8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	f7ff fba0 	bl	8001cd8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe feac 	bl	80012f4 <HAL_GetTick>
 800259c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe fea8 	bl	80012f4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e21b      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 80025b2:	f7ff fbaf 	bl	8001d14 <LL_RCC_HSI_IsReady>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f1      	beq.n	80025a0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fbb9 	bl	8001d38 <LL_RCC_HSI_SetCalibTrimming>
 80025c6:	e013      	b.n	80025f0 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c8:	f7ff fb95 	bl	8001cf6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fe92 	bl	80012f4 <HAL_GetTick>
 80025d0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe fe8e 	bl	80012f4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e201      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 80025e6:	f7ff fb95 	bl	8001d14 <LL_RCC_HSI_IsReady>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f1      	bne.n	80025d4 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80a2 	beq.w	800274e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d075      	beq.n	80026fe <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d046      	beq.n	80026ac <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800261e:	f7ff fc4c 	bl	8001eba <LL_RCC_LSI1_IsReady>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d113      	bne.n	8002650 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002628:	f7ff fc25 	bl	8001e76 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800262c:	f7fe fe62 	bl	80012f4 <HAL_GetTick>
 8002630:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002634:	f7fe fe5e 	bl	80012f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1d1      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002646:	f7ff fc38 	bl	8001eba <LL_RCC_LSI1_IsReady>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f1      	beq.n	8002634 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002650:	f7ff fc45 	bl	8001ede <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fe4e 	bl	80012f4 <HAL_GetTick>
 8002658:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800265c:	f7fe fe4a 	bl	80012f4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b03      	cmp	r3, #3
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1bd      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800266e:	f7ff fc58 	bl	8001f22 <LL_RCC_LSI2_IsReady>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f1      	beq.n	800265c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fc62 	bl	8001f46 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002682:	f7ff fc09 	bl	8001e98 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fe35 	bl	80012f4 <HAL_GetTick>
 800268a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800268e:	f7fe fe31 	bl	80012f4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1a4      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80026a0:	f7ff fc0b 	bl	8001eba <LL_RCC_LSI1_IsReady>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f1      	bne.n	800268e <HAL_RCC_OscConfig+0x34e>
 80026aa:	e050      	b.n	800274e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80026ac:	f7ff fbe3 	bl	8001e76 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fe20 	bl	80012f4 <HAL_GetTick>
 80026b4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026b8:	f7fe fe1c 	bl	80012f4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d904      	bls.n	80026d0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e18f      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
 80026ca:	bf00      	nop
 80026cc:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 80026d0:	f7ff fbf3 	bl	8001eba <LL_RCC_LSI1_IsReady>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ee      	beq.n	80026b8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80026da:	f7ff fc11 	bl	8001f00 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80026e0:	f7fe fe08 	bl	80012f4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e17b      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80026f2:	f7ff fc16 	bl	8001f22 <LL_RCC_LSI2_IsReady>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f1      	bne.n	80026e0 <HAL_RCC_OscConfig+0x3a0>
 80026fc:	e027      	b.n	800274e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80026fe:	f7ff fbff 	bl	8001f00 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7fe fdf7 	bl	80012f4 <HAL_GetTick>
 8002706:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800270a:	f7fe fdf3 	bl	80012f4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b03      	cmp	r3, #3
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e166      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800271c:	f7ff fc01 	bl	8001f22 <LL_RCC_LSI2_IsReady>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f1      	bne.n	800270a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002726:	f7ff fbb7 	bl	8001e98 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe fde3 	bl	80012f4 <HAL_GetTick>
 800272e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002732:	f7fe fddf 	bl	80012f4 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e152      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002744:	f7ff fbb9 	bl	8001eba <LL_RCC_LSI1_IsReady>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f1      	bne.n	8002732 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d05b      	beq.n	8002812 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275a:	4ba6      	ldr	r3, [pc, #664]	; (80029f4 <HAL_RCC_OscConfig+0x6b4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d114      	bne.n	8002790 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002766:	f7ff fa39 	bl	8001bdc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276a:	f7fe fdc3 	bl	80012f4 <HAL_GetTick>
 800276e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7fe fdbf 	bl	80012f4 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e132      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002784:	4b9b      	ldr	r3, [pc, #620]	; (80029f4 <HAL_RCC_OscConfig+0x6b4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_RCC_OscConfig+0x45e>
 8002798:	f7ff fb17 	bl	8001dca <LL_RCC_LSE_Enable>
 800279c:	e00c      	b.n	80027b8 <HAL_RCC_OscConfig+0x478>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d104      	bne.n	80027b0 <HAL_RCC_OscConfig+0x470>
 80027a6:	f7ff fb32 	bl	8001e0e <LL_RCC_LSE_EnableBypass>
 80027aa:	f7ff fb0e 	bl	8001dca <LL_RCC_LSE_Enable>
 80027ae:	e003      	b.n	80027b8 <HAL_RCC_OscConfig+0x478>
 80027b0:	f7ff fb1c 	bl	8001dec <LL_RCC_LSE_Disable>
 80027b4:	f7ff fb3c 	bl	8001e30 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d014      	beq.n	80027ea <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fd98 	bl	80012f4 <HAL_GetTick>
 80027c4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe fd94 	bl	80012f4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e105      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 80027de:	f7ff fb38 	bl	8001e52 <LL_RCC_LSE_IsReady>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <HAL_RCC_OscConfig+0x488>
 80027e8:	e013      	b.n	8002812 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe fd83 	bl	80012f4 <HAL_GetTick>
 80027ee:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fd7f 	bl	80012f4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0f0      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002808:	f7ff fb23 	bl	8001e52 <LL_RCC_LSE_IsReady>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ef      	bne.n	80027f2 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d02c      	beq.n	8002878 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d014      	beq.n	8002850 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002826:	f7ff fa9c 	bl	8001d62 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe fd63 	bl	80012f4 <HAL_GetTick>
 800282e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002832:	f7fe fd5f 	bl	80012f4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0d2      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002844:	f7ff faaf 	bl	8001da6 <LL_RCC_HSI48_IsReady>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f1      	beq.n	8002832 <HAL_RCC_OscConfig+0x4f2>
 800284e:	e013      	b.n	8002878 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002850:	f7ff fa98 	bl	8001d84 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe fd4e 	bl	80012f4 <HAL_GetTick>
 8002858:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800285c:	f7fe fd4a 	bl	80012f4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0bd      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800286e:	f7ff fa9a 	bl	8001da6 <LL_RCC_HSI48_IsReady>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f1      	bne.n	800285c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80b3 	beq.w	80029e8 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002882:	f7ff fbf8 	bl	8002076 <LL_RCC_GetSysClkSource>
 8002886:	4603      	mov	r3, r0
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d076      	beq.n	800297a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	2b02      	cmp	r3, #2
 8002892:	d14b      	bne.n	800292c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	f7ff fca5 	bl	80021e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fd2c 	bl	80012f4 <HAL_GetTick>
 800289c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fd28 	bl	80012f4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e09b      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028b2:	f7ff fca5 	bl	8002200 <LL_RCC_PLL_IsReady>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f1      	bne.n	80028a0 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b4d      	ldr	r3, [pc, #308]	; (80029f8 <HAL_RCC_OscConfig+0x6b8>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d4:	0212      	lsls	r2, r2, #8
 80028d6:	4311      	orrs	r1, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028dc:	4311      	orrs	r1, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028e8:	430a      	orrs	r2, r1
 80028ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f2:	f7ff fc67 	bl	80021c4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe fcf5 	bl	80012f4 <HAL_GetTick>
 800290a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe fcf1 	bl	80012f4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e064      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002920:	f7ff fc6e 	bl	8002200 <LL_RCC_PLL_IsReady>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f1      	beq.n	800290e <HAL_RCC_OscConfig+0x5ce>
 800292a:	e05d      	b.n	80029e8 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292c:	f7ff fc59 	bl	80021e2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800294e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002952:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fcce 	bl	80012f4 <HAL_GetTick>
 8002958:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fcca 	bl	80012f4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e03d      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800296e:	f7ff fc47 	bl	8002200 <LL_RCC_PLL_IsReady>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f1      	bne.n	800295c <HAL_RCC_OscConfig+0x61c>
 8002978:	e036      	b.n	80029e8 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e031      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	429a      	cmp	r2, r3
 800299a:	d123      	bne.n	80029e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d114      	bne.n	80029e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	372c      	adds	r7, #44	; 0x2c
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	58000400 	.word	0x58000400
 80029f8:	11c1808c 	.word	0x11c1808c

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e12a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b97      	ldr	r3, [pc, #604]	; (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d91b      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b94      	ldr	r3, [pc, #592]	; (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4992      	ldr	r1, [pc, #584]	; (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2e:	f7fe fc61 	bl	80012f4 <HAL_GetTick>
 8002a32:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a36:	f7fe fc5d 	bl	80012f4 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e10e      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a48:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d1ef      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fb11 	bl	800208e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fc42 	bl	80012f4 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a74:	f7fe fc3e 	bl	80012f4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0ef      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a86:	f7ff fbfe 	bl	8002286 <LL_RCC_IsActiveFlag_HPRE>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f1      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d016      	beq.n	8002aca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fb08 	bl	80020b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe fc25 	bl	80012f4 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aae:	f7fe fc21 	bl	80012f4 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0d2      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ac0:	f7ff fbf3 	bl	80022aa <LL_RCC_IsActiveFlag_C2HPRE>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f1      	beq.n	8002aae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fb01 	bl	80020e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fc08 	bl	80012f4 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ae8:	f7fe fc04 	bl	80012f4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0b5      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002afa:	f7ff fbe9 	bl	80022d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f1      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d016      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fafb 	bl	8002110 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b1a:	f7fe fbeb 	bl	80012f4 <HAL_GetTick>
 8002b1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b22:	f7fe fbe7 	bl	80012f4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e098      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b34:	f7ff fbdf 	bl	80022f6 <LL_RCC_IsActiveFlag_PPRE1>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f1      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d017      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff faf1 	bl	8002138 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b56:	f7fe fbcd 	bl	80012f4 <HAL_GetTick>
 8002b5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b5e:	f7fe fbc9 	bl	80012f4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e07a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b70:	f7ff fbd3 	bl	800231a <LL_RCC_IsActiveFlag_PPRE2>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f1      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d043      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b8e:	f7ff f891 	bl	8001cb4 <LL_RCC_HSE_IsReady>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11e      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e064      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ba4:	f7ff fb2c 	bl	8002200 <LL_RCC_PLL_IsReady>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d113      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e059      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002bba:	f7ff f9f9 	bl	8001fb0 <LL_RCC_MSI_IsReady>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d108      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e04e      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002bc8:	f7ff f8a4 	bl	8001d14 <LL_RCC_HSI_IsReady>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e047      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fa37 	bl	800204e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe fb88 	bl	80012f4 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be8:	f7fe fb84 	bl	80012f4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e033      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	f7ff fa3a 	bl	8002076 <LL_RCC_GetSysClkSource>
 8002c02:	4602      	mov	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d1ec      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d21b      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 0207 	bic.w	r2, r3, #7
 8002c24:	4912      	ldr	r1, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fb62 	bl	80012f4 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c34:	f7fe fb5e 	bl	80012f4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e00f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d1ef      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002c54:	f7fe fa08 	bl	8001068 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c58:	f7fe fb58 	bl	800130c <HAL_GetTickPrio>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fafc 	bl	800125c <HAL_InitTick>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	58004000 	.word	0x58004000

08002c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7a:	f7ff f9fc 	bl	8002076 <LL_RCC_GetSysClkSource>
 8002c7e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c86:	f7ff f9b8 	bl	8001ffa <LL_RCC_MSI_GetRange>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e04a      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d102      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e044      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d10a      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cae:	f7fe ffb3 	bl	8001c18 <LL_RCC_HSE_IsEnabledDiv2>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d102      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002cb8:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e039      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e036      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002cc4:	f7ff fad3 	bl	800226e <LL_RCC_PLL_GetMainSource>
 8002cc8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d002      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x62>
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d003      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x68>
 8002cd4:	e00d      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cd8:	60bb      	str	r3, [r7, #8]
        break;
 8002cda:	e015      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cdc:	f7fe ff9c 	bl	8001c18 <LL_RCC_HSE_IsEnabledDiv2>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ce8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cea:	e00d      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cee:	60bb      	str	r3, [r7, #8]
        break;
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cf2:	f7ff f982 	bl	8001ffa <LL_RCC_MSI_GetRange>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	60bb      	str	r3, [r7, #8]
        break;
 8002d06:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002d08:	f7ff fa8c 	bl	8002224 <LL_RCC_PLL_GetN>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	fb03 f402 	mul.w	r4, r3, r2
 8002d14:	f7ff fa9f 	bl	8002256 <LL_RCC_PLL_GetDivider>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d22:	f7ff fa8c 	bl	800223e <LL_RCC_PLL_GetR>
 8002d26:	4603      	mov	r3, r0
 8002d28:	0f5b      	lsrs	r3, r3, #29
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	08059c88 	.word	0x08059c88
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	01e84800 	.word	0x01e84800

08002d48 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b598      	push	{r3, r4, r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d4c:	f7ff ff92 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002d50:	4604      	mov	r4, r0
 8002d52:	f7ff fa05 	bl	8002160 <LL_RCC_GetAHBPrescaler>
 8002d56:	4603      	mov	r3, r0
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x24>)
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd98      	pop	{r3, r4, r7, pc}
 8002d6c:	08059c28 	.word	0x08059c28

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b598      	push	{r3, r4, r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d74:	f7ff ffe8 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	f7ff fa0b 	bl	8002194 <LL_RCC_GetAPB1Prescaler>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd98      	pop	{r3, r4, r7, pc}
 8002d98:	08059c68 	.word	0x08059c68

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b598      	push	{r3, r4, r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002da0:	f7ff ffd2 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002da4:	4604      	mov	r4, r0
 8002da6:	f7ff fa01 	bl	80021ac <LL_RCC_GetAPB2Prescaler>
 8002daa:	4603      	mov	r3, r0
 8002dac:	0adb      	lsrs	r3, r3, #11
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd98      	pop	{r3, r4, r7, pc}
 8002dc4:	08059c68 	.word	0x08059c68

08002dc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2bb0      	cmp	r3, #176	; 0xb0
 8002dd4:	d903      	bls.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e007      	b.n	8002dee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002dee:	f7ff f9c3 	bl	8002178 <LL_RCC_GetAHB4Prescaler>
 8002df2:	4603      	mov	r3, r0
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	0c9c      	lsrs	r4, r3, #18
 8002e12:	f7fe fef3 	bl	8001bfc <HAL_PWREx_GetVoltageRange>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f000 f80c 	bl	8002e38 <RCC_SetFlashLatency>
 8002e20:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	08059c88 	.word	0x08059c88
 8002e30:	08059c28 	.word	0x08059c28
 8002e34:	431bde83 	.word	0x431bde83

08002e38 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b093      	sub	sp, #76	; 0x4c
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <RCC_SetFlashLatency+0xf0>)
 8002e44:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002e4e:	4a37      	ldr	r2, [pc, #220]	; (8002f2c <RCC_SetFlashLatency+0xf4>)
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002e5a:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <RCC_SetFlashLatency+0xf8>)
 8002e5c:	f107 040c 	add.w	r4, r7, #12
 8002e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e66:	2300      	movs	r3, #0
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d11c      	bne.n	8002eac <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
 8002e76:	e015      	b.n	8002ea4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e80:	4413      	add	r3, r2
 8002e82:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d808      	bhi.n	8002e9e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e94:	4413      	add	r3, r2
 8002e96:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e9a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e9c:	e022      	b.n	8002ee4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d9e6      	bls.n	8002e78 <RCC_SetFlashLatency+0x40>
 8002eaa:	e01b      	b.n	8002ee4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb0:	e015      	b.n	8002ede <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002eba:	4413      	add	r3, r2
 8002ebc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d808      	bhi.n	8002ed8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002ece:	4413      	add	r3, r2
 8002ed0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ed6:	e005      	b.n	8002ee4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eda:	3301      	adds	r3, #1
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d9e6      	bls.n	8002eb2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <RCC_SetFlashLatency+0xfc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 0207 	bic.w	r2, r3, #7
 8002eec:	4911      	ldr	r1, [pc, #68]	; (8002f34 <RCC_SetFlashLatency+0xfc>)
 8002eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ef4:	f7fe f9fe 	bl	80012f4 <HAL_GetTick>
 8002ef8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002efa:	e008      	b.n	8002f0e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002efc:	f7fe f9fa 	bl	80012f4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e007      	b.n	8002f1e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <RCC_SetFlashLatency+0xfc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1ef      	bne.n	8002efc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	374c      	adds	r7, #76	; 0x4c
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	080055a4 	.word	0x080055a4
 8002f2c:	080055b4 	.word	0x080055b4
 8002f30:	080055c0 	.word	0x080055c0
 8002f34:	58004000 	.word	0x58004000

08002f38 <LL_RCC_LSE_IsEnabled>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <LL_RCC_LSE_IsEnabled+0x18>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_RCC_LSE_IsEnabled+0x1a>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_LSE_IsReady>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d101      	bne.n	8002f74 <LL_RCC_LSE_IsReady+0x18>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <LL_RCC_LSE_IsReady+0x1a>
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_MSI_EnablePLLMode>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_SetRFWKPClockSource>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_SetSMPSClockSource>:
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f023 0203 	bic.w	r2, r3, #3
 8002fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_RCC_SetSMPSPrescaler>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4313      	orrs	r3, r2
 800300c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_SetUSARTClockSource>:
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_SetLPUARTClockSource>:
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800305a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_RCC_SetI2CClockSource>:
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800308a:	43db      	mvns	r3, r3
 800308c:	401a      	ands	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_RCC_SetLPTIMClockSource>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80030b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	43db      	mvns	r3, r3
 80030c4:	401a      	ands	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_RCC_SetSAIClockSource>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_RCC_SetRNGClockSource>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_RCC_SetCLK48ClockSource>:
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800314c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_RCC_SetUSBClockSource>:
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ffe3 	bl	8003138 <LL_RCC_SetCLK48ClockSource>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <LL_RCC_SetADCClockSource>:
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_RCC_SetRTCClockSource>:
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_RCC_GetRTCClockSource>:
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_ForceBackupDomainReset>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_RCC_ReleaseBackupDomainReset>:
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_RCC_PLLSAI1_Enable>:
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <LL_RCC_PLLSAI1_Disable>:
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003260:	6013      	str	r3, [r2, #0]
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_RCC_PLLSAI1_IsReady>:
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800327a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327e:	d101      	bne.n	8003284 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800329c:	2300      	movs	r3, #0
 800329e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d033      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b4:	d00c      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80032b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ba:	d802      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032c0:	e017      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032c6:	d017      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80032c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032cc:	d016      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80032ce:	e010      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80032d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032de:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80032e0:	e00d      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f94d 	bl	8003586 <RCCEx_PLLSAI1_ConfigNP>
 80032ec:	4603      	mov	r3, r0
 80032ee:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80032f0:	e005      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77fb      	strb	r3, [r7, #31]
        break;
 80032f6:	e002      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80032fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fe:	7ffb      	ldrb	r3, [r7, #31]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fee9 	bl	80030e0 <LL_RCC_SetSAIClockSource>
 800330e:	e001      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7ffb      	ldrb	r3, [r7, #31]
 8003312:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d046      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003320:	f7ff ff57 	bl	80031d2 <LL_RCC_GetRTCClockSource>
 8003324:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	429a      	cmp	r2, r3
 800332e:	d03c      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003330:	f7fe fc54 	bl	8001bdc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff31 	bl	80031a6 <LL_RCC_SetRTCClockSource>
 8003344:	e02e      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003350:	f7ff ff4c 	bl	80031ec <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003354:	f7ff ff5b 	bl	800320e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003370:	f7ff fde2 	bl	8002f38 <LL_RCC_LSE_IsEnabled>
 8003374:	4603      	mov	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d114      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800337a:	f7fd ffbb 	bl	80012f4 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003380:	e00b      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd ffb7 	bl	80012f4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d902      	bls.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	77fb      	strb	r3, [r7, #31]
              break;
 8003398:	e004      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800339a:	f7ff fddf 	bl	8002f5c <LL_RCC_LSE_IsReady>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d1ee      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80033a4:	7ffb      	ldrb	r3, [r7, #31]
 80033a6:	77bb      	strb	r3, [r7, #30]
 80033a8:	e001      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033aa:	7ffb      	ldrb	r3, [r7, #31]
 80033ac:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d004      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fe2b 	bl	800301a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fe36 	bl	8003046 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fe5e 	bl	80030ac <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fe53 	bl	80030ac <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fe2b 	bl	8003072 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fe20 	bl	8003072 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d022      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fe8e 	bl	8003164 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003450:	d107      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800345c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003460:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800346a:	d10b      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f8e3 	bl	800363c <RCCEx_PLLSAI1_ConfigNQ>
 8003476:	4603      	mov	r3, r0
 8003478:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8003480:	7ffb      	ldrb	r3, [r7, #31]
 8003482:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02b      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d008      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034a2:	d003      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fe2b 	bl	800310c <LL_RCC_SetRNGClockSource>
 80034b6:	e00a      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7ff fe22 	bl	800310c <LL_RCC_SetRNGClockSource>
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff fe35 	bl	8003138 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80034d6:	d107      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80034d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d022      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fe3e 	bl	800317a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003506:	d107      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003516:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003520:	d10b      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f8e3 	bl	80036f2 <RCCEx_PLLSAI1_ConfigNR>
 800352c:	4603      	mov	r3, r0
 800352e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003530:	7ffb      	ldrb	r3, [r7, #31]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fd27 	bl	8002f9e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fd46 	bl	8002ff2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fd2d 	bl	8002fca <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8003570:	7fbb      	ldrb	r3, [r7, #30]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800357e:	f7ff fcff 	bl	8002f80 <LL_RCC_MSI_EnablePLLMode>
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}

08003586 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003592:	f7ff fe5c 	bl	800324e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003596:	f7fd fead 	bl	80012f4 <HAL_GetTick>
 800359a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800359c:	e009      	b.n	80035b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800359e:	f7fd fea9 	bl	80012f4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d902      	bls.n	80035b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	73fb      	strb	r3, [r7, #15]
      break;
 80035b0:	e004      	b.n	80035bc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035b2:	f7ff fe5b 	bl	800326c <LL_RCC_PLLSAI1_IsReady>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d137      	bne.n	8003632 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ec:	4313      	orrs	r3, r2
 80035ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035f0:	f7ff fe1e 	bl	8003230 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f4:	f7fd fe7e 	bl	80012f4 <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035fa:	e009      	b.n	8003610 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035fc:	f7fd fe7a 	bl	80012f4 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d902      	bls.n	8003610 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	73fb      	strb	r3, [r7, #15]
        break;
 800360e:	e004      	b.n	800361a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003610:	f7ff fe2c 	bl	800326c <LL_RCC_PLLSAI1_IsReady>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d1f0      	bne.n	80035fc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362e:	4313      	orrs	r3, r2
 8003630:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003648:	f7ff fe01 	bl	800324e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800364c:	f7fd fe52 	bl	80012f4 <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003652:	e009      	b.n	8003668 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003654:	f7fd fe4e 	bl	80012f4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d902      	bls.n	8003668 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	73fb      	strb	r3, [r7, #15]
      break;
 8003666:	e004      	b.n	8003672 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003668:	f7ff fe00 	bl	800326c <LL_RCC_PLLSAI1_IsReady>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d137      	bne.n	80036e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800368c:	4313      	orrs	r3, r2
 800368e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a2:	4313      	orrs	r3, r2
 80036a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036a6:	f7ff fdc3 	bl	8003230 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036aa:	f7fd fe23 	bl	80012f4 <HAL_GetTick>
 80036ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036b0:	e009      	b.n	80036c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036b2:	f7fd fe1f 	bl	80012f4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d902      	bls.n	80036c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	73fb      	strb	r3, [r7, #15]
        break;
 80036c4:	e004      	b.n	80036d0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036c6:	f7ff fdd1 	bl	800326c <LL_RCC_PLLSAI1_IsReady>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d1f0      	bne.n	80036b2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e4:	4313      	orrs	r3, r2
 80036e6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036fe:	f7ff fda6 	bl	800324e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003702:	f7fd fdf7 	bl	80012f4 <HAL_GetTick>
 8003706:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003708:	e009      	b.n	800371e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800370a:	f7fd fdf3 	bl	80012f4 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d902      	bls.n	800371e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800371e:	f7ff fda5 	bl	800326c <LL_RCC_PLLSAI1_IsReady>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d137      	bne.n	800379e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003742:	4313      	orrs	r3, r2
 8003744:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003758:	4313      	orrs	r3, r2
 800375a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800375c:	f7ff fd68 	bl	8003230 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003760:	f7fd fdc8 	bl	80012f4 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003766:	e009      	b.n	800377c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003768:	f7fd fdc4 	bl	80012f4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d902      	bls.n	800377c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	73fb      	strb	r3, [r7, #15]
        break;
 800377a:	e004      	b.n	8003786 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800377c:	f7ff fd76 	bl	800326c <LL_RCC_PLLSAI1_IsReady>
 8003780:	4603      	mov	r3, r0
 8003782:	2b01      	cmp	r3, #1
 8003784:	d1f0      	bne.n	8003768 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d108      	bne.n	800379e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800379a:	4313      	orrs	r3, r2
 800379c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800379e:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e07c      	b.n	80038b4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fd faed 	bl	8000db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037fa:	d902      	bls.n	8003802 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e002      	b.n	8003808 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003806:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003810:	d007      	beq.n	8003822 <HAL_SPI_Init+0x7a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003832:	d903      	bls.n	800383c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
 800383a:	e002      	b.n	8003842 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	ea42 0103 	orr.w	r1, r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0204 	and.w	r2, r3, #4
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	ea42 0103 	orr.w	r1, r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_SPI_Transmit+0x22>
 80038da:	2302      	movs	r3, #2
 80038dc:	e150      	b.n	8003b80 <HAL_SPI_Transmit+0x2c4>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038e6:	f7fd fd05 	bl	80012f4 <HAL_GetTick>
 80038ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
 80038fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003900:	e135      	b.n	8003b6e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_SPI_Transmit+0x52>
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003912:	e12c      	b.n	8003b6e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2203      	movs	r2, #3
 8003918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395e:	d107      	bne.n	8003970 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800396e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d007      	beq.n	800398e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003996:	d94b      	bls.n	8003a30 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_SPI_Transmit+0xea>
 80039a0:	8afb      	ldrh	r3, [r7, #22]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d13e      	bne.n	8003a24 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	1c9a      	adds	r2, r3, #2
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039ca:	e02b      	b.n	8003a24 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d112      	bne.n	8003a00 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	881a      	ldrh	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	1c9a      	adds	r2, r3, #2
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039fe:	e011      	b.n	8003a24 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a00:	f7fd fc78 	bl	80012f4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d803      	bhi.n	8003a18 <HAL_SPI_Transmit+0x15c>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d102      	bne.n	8003a1e <HAL_SPI_Transmit+0x162>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a22:	e0a4      	b.n	8003b6e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ce      	bne.n	80039cc <HAL_SPI_Transmit+0x110>
 8003a2e:	e07c      	b.n	8003b2a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_SPI_Transmit+0x182>
 8003a38:	8afb      	ldrh	r3, [r7, #22]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d170      	bne.n	8003b20 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d912      	bls.n	8003a6e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b02      	subs	r3, #2
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a6c:	e058      	b.n	8003b20 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a94:	e044      	b.n	8003b20 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d12b      	bne.n	8003afc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d912      	bls.n	8003ad4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	881a      	ldrh	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b02      	subs	r3, #2
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ad2:	e025      	b.n	8003b20 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003afa:	e011      	b.n	8003b20 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003afc:	f7fd fbfa 	bl	80012f4 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d803      	bhi.n	8003b14 <HAL_SPI_Transmit+0x258>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d102      	bne.n	8003b1a <HAL_SPI_Transmit+0x25e>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b1e:	e026      	b.n	8003b6e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1b5      	bne.n	8003a96 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	6839      	ldr	r1, [r7, #0]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f901 	bl	8003d36 <SPI_EndRxTxTransaction>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e000      	b.n	8003b6e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003b6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b98:	e04c      	b.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d048      	beq.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003ba2:	f7fd fba7 	bl	80012f4 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d902      	bls.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d13d      	bne.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd0:	d111      	bne.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bda:	d004      	beq.n	8003be6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be4:	d107      	bne.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfe:	d10f      	bne.n	8003c20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e00f      	b.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d1a3      	bne.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c6a:	e057      	b.n	8003d1c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c72:	d106      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d048      	beq.n	8003d1c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c8a:	f7fd fb33 	bl	80012f4 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d902      	bls.n	8003ca0 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d13d      	bne.n	8003d1c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cb8:	d111      	bne.n	8003cde <SPI_WaitFifoStateUntilTimeout+0x82>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc2:	d004      	beq.n	8003cce <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ccc:	d107      	bne.n	8003cde <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cdc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	d10f      	bne.n	8003d08 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e008      	b.n	8003d2e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d19f      	bne.n	8003c6c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af02      	add	r7, sp, #8
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff ff84 	bl	8003c5c <SPI_WaitFifoStateUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e027      	b.n	8003dba <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7ff ff07 	bl	8003b88 <SPI_WaitFlagStateUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e014      	b.n	8003dba <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff ff5d 	bl	8003c5c <SPI_WaitFifoStateUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e000      	b.n	8003dba <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <LL_RCC_GetUSARTClockSource>:
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4013      	ands	r3, r2
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <LL_RCC_GetLPUARTClockSource>:
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4013      	ands	r3, r2
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e042      	b.n	8003e9a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd f83a 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f82f 	bl	8003ea8 <UART_SetConfig>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e022      	b.n	8003e9a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f001 f887 	bl	8004f70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f001 f90e 	bl	80050b4 <UART_CheckIdleState>
 8003e98:	4603      	mov	r3, r0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	0000      	movs	r0, r0
 8003ea4:	0000      	movs	r0, r0
	...

08003ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003eac:	b08a      	sub	sp, #40	; 0x28
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	4313      	orrs	r3, r2
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4ba4      	ldr	r3, [pc, #656]	; (8004178 <UART_SetConfig+0x2d0>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a99      	ldr	r2, [pc, #612]	; (800417c <UART_SetConfig+0x2d4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f20:	4313      	orrs	r3, r2
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f023 010f 	bic.w	r1, r3, #15
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a8a      	ldr	r2, [pc, #552]	; (8004180 <UART_SetConfig+0x2d8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d126      	bne.n	8003faa <UART_SetConfig+0x102>
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	f7ff ff30 	bl	8003dc2 <LL_RCC_GetUSARTClockSource>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d81b      	bhi.n	8003fa0 <UART_SetConfig+0xf8>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <UART_SetConfig+0xc8>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f91 	.word	0x08003f91
 8003f78:	08003f89 	.word	0x08003f89
 8003f7c:	08003f99 	.word	0x08003f99
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f86:	e042      	b.n	800400e <UART_SetConfig+0x166>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8e:	e03e      	b.n	800400e <UART_SetConfig+0x166>
 8003f90:	2304      	movs	r3, #4
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f96:	e03a      	b.n	800400e <UART_SetConfig+0x166>
 8003f98:	2308      	movs	r3, #8
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9e:	e036      	b.n	800400e <UART_SetConfig+0x166>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa6:	bf00      	nop
 8003fa8:	e031      	b.n	800400e <UART_SetConfig+0x166>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a73      	ldr	r2, [pc, #460]	; (800417c <UART_SetConfig+0x2d4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d129      	bne.n	8004008 <UART_SetConfig+0x160>
 8003fb4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003fb8:	f7ff ff13 	bl	8003de2 <LL_RCC_GetLPUARTClockSource>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc2:	d014      	beq.n	8003fee <UART_SetConfig+0x146>
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc8:	d802      	bhi.n	8003fd0 <UART_SetConfig+0x128>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <UART_SetConfig+0x136>
 8003fce:	e016      	b.n	8003ffe <UART_SetConfig+0x156>
 8003fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd4:	d007      	beq.n	8003fe6 <UART_SetConfig+0x13e>
 8003fd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fda:	d00c      	beq.n	8003ff6 <UART_SetConfig+0x14e>
 8003fdc:	e00f      	b.n	8003ffe <UART_SetConfig+0x156>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe4:	e013      	b.n	800400e <UART_SetConfig+0x166>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fec:	e00f      	b.n	800400e <UART_SetConfig+0x166>
 8003fee:	2304      	movs	r3, #4
 8003ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff4:	e00b      	b.n	800400e <UART_SetConfig+0x166>
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffc:	e007      	b.n	800400e <UART_SetConfig+0x166>
 8003ffe:	2310      	movs	r3, #16
 8004000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004004:	bf00      	nop
 8004006:	e002      	b.n	800400e <UART_SetConfig+0x166>
 8004008:	2310      	movs	r3, #16
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a5a      	ldr	r2, [pc, #360]	; (800417c <UART_SetConfig+0x2d4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	f040 8428 	bne.w	800486a <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800401a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800401e:	2b08      	cmp	r3, #8
 8004020:	f200 8171 	bhi.w	8004306 <UART_SetConfig+0x45e>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x184>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004051 	.word	0x08004051
 8004030:	08004307 	.word	0x08004307
 8004034:	080040f3 	.word	0x080040f3
 8004038:	08004307 	.word	0x08004307
 800403c:	080041b7 	.word	0x080041b7
 8004040:	08004307 	.word	0x08004307
 8004044:	08004307 	.word	0x08004307
 8004048:	08004307 	.word	0x08004307
 800404c:	08004259 	.word	0x08004259
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004050:	f7fe fe8e 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8004054:	4602      	mov	r2, r0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d044      	beq.n	80040e8 <UART_SetConfig+0x240>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	2b01      	cmp	r3, #1
 8004064:	d03e      	beq.n	80040e4 <UART_SetConfig+0x23c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b02      	cmp	r3, #2
 800406c:	d038      	beq.n	80040e0 <UART_SetConfig+0x238>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b03      	cmp	r3, #3
 8004074:	d032      	beq.n	80040dc <UART_SetConfig+0x234>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b04      	cmp	r3, #4
 800407c:	d02c      	beq.n	80040d8 <UART_SetConfig+0x230>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b05      	cmp	r3, #5
 8004084:	d026      	beq.n	80040d4 <UART_SetConfig+0x22c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b06      	cmp	r3, #6
 800408c:	d020      	beq.n	80040d0 <UART_SetConfig+0x228>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b07      	cmp	r3, #7
 8004094:	d01a      	beq.n	80040cc <UART_SetConfig+0x224>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	2b08      	cmp	r3, #8
 800409c:	d014      	beq.n	80040c8 <UART_SetConfig+0x220>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	2b09      	cmp	r3, #9
 80040a4:	d00e      	beq.n	80040c4 <UART_SetConfig+0x21c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b0a      	cmp	r3, #10
 80040ac:	d008      	beq.n	80040c0 <UART_SetConfig+0x218>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b0b      	cmp	r3, #11
 80040b4:	d102      	bne.n	80040bc <UART_SetConfig+0x214>
 80040b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ba:	e016      	b.n	80040ea <UART_SetConfig+0x242>
 80040bc:	2301      	movs	r3, #1
 80040be:	e014      	b.n	80040ea <UART_SetConfig+0x242>
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	e012      	b.n	80040ea <UART_SetConfig+0x242>
 80040c4:	2340      	movs	r3, #64	; 0x40
 80040c6:	e010      	b.n	80040ea <UART_SetConfig+0x242>
 80040c8:	2320      	movs	r3, #32
 80040ca:	e00e      	b.n	80040ea <UART_SetConfig+0x242>
 80040cc:	2310      	movs	r3, #16
 80040ce:	e00c      	b.n	80040ea <UART_SetConfig+0x242>
 80040d0:	230c      	movs	r3, #12
 80040d2:	e00a      	b.n	80040ea <UART_SetConfig+0x242>
 80040d4:	230a      	movs	r3, #10
 80040d6:	e008      	b.n	80040ea <UART_SetConfig+0x242>
 80040d8:	2308      	movs	r3, #8
 80040da:	e006      	b.n	80040ea <UART_SetConfig+0x242>
 80040dc:	2306      	movs	r3, #6
 80040de:	e004      	b.n	80040ea <UART_SetConfig+0x242>
 80040e0:	2304      	movs	r3, #4
 80040e2:	e002      	b.n	80040ea <UART_SetConfig+0x242>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e000      	b.n	80040ea <UART_SetConfig+0x242>
 80040e8:	2301      	movs	r3, #1
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	617b      	str	r3, [r7, #20]
        break;
 80040f0:	e10c      	b.n	800430c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d05a      	beq.n	80041b0 <UART_SetConfig+0x308>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d054      	beq.n	80041ac <UART_SetConfig+0x304>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b02      	cmp	r3, #2
 8004108:	d04e      	beq.n	80041a8 <UART_SetConfig+0x300>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b03      	cmp	r3, #3
 8004110:	d048      	beq.n	80041a4 <UART_SetConfig+0x2fc>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b04      	cmp	r3, #4
 8004118:	d02c      	beq.n	8004174 <UART_SetConfig+0x2cc>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b05      	cmp	r3, #5
 8004120:	d026      	beq.n	8004170 <UART_SetConfig+0x2c8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	2b06      	cmp	r3, #6
 8004128:	d020      	beq.n	800416c <UART_SetConfig+0x2c4>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2b07      	cmp	r3, #7
 8004130:	d01a      	beq.n	8004168 <UART_SetConfig+0x2c0>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2b08      	cmp	r3, #8
 8004138:	d014      	beq.n	8004164 <UART_SetConfig+0x2bc>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b09      	cmp	r3, #9
 8004140:	d00e      	beq.n	8004160 <UART_SetConfig+0x2b8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b0a      	cmp	r3, #10
 8004148:	d008      	beq.n	800415c <UART_SetConfig+0x2b4>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	2b0b      	cmp	r3, #11
 8004150:	d102      	bne.n	8004158 <UART_SetConfig+0x2b0>
 8004152:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004156:	e02c      	b.n	80041b2 <UART_SetConfig+0x30a>
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <UART_SetConfig+0x2dc>)
 800415a:	e02a      	b.n	80041b2 <UART_SetConfig+0x30a>
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <UART_SetConfig+0x2e0>)
 800415e:	e028      	b.n	80041b2 <UART_SetConfig+0x30a>
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <UART_SetConfig+0x2e4>)
 8004162:	e026      	b.n	80041b2 <UART_SetConfig+0x30a>
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <UART_SetConfig+0x2e8>)
 8004166:	e024      	b.n	80041b2 <UART_SetConfig+0x30a>
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <UART_SetConfig+0x2ec>)
 800416a:	e022      	b.n	80041b2 <UART_SetConfig+0x30a>
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <UART_SetConfig+0x2f0>)
 800416e:	e020      	b.n	80041b2 <UART_SetConfig+0x30a>
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <UART_SetConfig+0x2f4>)
 8004172:	e01e      	b.n	80041b2 <UART_SetConfig+0x30a>
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <UART_SetConfig+0x2f8>)
 8004176:	e01c      	b.n	80041b2 <UART_SetConfig+0x30a>
 8004178:	cfff69f3 	.word	0xcfff69f3
 800417c:	40008000 	.word	0x40008000
 8004180:	40013800 	.word	0x40013800
 8004184:	00f42400 	.word	0x00f42400
 8004188:	0001e848 	.word	0x0001e848
 800418c:	0003d090 	.word	0x0003d090
 8004190:	0007a120 	.word	0x0007a120
 8004194:	000f4240 	.word	0x000f4240
 8004198:	00145855 	.word	0x00145855
 800419c:	00186a00 	.word	0x00186a00
 80041a0:	001e8480 	.word	0x001e8480
 80041a4:	4ba6      	ldr	r3, [pc, #664]	; (8004440 <UART_SetConfig+0x598>)
 80041a6:	e004      	b.n	80041b2 <UART_SetConfig+0x30a>
 80041a8:	4ba6      	ldr	r3, [pc, #664]	; (8004444 <UART_SetConfig+0x59c>)
 80041aa:	e002      	b.n	80041b2 <UART_SetConfig+0x30a>
 80041ac:	4ba6      	ldr	r3, [pc, #664]	; (8004448 <UART_SetConfig+0x5a0>)
 80041ae:	e000      	b.n	80041b2 <UART_SetConfig+0x30a>
 80041b0:	4ba6      	ldr	r3, [pc, #664]	; (800444c <UART_SetConfig+0x5a4>)
 80041b2:	617b      	str	r3, [r7, #20]
        break;
 80041b4:	e0aa      	b.n	800430c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041b6:	f7fe fd5d 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d044      	beq.n	800424e <UART_SetConfig+0x3a6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d03e      	beq.n	800424a <UART_SetConfig+0x3a2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d038      	beq.n	8004246 <UART_SetConfig+0x39e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d032      	beq.n	8004242 <UART_SetConfig+0x39a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d02c      	beq.n	800423e <UART_SetConfig+0x396>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d026      	beq.n	800423a <UART_SetConfig+0x392>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2b06      	cmp	r3, #6
 80041f2:	d020      	beq.n	8004236 <UART_SetConfig+0x38e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b07      	cmp	r3, #7
 80041fa:	d01a      	beq.n	8004232 <UART_SetConfig+0x38a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	2b08      	cmp	r3, #8
 8004202:	d014      	beq.n	800422e <UART_SetConfig+0x386>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	2b09      	cmp	r3, #9
 800420a:	d00e      	beq.n	800422a <UART_SetConfig+0x382>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	2b0a      	cmp	r3, #10
 8004212:	d008      	beq.n	8004226 <UART_SetConfig+0x37e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b0b      	cmp	r3, #11
 800421a:	d102      	bne.n	8004222 <UART_SetConfig+0x37a>
 800421c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004220:	e016      	b.n	8004250 <UART_SetConfig+0x3a8>
 8004222:	2301      	movs	r3, #1
 8004224:	e014      	b.n	8004250 <UART_SetConfig+0x3a8>
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	e012      	b.n	8004250 <UART_SetConfig+0x3a8>
 800422a:	2340      	movs	r3, #64	; 0x40
 800422c:	e010      	b.n	8004250 <UART_SetConfig+0x3a8>
 800422e:	2320      	movs	r3, #32
 8004230:	e00e      	b.n	8004250 <UART_SetConfig+0x3a8>
 8004232:	2310      	movs	r3, #16
 8004234:	e00c      	b.n	8004250 <UART_SetConfig+0x3a8>
 8004236:	230c      	movs	r3, #12
 8004238:	e00a      	b.n	8004250 <UART_SetConfig+0x3a8>
 800423a:	230a      	movs	r3, #10
 800423c:	e008      	b.n	8004250 <UART_SetConfig+0x3a8>
 800423e:	2308      	movs	r3, #8
 8004240:	e006      	b.n	8004250 <UART_SetConfig+0x3a8>
 8004242:	2306      	movs	r3, #6
 8004244:	e004      	b.n	8004250 <UART_SetConfig+0x3a8>
 8004246:	2304      	movs	r3, #4
 8004248:	e002      	b.n	8004250 <UART_SetConfig+0x3a8>
 800424a:	2302      	movs	r3, #2
 800424c:	e000      	b.n	8004250 <UART_SetConfig+0x3a8>
 800424e:	2301      	movs	r3, #1
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]
        break;
 8004256:	e059      	b.n	800430c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d04e      	beq.n	80042fe <UART_SetConfig+0x456>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b01      	cmp	r3, #1
 8004266:	d047      	beq.n	80042f8 <UART_SetConfig+0x450>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2b02      	cmp	r3, #2
 800426e:	d040      	beq.n	80042f2 <UART_SetConfig+0x44a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b03      	cmp	r3, #3
 8004276:	d039      	beq.n	80042ec <UART_SetConfig+0x444>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	2b04      	cmp	r3, #4
 800427e:	d032      	beq.n	80042e6 <UART_SetConfig+0x43e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	2b05      	cmp	r3, #5
 8004286:	d02b      	beq.n	80042e0 <UART_SetConfig+0x438>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b06      	cmp	r3, #6
 800428e:	d024      	beq.n	80042da <UART_SetConfig+0x432>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2b07      	cmp	r3, #7
 8004296:	d01d      	beq.n	80042d4 <UART_SetConfig+0x42c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2b08      	cmp	r3, #8
 800429e:	d016      	beq.n	80042ce <UART_SetConfig+0x426>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b09      	cmp	r3, #9
 80042a6:	d00f      	beq.n	80042c8 <UART_SetConfig+0x420>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2b0a      	cmp	r3, #10
 80042ae:	d008      	beq.n	80042c2 <UART_SetConfig+0x41a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2b0b      	cmp	r3, #11
 80042b6:	d101      	bne.n	80042bc <UART_SetConfig+0x414>
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	e022      	b.n	8004302 <UART_SetConfig+0x45a>
 80042bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c0:	e01f      	b.n	8004302 <UART_SetConfig+0x45a>
 80042c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042c6:	e01c      	b.n	8004302 <UART_SetConfig+0x45a>
 80042c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042cc:	e019      	b.n	8004302 <UART_SetConfig+0x45a>
 80042ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d2:	e016      	b.n	8004302 <UART_SetConfig+0x45a>
 80042d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042d8:	e013      	b.n	8004302 <UART_SetConfig+0x45a>
 80042da:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80042de:	e010      	b.n	8004302 <UART_SetConfig+0x45a>
 80042e0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80042e4:	e00d      	b.n	8004302 <UART_SetConfig+0x45a>
 80042e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ea:	e00a      	b.n	8004302 <UART_SetConfig+0x45a>
 80042ec:	f241 5355 	movw	r3, #5461	; 0x1555
 80042f0:	e007      	b.n	8004302 <UART_SetConfig+0x45a>
 80042f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f6:	e004      	b.n	8004302 <UART_SetConfig+0x45a>
 80042f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042fc:	e001      	b.n	8004302 <UART_SetConfig+0x45a>
 80042fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004302:	617b      	str	r3, [r7, #20]
        break;
 8004304:	e002      	b.n	800430c <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	76fb      	strb	r3, [r7, #27]
        break;
 800430a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8604 	beq.w	8004f1c <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	429a      	cmp	r2, r3
 8004322:	d305      	bcc.n	8004330 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	d903      	bls.n	8004338 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	76fb      	strb	r3, [r7, #27]
 8004334:	f000 bdf2 	b.w	8004f1c <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8004338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800433c:	2b08      	cmp	r3, #8
 800433e:	f200 8281 	bhi.w	8004844 <UART_SetConfig+0x99c>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x4a0>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004845 	.word	0x08004845
 8004350:	080044bd 	.word	0x080044bd
 8004354:	08004845 	.word	0x08004845
 8004358:	080045b3 	.word	0x080045b3
 800435c:	08004845 	.word	0x08004845
 8004360:	08004845 	.word	0x08004845
 8004364:	08004845 	.word	0x08004845
 8004368:	080046f1 	.word	0x080046f1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7fe fd00 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8004370:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4618      	mov	r0, r3
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	d070      	beq.n	8004464 <UART_SetConfig+0x5bc>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b01      	cmp	r3, #1
 8004388:	d067      	beq.n	800445a <UART_SetConfig+0x5b2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b02      	cmp	r3, #2
 8004390:	d05e      	beq.n	8004450 <UART_SetConfig+0x5a8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b03      	cmp	r3, #3
 8004398:	d04c      	beq.n	8004434 <UART_SetConfig+0x58c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d043      	beq.n	800442a <UART_SetConfig+0x582>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d03a      	beq.n	8004420 <UART_SetConfig+0x578>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d031      	beq.n	8004416 <UART_SetConfig+0x56e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b07      	cmp	r3, #7
 80043b8:	d028      	beq.n	800440c <UART_SetConfig+0x564>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d01f      	beq.n	8004402 <UART_SetConfig+0x55a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d016      	beq.n	80043f8 <UART_SetConfig+0x550>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b0a      	cmp	r3, #10
 80043d0:	d00d      	beq.n	80043ee <UART_SetConfig+0x546>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	2b0b      	cmp	r3, #11
 80043d8:	d104      	bne.n	80043e4 <UART_SetConfig+0x53c>
 80043da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043de:	f04f 0400 	mov.w	r4, #0
 80043e2:	e043      	b.n	800446c <UART_SetConfig+0x5c4>
 80043e4:	f04f 0301 	mov.w	r3, #1
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	e03e      	b.n	800446c <UART_SetConfig+0x5c4>
 80043ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 80043f2:	f04f 0400 	mov.w	r4, #0
 80043f6:	e039      	b.n	800446c <UART_SetConfig+0x5c4>
 80043f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80043fc:	f04f 0400 	mov.w	r4, #0
 8004400:	e034      	b.n	800446c <UART_SetConfig+0x5c4>
 8004402:	f04f 0320 	mov.w	r3, #32
 8004406:	f04f 0400 	mov.w	r4, #0
 800440a:	e02f      	b.n	800446c <UART_SetConfig+0x5c4>
 800440c:	f04f 0310 	mov.w	r3, #16
 8004410:	f04f 0400 	mov.w	r4, #0
 8004414:	e02a      	b.n	800446c <UART_SetConfig+0x5c4>
 8004416:	f04f 030c 	mov.w	r3, #12
 800441a:	f04f 0400 	mov.w	r4, #0
 800441e:	e025      	b.n	800446c <UART_SetConfig+0x5c4>
 8004420:	f04f 030a 	mov.w	r3, #10
 8004424:	f04f 0400 	mov.w	r4, #0
 8004428:	e020      	b.n	800446c <UART_SetConfig+0x5c4>
 800442a:	f04f 0308 	mov.w	r3, #8
 800442e:	f04f 0400 	mov.w	r4, #0
 8004432:	e01b      	b.n	800446c <UART_SetConfig+0x5c4>
 8004434:	f04f 0306 	mov.w	r3, #6
 8004438:	f04f 0400 	mov.w	r4, #0
 800443c:	e016      	b.n	800446c <UART_SetConfig+0x5c4>
 800443e:	bf00      	nop
 8004440:	0028b0aa 	.word	0x0028b0aa
 8004444:	003d0900 	.word	0x003d0900
 8004448:	007a1200 	.word	0x007a1200
 800444c:	00f42400 	.word	0x00f42400
 8004450:	f04f 0304 	mov.w	r3, #4
 8004454:	f04f 0400 	mov.w	r4, #0
 8004458:	e008      	b.n	800446c <UART_SetConfig+0x5c4>
 800445a:	f04f 0302 	mov.w	r3, #2
 800445e:	f04f 0400 	mov.w	r4, #0
 8004462:	e003      	b.n	800446c <UART_SetConfig+0x5c4>
 8004464:	f04f 0301 	mov.w	r3, #1
 8004468:	f04f 0400 	mov.w	r4, #0
 800446c:	461a      	mov	r2, r3
 800446e:	4623      	mov	r3, r4
 8004470:	f7fb fe86 	bl	8000180 <__aeabi_uldivmod>
 8004474:	4603      	mov	r3, r0
 8004476:	460c      	mov	r4, r1
 8004478:	4619      	mov	r1, r3
 800447a:	4622      	mov	r2, r4
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	f04f 0400 	mov.w	r4, #0
 8004484:	0214      	lsls	r4, r2, #8
 8004486:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800448a:	020b      	lsls	r3, r1, #8
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6852      	ldr	r2, [r2, #4]
 8004490:	0852      	lsrs	r2, r2, #1
 8004492:	4611      	mov	r1, r2
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	eb13 0b01 	adds.w	fp, r3, r1
 800449c:	eb44 0c02 	adc.w	ip, r4, r2
 80044a0:	4658      	mov	r0, fp
 80044a2:	4661      	mov	r1, ip
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f04f 0400 	mov.w	r4, #0
 80044ac:	461a      	mov	r2, r3
 80044ae:	4623      	mov	r3, r4
 80044b0:	f7fb fe66 	bl	8000180 <__aeabi_uldivmod>
 80044b4:	4603      	mov	r3, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	61fb      	str	r3, [r7, #28]
            break;
 80044ba:	e1c6      	b.n	800484a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <UART_SetConfig+0x6d4>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d053      	beq.n	8004574 <UART_SetConfig+0x6cc>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d04b      	beq.n	800456c <UART_SetConfig+0x6c4>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d043      	beq.n	8004564 <UART_SetConfig+0x6bc>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d03b      	beq.n	800455c <UART_SetConfig+0x6b4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d033      	beq.n	8004554 <UART_SetConfig+0x6ac>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d02b      	beq.n	800454c <UART_SetConfig+0x6a4>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	2b07      	cmp	r3, #7
 80044fa:	d023      	beq.n	8004544 <UART_SetConfig+0x69c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	2b08      	cmp	r3, #8
 8004502:	d01b      	beq.n	800453c <UART_SetConfig+0x694>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b09      	cmp	r3, #9
 800450a:	d013      	beq.n	8004534 <UART_SetConfig+0x68c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	2b0a      	cmp	r3, #10
 8004512:	d00b      	beq.n	800452c <UART_SetConfig+0x684>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	2b0b      	cmp	r3, #11
 800451a:	d103      	bne.n	8004524 <UART_SetConfig+0x67c>
 800451c:	4bae      	ldr	r3, [pc, #696]	; (80047d8 <UART_SetConfig+0x930>)
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	e02e      	b.n	8004582 <UART_SetConfig+0x6da>
 8004524:	4bad      	ldr	r3, [pc, #692]	; (80047dc <UART_SetConfig+0x934>)
 8004526:	f04f 0400 	mov.w	r4, #0
 800452a:	e02a      	b.n	8004582 <UART_SetConfig+0x6da>
 800452c:	4bac      	ldr	r3, [pc, #688]	; (80047e0 <UART_SetConfig+0x938>)
 800452e:	f04f 0400 	mov.w	r4, #0
 8004532:	e026      	b.n	8004582 <UART_SetConfig+0x6da>
 8004534:	4bab      	ldr	r3, [pc, #684]	; (80047e4 <UART_SetConfig+0x93c>)
 8004536:	f04f 0400 	mov.w	r4, #0
 800453a:	e022      	b.n	8004582 <UART_SetConfig+0x6da>
 800453c:	4baa      	ldr	r3, [pc, #680]	; (80047e8 <UART_SetConfig+0x940>)
 800453e:	f04f 0400 	mov.w	r4, #0
 8004542:	e01e      	b.n	8004582 <UART_SetConfig+0x6da>
 8004544:	4ba9      	ldr	r3, [pc, #676]	; (80047ec <UART_SetConfig+0x944>)
 8004546:	f04f 0400 	mov.w	r4, #0
 800454a:	e01a      	b.n	8004582 <UART_SetConfig+0x6da>
 800454c:	a49e      	add	r4, pc, #632	; (adr r4, 80047c8 <UART_SetConfig+0x920>)
 800454e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004552:	e016      	b.n	8004582 <UART_SetConfig+0x6da>
 8004554:	4ba6      	ldr	r3, [pc, #664]	; (80047f0 <UART_SetConfig+0x948>)
 8004556:	f04f 0400 	mov.w	r4, #0
 800455a:	e012      	b.n	8004582 <UART_SetConfig+0x6da>
 800455c:	4ba5      	ldr	r3, [pc, #660]	; (80047f4 <UART_SetConfig+0x94c>)
 800455e:	f04f 0400 	mov.w	r4, #0
 8004562:	e00e      	b.n	8004582 <UART_SetConfig+0x6da>
 8004564:	a49a      	add	r4, pc, #616	; (adr r4, 80047d0 <UART_SetConfig+0x928>)
 8004566:	e9d4 3400 	ldrd	r3, r4, [r4]
 800456a:	e00a      	b.n	8004582 <UART_SetConfig+0x6da>
 800456c:	4ba2      	ldr	r3, [pc, #648]	; (80047f8 <UART_SetConfig+0x950>)
 800456e:	f04f 0400 	mov.w	r4, #0
 8004572:	e006      	b.n	8004582 <UART_SetConfig+0x6da>
 8004574:	4ba1      	ldr	r3, [pc, #644]	; (80047fc <UART_SetConfig+0x954>)
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	e002      	b.n	8004582 <UART_SetConfig+0x6da>
 800457c:	4b97      	ldr	r3, [pc, #604]	; (80047dc <UART_SetConfig+0x934>)
 800457e:	f04f 0400 	mov.w	r4, #0
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6852      	ldr	r2, [r2, #4]
 8004586:	0852      	lsrs	r2, r2, #1
 8004588:	4611      	mov	r1, r2
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	eb13 0b01 	adds.w	fp, r3, r1
 8004592:	eb44 0c02 	adc.w	ip, r4, r2
 8004596:	4658      	mov	r0, fp
 8004598:	4661      	mov	r1, ip
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	461a      	mov	r2, r3
 80045a4:	4623      	mov	r3, r4
 80045a6:	f7fb fdeb 	bl	8000180 <__aeabi_uldivmod>
 80045aa:	4603      	mov	r3, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	61fb      	str	r3, [r7, #28]
            break;
 80045b0:	e14b      	b.n	800484a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80045b2:	f7fe fb5f 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 80045b6:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d067      	beq.n	8004698 <UART_SetConfig+0x7f0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d05e      	beq.n	800468e <UART_SetConfig+0x7e6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d055      	beq.n	8004684 <UART_SetConfig+0x7dc>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d04c      	beq.n	800467a <UART_SetConfig+0x7d2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d043      	beq.n	8004670 <UART_SetConfig+0x7c8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	d03a      	beq.n	8004666 <UART_SetConfig+0x7be>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	2b06      	cmp	r3, #6
 80045f6:	d031      	beq.n	800465c <UART_SetConfig+0x7b4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	2b07      	cmp	r3, #7
 80045fe:	d028      	beq.n	8004652 <UART_SetConfig+0x7aa>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b08      	cmp	r3, #8
 8004606:	d01f      	beq.n	8004648 <UART_SetConfig+0x7a0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	2b09      	cmp	r3, #9
 800460e:	d016      	beq.n	800463e <UART_SetConfig+0x796>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b0a      	cmp	r3, #10
 8004616:	d00d      	beq.n	8004634 <UART_SetConfig+0x78c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	2b0b      	cmp	r3, #11
 800461e:	d104      	bne.n	800462a <UART_SetConfig+0x782>
 8004620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	e03a      	b.n	80046a0 <UART_SetConfig+0x7f8>
 800462a:	f04f 0301 	mov.w	r3, #1
 800462e:	f04f 0400 	mov.w	r4, #0
 8004632:	e035      	b.n	80046a0 <UART_SetConfig+0x7f8>
 8004634:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004638:	f04f 0400 	mov.w	r4, #0
 800463c:	e030      	b.n	80046a0 <UART_SetConfig+0x7f8>
 800463e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004642:	f04f 0400 	mov.w	r4, #0
 8004646:	e02b      	b.n	80046a0 <UART_SetConfig+0x7f8>
 8004648:	f04f 0320 	mov.w	r3, #32
 800464c:	f04f 0400 	mov.w	r4, #0
 8004650:	e026      	b.n	80046a0 <UART_SetConfig+0x7f8>
 8004652:	f04f 0310 	mov.w	r3, #16
 8004656:	f04f 0400 	mov.w	r4, #0
 800465a:	e021      	b.n	80046a0 <UART_SetConfig+0x7f8>
 800465c:	f04f 030c 	mov.w	r3, #12
 8004660:	f04f 0400 	mov.w	r4, #0
 8004664:	e01c      	b.n	80046a0 <UART_SetConfig+0x7f8>
 8004666:	f04f 030a 	mov.w	r3, #10
 800466a:	f04f 0400 	mov.w	r4, #0
 800466e:	e017      	b.n	80046a0 <UART_SetConfig+0x7f8>
 8004670:	f04f 0308 	mov.w	r3, #8
 8004674:	f04f 0400 	mov.w	r4, #0
 8004678:	e012      	b.n	80046a0 <UART_SetConfig+0x7f8>
 800467a:	f04f 0306 	mov.w	r3, #6
 800467e:	f04f 0400 	mov.w	r4, #0
 8004682:	e00d      	b.n	80046a0 <UART_SetConfig+0x7f8>
 8004684:	f04f 0304 	mov.w	r3, #4
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	e008      	b.n	80046a0 <UART_SetConfig+0x7f8>
 800468e:	f04f 0302 	mov.w	r3, #2
 8004692:	f04f 0400 	mov.w	r4, #0
 8004696:	e003      	b.n	80046a0 <UART_SetConfig+0x7f8>
 8004698:	f04f 0301 	mov.w	r3, #1
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	461a      	mov	r2, r3
 80046a2:	4623      	mov	r3, r4
 80046a4:	f7fb fd6c 	bl	8000180 <__aeabi_uldivmod>
 80046a8:	4603      	mov	r3, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	4619      	mov	r1, r3
 80046ae:	4622      	mov	r2, r4
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	f04f 0400 	mov.w	r4, #0
 80046b8:	0214      	lsls	r4, r2, #8
 80046ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046be:	020b      	lsls	r3, r1, #8
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6852      	ldr	r2, [r2, #4]
 80046c4:	0852      	lsrs	r2, r2, #1
 80046c6:	4611      	mov	r1, r2
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	eb13 0b01 	adds.w	fp, r3, r1
 80046d0:	eb44 0c02 	adc.w	ip, r4, r2
 80046d4:	4658      	mov	r0, fp
 80046d6:	4661      	mov	r1, ip
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f04f 0400 	mov.w	r4, #0
 80046e0:	461a      	mov	r2, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	f7fb fd4c 	bl	8000180 <__aeabi_uldivmod>
 80046e8:	4603      	mov	r3, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	61fb      	str	r3, [r7, #28]
            break;
 80046ee:	e0ac      	b.n	800484a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8089 	beq.w	800480c <UART_SetConfig+0x964>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d05b      	beq.n	80047ba <UART_SetConfig+0x912>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b02      	cmp	r3, #2
 8004708:	d052      	beq.n	80047b0 <UART_SetConfig+0x908>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b03      	cmp	r3, #3
 8004710:	d04a      	beq.n	80047a8 <UART_SetConfig+0x900>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b04      	cmp	r3, #4
 8004718:	d041      	beq.n	800479e <UART_SetConfig+0x8f6>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b05      	cmp	r3, #5
 8004720:	d039      	beq.n	8004796 <UART_SetConfig+0x8ee>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b06      	cmp	r3, #6
 8004728:	d031      	beq.n	800478e <UART_SetConfig+0x8e6>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b07      	cmp	r3, #7
 8004730:	d028      	beq.n	8004784 <UART_SetConfig+0x8dc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b08      	cmp	r3, #8
 8004738:	d01f      	beq.n	800477a <UART_SetConfig+0x8d2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b09      	cmp	r3, #9
 8004740:	d016      	beq.n	8004770 <UART_SetConfig+0x8c8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b0a      	cmp	r3, #10
 8004748:	d00d      	beq.n	8004766 <UART_SetConfig+0x8be>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2b0b      	cmp	r3, #11
 8004750:	d104      	bne.n	800475c <UART_SetConfig+0x8b4>
 8004752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004756:	f04f 0400 	mov.w	r4, #0
 800475a:	e05b      	b.n	8004814 <UART_SetConfig+0x96c>
 800475c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004760:	f04f 0400 	mov.w	r4, #0
 8004764:	e056      	b.n	8004814 <UART_SetConfig+0x96c>
 8004766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800476a:	f04f 0400 	mov.w	r4, #0
 800476e:	e051      	b.n	8004814 <UART_SetConfig+0x96c>
 8004770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004774:	f04f 0400 	mov.w	r4, #0
 8004778:	e04c      	b.n	8004814 <UART_SetConfig+0x96c>
 800477a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800477e:	f04f 0400 	mov.w	r4, #0
 8004782:	e047      	b.n	8004814 <UART_SetConfig+0x96c>
 8004784:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004788:	f04f 0400 	mov.w	r4, #0
 800478c:	e042      	b.n	8004814 <UART_SetConfig+0x96c>
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <UART_SetConfig+0x958>)
 8004790:	f04f 0400 	mov.w	r4, #0
 8004794:	e03e      	b.n	8004814 <UART_SetConfig+0x96c>
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <UART_SetConfig+0x95c>)
 8004798:	f04f 0400 	mov.w	r4, #0
 800479c:	e03a      	b.n	8004814 <UART_SetConfig+0x96c>
 800479e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047a2:	f04f 0400 	mov.w	r4, #0
 80047a6:	e035      	b.n	8004814 <UART_SetConfig+0x96c>
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <UART_SetConfig+0x960>)
 80047aa:	f04f 0400 	mov.w	r4, #0
 80047ae:	e031      	b.n	8004814 <UART_SetConfig+0x96c>
 80047b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047b4:	f04f 0400 	mov.w	r4, #0
 80047b8:	e02c      	b.n	8004814 <UART_SetConfig+0x96c>
 80047ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047be:	f04f 0400 	mov.w	r4, #0
 80047c2:	e027      	b.n	8004814 <UART_SetConfig+0x96c>
 80047c4:	f3af 8000 	nop.w
 80047c8:	14585500 	.word	0x14585500
 80047cc:	00000000 	.word	0x00000000
 80047d0:	28b0aa00 	.word	0x28b0aa00
 80047d4:	00000000 	.word	0x00000000
 80047d8:	00f42400 	.word	0x00f42400
 80047dc:	f4240000 	.word	0xf4240000
 80047e0:	01e84800 	.word	0x01e84800
 80047e4:	03d09000 	.word	0x03d09000
 80047e8:	07a12000 	.word	0x07a12000
 80047ec:	0f424000 	.word	0x0f424000
 80047f0:	186a0000 	.word	0x186a0000
 80047f4:	1e848000 	.word	0x1e848000
 80047f8:	3d090000 	.word	0x3d090000
 80047fc:	7a120000 	.word	0x7a120000
 8004800:	000aaa00 	.word	0x000aaa00
 8004804:	000ccc00 	.word	0x000ccc00
 8004808:	00155500 	.word	0x00155500
 800480c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004810:	f04f 0400 	mov.w	r4, #0
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6852      	ldr	r2, [r2, #4]
 8004818:	0852      	lsrs	r2, r2, #1
 800481a:	4611      	mov	r1, r2
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	eb13 0b01 	adds.w	fp, r3, r1
 8004824:	eb44 0c02 	adc.w	ip, r4, r2
 8004828:	4658      	mov	r0, fp
 800482a:	4661      	mov	r1, ip
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f04f 0400 	mov.w	r4, #0
 8004834:	461a      	mov	r2, r3
 8004836:	4623      	mov	r3, r4
 8004838:	f7fb fca2 	bl	8000180 <__aeabi_uldivmod>
 800483c:	4603      	mov	r3, r0
 800483e:	460c      	mov	r4, r1
 8004840:	61fb      	str	r3, [r7, #28]
            break;
 8004842:	e002      	b.n	800484a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	76fb      	strb	r3, [r7, #27]
            break;
 8004848:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004850:	d308      	bcc.n	8004864 <UART_SetConfig+0x9bc>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004858:	d204      	bcs.n	8004864 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	e35b      	b.n	8004f1c <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	76fb      	strb	r3, [r7, #27]
 8004868:	e358      	b.n	8004f1c <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004872:	f040 81a6 	bne.w	8004bc2 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800487a:	3b01      	subs	r3, #1
 800487c:	2b07      	cmp	r3, #7
 800487e:	f200 8180 	bhi.w	8004b82 <UART_SetConfig+0xcda>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x9e0>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048a9 	.word	0x080048a9
 800488c:	08004961 	.word	0x08004961
 8004890:	08004b83 	.word	0x08004b83
 8004894:	08004a09 	.word	0x08004a09
 8004898:	08004b83 	.word	0x08004b83
 800489c:	08004b83 	.word	0x08004b83
 80048a0:	08004b83 	.word	0x08004b83
 80048a4:	08004ac1 	.word	0x08004ac1
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a8:	f7fe fa78 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 80048ac:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d044      	beq.n	8004940 <UART_SetConfig+0xa98>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d03e      	beq.n	800493c <UART_SetConfig+0xa94>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d038      	beq.n	8004938 <UART_SetConfig+0xa90>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d032      	beq.n	8004934 <UART_SetConfig+0xa8c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d02c      	beq.n	8004930 <UART_SetConfig+0xa88>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d026      	beq.n	800492c <UART_SetConfig+0xa84>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d020      	beq.n	8004928 <UART_SetConfig+0xa80>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b07      	cmp	r3, #7
 80048ec:	d01a      	beq.n	8004924 <UART_SetConfig+0xa7c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d014      	beq.n	8004920 <UART_SetConfig+0xa78>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	d00e      	beq.n	800491c <UART_SetConfig+0xa74>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2b0a      	cmp	r3, #10
 8004904:	d008      	beq.n	8004918 <UART_SetConfig+0xa70>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b0b      	cmp	r3, #11
 800490c:	d102      	bne.n	8004914 <UART_SetConfig+0xa6c>
 800490e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004912:	e016      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004914:	2301      	movs	r3, #1
 8004916:	e014      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	e012      	b.n	8004942 <UART_SetConfig+0xa9a>
 800491c:	2340      	movs	r3, #64	; 0x40
 800491e:	e010      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004920:	2320      	movs	r3, #32
 8004922:	e00e      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004924:	2310      	movs	r3, #16
 8004926:	e00c      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004928:	230c      	movs	r3, #12
 800492a:	e00a      	b.n	8004942 <UART_SetConfig+0xa9a>
 800492c:	230a      	movs	r3, #10
 800492e:	e008      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004930:	2308      	movs	r3, #8
 8004932:	e006      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004934:	2306      	movs	r3, #6
 8004936:	e004      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004938:	2304      	movs	r3, #4
 800493a:	e002      	b.n	8004942 <UART_SetConfig+0xa9a>
 800493c:	2302      	movs	r3, #2
 800493e:	e000      	b.n	8004942 <UART_SetConfig+0xa9a>
 8004940:	2301      	movs	r3, #1
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	005a      	lsls	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	61fb      	str	r3, [r7, #28]
        break;
 800495e:	e113      	b.n	8004b88 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b00      	cmp	r3, #0
 8004966:	d043      	beq.n	80049f0 <UART_SetConfig+0xb48>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2b01      	cmp	r3, #1
 800496e:	d03d      	beq.n	80049ec <UART_SetConfig+0xb44>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2b02      	cmp	r3, #2
 8004976:	d037      	beq.n	80049e8 <UART_SetConfig+0xb40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2b03      	cmp	r3, #3
 800497e:	d031      	beq.n	80049e4 <UART_SetConfig+0xb3c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b04      	cmp	r3, #4
 8004986:	d02b      	beq.n	80049e0 <UART_SetConfig+0xb38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b05      	cmp	r3, #5
 800498e:	d025      	beq.n	80049dc <UART_SetConfig+0xb34>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2b06      	cmp	r3, #6
 8004996:	d01f      	beq.n	80049d8 <UART_SetConfig+0xb30>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2b07      	cmp	r3, #7
 800499e:	d019      	beq.n	80049d4 <UART_SetConfig+0xb2c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d013      	beq.n	80049d0 <UART_SetConfig+0xb28>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2b09      	cmp	r3, #9
 80049ae:	d00d      	beq.n	80049cc <UART_SetConfig+0xb24>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	2b0a      	cmp	r3, #10
 80049b6:	d007      	beq.n	80049c8 <UART_SetConfig+0xb20>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b0b      	cmp	r3, #11
 80049be:	d101      	bne.n	80049c4 <UART_SetConfig+0xb1c>
 80049c0:	4b8c      	ldr	r3, [pc, #560]	; (8004bf4 <UART_SetConfig+0xd4c>)
 80049c2:	e016      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049c4:	4b8c      	ldr	r3, [pc, #560]	; (8004bf8 <UART_SetConfig+0xd50>)
 80049c6:	e014      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049c8:	4b8c      	ldr	r3, [pc, #560]	; (8004bfc <UART_SetConfig+0xd54>)
 80049ca:	e012      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049cc:	4b8c      	ldr	r3, [pc, #560]	; (8004c00 <UART_SetConfig+0xd58>)
 80049ce:	e010      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049d0:	4b8c      	ldr	r3, [pc, #560]	; (8004c04 <UART_SetConfig+0xd5c>)
 80049d2:	e00e      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049d4:	4b8c      	ldr	r3, [pc, #560]	; (8004c08 <UART_SetConfig+0xd60>)
 80049d6:	e00c      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049d8:	4b8c      	ldr	r3, [pc, #560]	; (8004c0c <UART_SetConfig+0xd64>)
 80049da:	e00a      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049dc:	4b8c      	ldr	r3, [pc, #560]	; (8004c10 <UART_SetConfig+0xd68>)
 80049de:	e008      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049e0:	4b8c      	ldr	r3, [pc, #560]	; (8004c14 <UART_SetConfig+0xd6c>)
 80049e2:	e006      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049e4:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <UART_SetConfig+0xd70>)
 80049e6:	e004      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049e8:	4b8c      	ldr	r3, [pc, #560]	; (8004c1c <UART_SetConfig+0xd74>)
 80049ea:	e002      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049ec:	4b8c      	ldr	r3, [pc, #560]	; (8004c20 <UART_SetConfig+0xd78>)
 80049ee:	e000      	b.n	80049f2 <UART_SetConfig+0xb4a>
 80049f0:	4b81      	ldr	r3, [pc, #516]	; (8004bf8 <UART_SetConfig+0xd50>)
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6852      	ldr	r2, [r2, #4]
 80049f6:	0852      	lsrs	r2, r2, #1
 80049f8:	441a      	add	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	61fb      	str	r3, [r7, #28]
        break;
 8004a06:	e0bf      	b.n	8004b88 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a08:	f7fe f934 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8004a0c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d044      	beq.n	8004aa0 <UART_SetConfig+0xbf8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d03e      	beq.n	8004a9c <UART_SetConfig+0xbf4>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d038      	beq.n	8004a98 <UART_SetConfig+0xbf0>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d032      	beq.n	8004a94 <UART_SetConfig+0xbec>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d02c      	beq.n	8004a90 <UART_SetConfig+0xbe8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d026      	beq.n	8004a8c <UART_SetConfig+0xbe4>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d020      	beq.n	8004a88 <UART_SetConfig+0xbe0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b07      	cmp	r3, #7
 8004a4c:	d01a      	beq.n	8004a84 <UART_SetConfig+0xbdc>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d014      	beq.n	8004a80 <UART_SetConfig+0xbd8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	2b09      	cmp	r3, #9
 8004a5c:	d00e      	beq.n	8004a7c <UART_SetConfig+0xbd4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2b0a      	cmp	r3, #10
 8004a64:	d008      	beq.n	8004a78 <UART_SetConfig+0xbd0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b0b      	cmp	r3, #11
 8004a6c:	d102      	bne.n	8004a74 <UART_SetConfig+0xbcc>
 8004a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a72:	e016      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e014      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	e012      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a7c:	2340      	movs	r3, #64	; 0x40
 8004a7e:	e010      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a80:	2320      	movs	r3, #32
 8004a82:	e00e      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a84:	2310      	movs	r3, #16
 8004a86:	e00c      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a88:	230c      	movs	r3, #12
 8004a8a:	e00a      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a8c:	230a      	movs	r3, #10
 8004a8e:	e008      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a90:	2308      	movs	r3, #8
 8004a92:	e006      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a94:	2306      	movs	r3, #6
 8004a96:	e004      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	e002      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e000      	b.n	8004aa2 <UART_SetConfig+0xbfa>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	005a      	lsls	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	441a      	add	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	61fb      	str	r3, [r7, #28]
        break;
 8004abe:	e063      	b.n	8004b88 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d04f      	beq.n	8004b68 <UART_SetConfig+0xcc0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d048      	beq.n	8004b62 <UART_SetConfig+0xcba>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d041      	beq.n	8004b5c <UART_SetConfig+0xcb4>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d03a      	beq.n	8004b56 <UART_SetConfig+0xcae>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d033      	beq.n	8004b50 <UART_SetConfig+0xca8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d02c      	beq.n	8004b4a <UART_SetConfig+0xca2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d025      	beq.n	8004b44 <UART_SetConfig+0xc9c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2b07      	cmp	r3, #7
 8004afe:	d01e      	beq.n	8004b3e <UART_SetConfig+0xc96>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d017      	beq.n	8004b38 <UART_SetConfig+0xc90>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	d010      	beq.n	8004b32 <UART_SetConfig+0xc8a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b0a      	cmp	r3, #10
 8004b16:	d009      	beq.n	8004b2c <UART_SetConfig+0xc84>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b0b      	cmp	r3, #11
 8004b1e:	d102      	bne.n	8004b26 <UART_SetConfig+0xc7e>
 8004b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b24:	e022      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b2a:	e01f      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b30:	e01c      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b36:	e019      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b3c:	e016      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b42:	e013      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b44:	f241 5354 	movw	r3, #5460	; 0x1554
 8004b48:	e010      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b4a:	f641 1398 	movw	r3, #6552	; 0x1998
 8004b4e:	e00d      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b54:	e00a      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b56:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004b5a:	e007      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b60:	e004      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b66:	e001      	b.n	8004b6c <UART_SetConfig+0xcc4>
 8004b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6852      	ldr	r2, [r2, #4]
 8004b70:	0852      	lsrs	r2, r2, #1
 8004b72:	441a      	add	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	61fb      	str	r3, [r7, #28]
        break;
 8004b80:	e002      	b.n	8004b88 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	76fb      	strb	r3, [r7, #27]
        break;
 8004b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b0f      	cmp	r3, #15
 8004b8c:	d916      	bls.n	8004bbc <UART_SetConfig+0xd14>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d212      	bcs.n	8004bbc <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f023 030f 	bic.w	r3, r3, #15
 8004b9e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	89fa      	ldrh	r2, [r7, #14]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	e1af      	b.n	8004f1c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	76fb      	strb	r3, [r7, #27]
 8004bc0:	e1ac      	b.n	8004f1c <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8004bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	2b07      	cmp	r3, #7
 8004bca:	f200 8196 	bhi.w	8004efa <UART_SetConfig+0x1052>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0xd2c>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004cdb 	.word	0x08004cdb
 8004bdc:	08004efb 	.word	0x08004efb
 8004be0:	08004d85 	.word	0x08004d85
 8004be4:	08004efb 	.word	0x08004efb
 8004be8:	08004efb 	.word	0x08004efb
 8004bec:	08004efb 	.word	0x08004efb
 8004bf0:	08004e3b 	.word	0x08004e3b
 8004bf4:	0001e848 	.word	0x0001e848
 8004bf8:	01e84800 	.word	0x01e84800
 8004bfc:	0003d090 	.word	0x0003d090
 8004c00:	0007a120 	.word	0x0007a120
 8004c04:	000f4240 	.word	0x000f4240
 8004c08:	001e8480 	.word	0x001e8480
 8004c0c:	0028b0aa 	.word	0x0028b0aa
 8004c10:	0030d400 	.word	0x0030d400
 8004c14:	003d0900 	.word	0x003d0900
 8004c18:	00516154 	.word	0x00516154
 8004c1c:	007a1200 	.word	0x007a1200
 8004c20:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c24:	f7fe f8ba 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8004c28:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d044      	beq.n	8004cbc <UART_SetConfig+0xe14>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d03e      	beq.n	8004cb8 <UART_SetConfig+0xe10>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d038      	beq.n	8004cb4 <UART_SetConfig+0xe0c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d032      	beq.n	8004cb0 <UART_SetConfig+0xe08>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d02c      	beq.n	8004cac <UART_SetConfig+0xe04>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d026      	beq.n	8004ca8 <UART_SetConfig+0xe00>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d020      	beq.n	8004ca4 <UART_SetConfig+0xdfc>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b07      	cmp	r3, #7
 8004c68:	d01a      	beq.n	8004ca0 <UART_SetConfig+0xdf8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d014      	beq.n	8004c9c <UART_SetConfig+0xdf4>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	d00e      	beq.n	8004c98 <UART_SetConfig+0xdf0>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b0a      	cmp	r3, #10
 8004c80:	d008      	beq.n	8004c94 <UART_SetConfig+0xdec>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b0b      	cmp	r3, #11
 8004c88:	d102      	bne.n	8004c90 <UART_SetConfig+0xde8>
 8004c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c8e:	e016      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e014      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	e012      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004c98:	2340      	movs	r3, #64	; 0x40
 8004c9a:	e010      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	e00e      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	e00c      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	e00a      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004ca8:	230a      	movs	r3, #10
 8004caa:	e008      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004cac:	2308      	movs	r3, #8
 8004cae:	e006      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004cb0:	2306      	movs	r3, #6
 8004cb2:	e004      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	e002      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e000      	b.n	8004cbe <UART_SetConfig+0xe16>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	441a      	add	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	61fb      	str	r3, [r7, #28]
        break;
 8004cd8:	e112      	b.n	8004f00 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d044      	beq.n	8004d6c <UART_SetConfig+0xec4>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d03e      	beq.n	8004d68 <UART_SetConfig+0xec0>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d038      	beq.n	8004d64 <UART_SetConfig+0xebc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d032      	beq.n	8004d60 <UART_SetConfig+0xeb8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d02c      	beq.n	8004d5c <UART_SetConfig+0xeb4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d026      	beq.n	8004d58 <UART_SetConfig+0xeb0>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b06      	cmp	r3, #6
 8004d10:	d020      	beq.n	8004d54 <UART_SetConfig+0xeac>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b07      	cmp	r3, #7
 8004d18:	d01a      	beq.n	8004d50 <UART_SetConfig+0xea8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d014      	beq.n	8004d4c <UART_SetConfig+0xea4>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b09      	cmp	r3, #9
 8004d28:	d00e      	beq.n	8004d48 <UART_SetConfig+0xea0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	d008      	beq.n	8004d44 <UART_SetConfig+0xe9c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b0b      	cmp	r3, #11
 8004d38:	d102      	bne.n	8004d40 <UART_SetConfig+0xe98>
 8004d3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004d3e:	e016      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d40:	4b80      	ldr	r3, [pc, #512]	; (8004f44 <UART_SetConfig+0x109c>)
 8004d42:	e014      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d44:	4b80      	ldr	r3, [pc, #512]	; (8004f48 <UART_SetConfig+0x10a0>)
 8004d46:	e012      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d48:	4b80      	ldr	r3, [pc, #512]	; (8004f4c <UART_SetConfig+0x10a4>)
 8004d4a:	e010      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d4c:	4b80      	ldr	r3, [pc, #512]	; (8004f50 <UART_SetConfig+0x10a8>)
 8004d4e:	e00e      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d50:	4b80      	ldr	r3, [pc, #512]	; (8004f54 <UART_SetConfig+0x10ac>)
 8004d52:	e00c      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d54:	4b80      	ldr	r3, [pc, #512]	; (8004f58 <UART_SetConfig+0x10b0>)
 8004d56:	e00a      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d58:	4b80      	ldr	r3, [pc, #512]	; (8004f5c <UART_SetConfig+0x10b4>)
 8004d5a:	e008      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d5c:	4b80      	ldr	r3, [pc, #512]	; (8004f60 <UART_SetConfig+0x10b8>)
 8004d5e:	e006      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d60:	4b80      	ldr	r3, [pc, #512]	; (8004f64 <UART_SetConfig+0x10bc>)
 8004d62:	e004      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d64:	4b80      	ldr	r3, [pc, #512]	; (8004f68 <UART_SetConfig+0x10c0>)
 8004d66:	e002      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d68:	4b80      	ldr	r3, [pc, #512]	; (8004f6c <UART_SetConfig+0x10c4>)
 8004d6a:	e000      	b.n	8004d6e <UART_SetConfig+0xec6>
 8004d6c:	4b75      	ldr	r3, [pc, #468]	; (8004f44 <UART_SetConfig+0x109c>)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6852      	ldr	r2, [r2, #4]
 8004d72:	0852      	lsrs	r2, r2, #1
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	61fb      	str	r3, [r7, #28]
        break;
 8004d82:	e0bd      	b.n	8004f00 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d84:	f7fd ff76 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8004d88:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d044      	beq.n	8004e1c <UART_SetConfig+0xf74>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d03e      	beq.n	8004e18 <UART_SetConfig+0xf70>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d038      	beq.n	8004e14 <UART_SetConfig+0xf6c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d032      	beq.n	8004e10 <UART_SetConfig+0xf68>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d02c      	beq.n	8004e0c <UART_SetConfig+0xf64>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d026      	beq.n	8004e08 <UART_SetConfig+0xf60>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d020      	beq.n	8004e04 <UART_SetConfig+0xf5c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b07      	cmp	r3, #7
 8004dc8:	d01a      	beq.n	8004e00 <UART_SetConfig+0xf58>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d014      	beq.n	8004dfc <UART_SetConfig+0xf54>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b09      	cmp	r3, #9
 8004dd8:	d00e      	beq.n	8004df8 <UART_SetConfig+0xf50>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b0a      	cmp	r3, #10
 8004de0:	d008      	beq.n	8004df4 <UART_SetConfig+0xf4c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b0b      	cmp	r3, #11
 8004de8:	d102      	bne.n	8004df0 <UART_SetConfig+0xf48>
 8004dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dee:	e016      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e014      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	e012      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004df8:	2340      	movs	r3, #64	; 0x40
 8004dfa:	e010      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	e00e      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004e00:	2310      	movs	r3, #16
 8004e02:	e00c      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004e04:	230c      	movs	r3, #12
 8004e06:	e00a      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004e08:	230a      	movs	r3, #10
 8004e0a:	e008      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	e006      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004e10:	2306      	movs	r3, #6
 8004e12:	e004      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004e14:	2304      	movs	r3, #4
 8004e16:	e002      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e000      	b.n	8004e1e <UART_SetConfig+0xf76>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	441a      	add	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	61fb      	str	r3, [r7, #28]
        break;
 8004e38:	e062      	b.n	8004f00 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d04e      	beq.n	8004ee0 <UART_SetConfig+0x1038>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d047      	beq.n	8004eda <UART_SetConfig+0x1032>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d040      	beq.n	8004ed4 <UART_SetConfig+0x102c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d039      	beq.n	8004ece <UART_SetConfig+0x1026>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d032      	beq.n	8004ec8 <UART_SetConfig+0x1020>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d02b      	beq.n	8004ec2 <UART_SetConfig+0x101a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d024      	beq.n	8004ebc <UART_SetConfig+0x1014>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2b07      	cmp	r3, #7
 8004e78:	d01d      	beq.n	8004eb6 <UART_SetConfig+0x100e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d016      	beq.n	8004eb0 <UART_SetConfig+0x1008>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d00f      	beq.n	8004eaa <UART_SetConfig+0x1002>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b0a      	cmp	r3, #10
 8004e90:	d008      	beq.n	8004ea4 <UART_SetConfig+0xffc>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2b0b      	cmp	r3, #11
 8004e98:	d101      	bne.n	8004e9e <UART_SetConfig+0xff6>
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	e022      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ea2:	e01f      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ea8:	e01c      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eae:	e019      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb4:	e016      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004eba:	e013      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004ebc:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004ec0:	e010      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004ec2:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004ec6:	e00d      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ecc:	e00a      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004ece:	f241 5355 	movw	r3, #5461	; 0x1555
 8004ed2:	e007      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ed8:	e004      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ede:	e001      	b.n	8004ee4 <UART_SetConfig+0x103c>
 8004ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6852      	ldr	r2, [r2, #4]
 8004ee8:	0852      	lsrs	r2, r2, #1
 8004eea:	441a      	add	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	61fb      	str	r3, [r7, #28]
        break;
 8004ef8:	e002      	b.n	8004f00 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	76fb      	strb	r3, [r7, #27]
        break;
 8004efe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d908      	bls.n	8004f18 <UART_SetConfig+0x1070>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d204      	bcs.n	8004f18 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	e001      	b.n	8004f1c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004f38:	7efb      	ldrb	r3, [r7, #27]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3728      	adds	r7, #40	; 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	0001e848 	.word	0x0001e848
 8004f4c:	0003d090 	.word	0x0003d090
 8004f50:	0007a120 	.word	0x0007a120
 8004f54:	000f4240 	.word	0x000f4240
 8004f58:	00145855 	.word	0x00145855
 8004f5c:	00186a00 	.word	0x00186a00
 8004f60:	001e8480 	.word	0x001e8480
 8004f64:	0028b0aa 	.word	0x0028b0aa
 8004f68:	003d0900 	.word	0x003d0900
 8004f6c:	007a1200 	.word	0x007a1200

08004f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01a      	beq.n	8005086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506e:	d10a      	bne.n	8005086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80050c4:	f7fc f916 	bl	80012f4 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d10e      	bne.n	80050f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f82c 	bl	8005144 <UART_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e022      	b.n	800513c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b04      	cmp	r3, #4
 8005102:	d10e      	bne.n	8005122 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f816 	bl	8005144 <UART_WaitOnFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e00c      	b.n	800513c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005154:	e062      	b.n	800521c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d05e      	beq.n	800521c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515e:	f7fc f8c9 	bl	80012f4 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <UART_WaitOnFlagUntilTimeout+0x30>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11d      	bne.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005182:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e045      	b.n	800523c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d02e      	beq.n	800521c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051cc:	d126      	bne.n	800521c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e00f      	b.n	800523c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4013      	ands	r3, r2
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	429a      	cmp	r2, r3
 8005238:	d08d      	beq.n	8005156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_UARTEx_DisableFifoMode+0x16>
 8005256:	2302      	movs	r3, #2
 8005258:	e027      	b.n	80052aa <HAL_UARTEx_DisableFifoMode+0x66>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2224      	movs	r2, #36	; 0x24
 8005266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005288:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e02d      	b.n	800532a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2224      	movs	r2, #36	; 0x24
 80052da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f850 	bl	80053b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005346:	2302      	movs	r3, #2
 8005348:	e02d      	b.n	80053a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2224      	movs	r2, #36	; 0x24
 8005356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f812 	bl	80053b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80053b8:	4a2f      	ldr	r2, [pc, #188]	; (8005478 <UARTEx_SetNbDataToProcess+0xc8>)
 80053ba:	f107 0314 	add.w	r3, r7, #20
 80053be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80053c6:	4a2d      	ldr	r2, [pc, #180]	; (800547c <UARTEx_SetNbDataToProcess+0xcc>)
 80053c8:	f107 030c 	add.w	r3, r7, #12
 80053cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053d0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d108      	bne.n	80053ee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053ec:	e03d      	b.n	800546a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053ee:	2308      	movs	r3, #8
 80053f0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053f2:	2308      	movs	r3, #8
 80053f4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	0e5b      	lsrs	r3, r3, #25
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	0f5b      	lsrs	r3, r3, #29
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005416:	7fbb      	ldrb	r3, [r7, #30]
 8005418:	7f3a      	ldrb	r2, [r7, #28]
 800541a:	f107 0120 	add.w	r1, r7, #32
 800541e:	440a      	add	r2, r1
 8005420:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005424:	fb02 f303 	mul.w	r3, r2, r3
 8005428:	7f3a      	ldrb	r2, [r7, #28]
 800542a:	f107 0120 	add.w	r1, r7, #32
 800542e:	440a      	add	r2, r1
 8005430:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005434:	fb93 f3f2 	sdiv	r3, r3, r2
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005440:	7ffb      	ldrb	r3, [r7, #31]
 8005442:	7f7a      	ldrb	r2, [r7, #29]
 8005444:	f107 0120 	add.w	r1, r7, #32
 8005448:	440a      	add	r2, r1
 800544a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	7f7a      	ldrb	r2, [r7, #29]
 8005454:	f107 0120 	add.w	r1, r7, #32
 8005458:	440a      	add	r2, r1
 800545a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800545e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005462:	b29a      	uxth	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800546a:	bf00      	nop
 800546c:	3724      	adds	r7, #36	; 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	080055d0 	.word	0x080055d0
 800547c:	080055d8 	.word	0x080055d8

08005480 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005488:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800548c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005494:	b29a      	uxth	r2, r3
 8005496:	89fb      	ldrh	r3, [r7, #14]
 8005498:	4313      	orrs	r3, r2
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80054bc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	b21a      	sxth	r2, r3
 80054c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054cc:	43db      	mvns	r3, r3
 80054ce:	b21b      	sxth	r3, r3
 80054d0:	4013      	ands	r3, r2
 80054d2:	b21b      	sxth	r3, r3
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054ea:	b084      	sub	sp, #16
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	f107 0014 	add.w	r0, r7, #20
 80054f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ffaf 	bl	8005480 <USB_EnableGlobalInt>

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800552e:	b004      	add	sp, #16
 8005530:	4770      	bx	lr
	...

08005534 <__libc_init_array>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4e0d      	ldr	r6, [pc, #52]	; (800556c <__libc_init_array+0x38>)
 8005538:	4c0d      	ldr	r4, [pc, #52]	; (8005570 <__libc_init_array+0x3c>)
 800553a:	1ba4      	subs	r4, r4, r6
 800553c:	10a4      	asrs	r4, r4, #2
 800553e:	2500      	movs	r5, #0
 8005540:	42a5      	cmp	r5, r4
 8005542:	d109      	bne.n	8005558 <__libc_init_array+0x24>
 8005544:	4e0b      	ldr	r6, [pc, #44]	; (8005574 <__libc_init_array+0x40>)
 8005546:	4c0c      	ldr	r4, [pc, #48]	; (8005578 <__libc_init_array+0x44>)
 8005548:	f000 f820 	bl	800558c <_init>
 800554c:	1ba4      	subs	r4, r4, r6
 800554e:	10a4      	asrs	r4, r4, #2
 8005550:	2500      	movs	r5, #0
 8005552:	42a5      	cmp	r5, r4
 8005554:	d105      	bne.n	8005562 <__libc_init_array+0x2e>
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800555c:	4798      	blx	r3
 800555e:	3501      	adds	r5, #1
 8005560:	e7ee      	b.n	8005540 <__libc_init_array+0xc>
 8005562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005566:	4798      	blx	r3
 8005568:	3501      	adds	r5, #1
 800556a:	e7f2      	b.n	8005552 <__libc_init_array+0x1e>
 800556c:	08059cd0 	.word	0x08059cd0
 8005570:	08059cd0 	.word	0x08059cd0
 8005574:	08059cd0 	.word	0x08059cd0
 8005578:	08059cd4 	.word	0x08059cd4

0800557c <memset>:
 800557c:	4402      	add	r2, r0
 800557e:	4603      	mov	r3, r0
 8005580:	4293      	cmp	r3, r2
 8005582:	d100      	bne.n	8005586 <memset+0xa>
 8005584:	4770      	bx	lr
 8005586:	f803 1b01 	strb.w	r1, [r3], #1
 800558a:	e7f9      	b.n	8005580 <memset+0x4>

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
