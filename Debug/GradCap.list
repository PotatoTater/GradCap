
GradCap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053bc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cdc  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  080091e8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000448  20000010  080091f4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000458  080091f4  00020458  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001263a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026f9  00000000  00000000  0003267a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016b8  00000000  00000000  00034d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001590  00000000  00000000  00036430  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002170d  00000000  00000000  000379c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e695  00000000  00000000  000590cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d5fc2  00000000  00000000  00067762  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0013d724  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005fd0  00000000  00000000  0013d7a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	080054e4 	.word	0x080054e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	080054e4 	.word	0x080054e4

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b972 	b.w	800047c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	4688      	mov	r8, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14b      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4615      	mov	r5, r2
 80001c2:	d967      	bls.n	8000294 <__udivmoddi4+0xe4>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0720 	rsb	r7, r2, #32
 80001ce:	fa01 f302 	lsl.w	r3, r1, r2
 80001d2:	fa20 f707 	lsr.w	r7, r0, r7
 80001d6:	4095      	lsls	r5, r2
 80001d8:	ea47 0803 	orr.w	r8, r7, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001e2:	0c23      	lsrs	r3, r4, #16
 80001e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e8:	fa1f fc85 	uxth.w	ip, r5
 80001ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80001f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f4:	fb07 f10c 	mul.w	r1, r7, ip
 80001f8:	4299      	cmp	r1, r3
 80001fa:	d909      	bls.n	8000210 <__udivmoddi4+0x60>
 80001fc:	18eb      	adds	r3, r5, r3
 80001fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000202:	f080 811b 	bcs.w	800043c <__udivmoddi4+0x28c>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 8118 	bls.w	800043c <__udivmoddi4+0x28c>
 800020c:	3f02      	subs	r7, #2
 800020e:	442b      	add	r3, r5
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0fe 	udiv	r0, r3, lr
 8000218:	fb0e 3310 	mls	r3, lr, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 fc0c 	mul.w	ip, r0, ip
 8000224:	45a4      	cmp	ip, r4
 8000226:	d909      	bls.n	800023c <__udivmoddi4+0x8c>
 8000228:	192c      	adds	r4, r5, r4
 800022a:	f100 33ff 	add.w	r3, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000232:	45a4      	cmp	ip, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x290>
 8000238:	3802      	subs	r0, #2
 800023a:	442c      	add	r4, r5
 800023c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000240:	eba4 040c 	sub.w	r4, r4, ip
 8000244:	2700      	movs	r7, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa0>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	4639      	mov	r1, r7
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xbe>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80eb 	beq.w	8000436 <__udivmoddi4+0x286>
 8000260:	2700      	movs	r7, #0
 8000262:	e9c6 0100 	strd	r0, r1, [r6]
 8000266:	4638      	mov	r0, r7
 8000268:	4639      	mov	r1, r7
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f783 	clz	r7, r3
 8000272:	2f00      	cmp	r7, #0
 8000274:	d147      	bne.n	8000306 <__udivmoddi4+0x156>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd0>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fa 	bhi.w	8000474 <__udivmoddi4+0x2c4>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa0>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa0>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xe8>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 808f 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a2:	1b49      	subs	r1, r1, r5
 80002a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a8:	fa1f f885 	uxth.w	r8, r5
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb08 f10c 	mul.w	r1, r8, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4299      	cmp	r1, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2bc>
 80002d2:	4684      	mov	ip, r0
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	b2a3      	uxth	r3, r4
 80002d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80002e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x14c>
 80002ec:	192c      	adds	r4, r5, r4
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14a>
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	f200 80b6 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002fa:	4618      	mov	r0, r3
 80002fc:	eba4 0408 	sub.w	r4, r4, r8
 8000300:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000304:	e79f      	b.n	8000246 <__udivmoddi4+0x96>
 8000306:	f1c7 0c20 	rsb	ip, r7, #32
 800030a:	40bb      	lsls	r3, r7
 800030c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000310:	ea4e 0e03 	orr.w	lr, lr, r3
 8000314:	fa01 f407 	lsl.w	r4, r1, r7
 8000318:	fa20 f50c 	lsr.w	r5, r0, ip
 800031c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000320:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000324:	4325      	orrs	r5, r4
 8000326:	fbb3 f9f8 	udiv	r9, r3, r8
 800032a:	0c2c      	lsrs	r4, r5, #16
 800032c:	fb08 3319 	mls	r3, r8, r9, r3
 8000330:	fa1f fa8e 	uxth.w	sl, lr
 8000334:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000338:	fb09 f40a 	mul.w	r4, r9, sl
 800033c:	429c      	cmp	r4, r3
 800033e:	fa02 f207 	lsl.w	r2, r2, r7
 8000342:	fa00 f107 	lsl.w	r1, r0, r7
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1e 0303 	adds.w	r3, lr, r3
 800034c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	429c      	cmp	r4, r3
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a9 0902 	sub.w	r9, r9, #2
 800035e:	4473      	add	r3, lr
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	b2ad      	uxth	r5, r5
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000370:	fb00 fa0a 	mul.w	sl, r0, sl
 8000374:	45a2      	cmp	sl, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1e 0404 	adds.w	r4, lr, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a2      	cmp	sl, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3802      	subs	r0, #2
 8000388:	4474      	add	r4, lr
 800038a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038e:	fba0 8902 	umull	r8, r9, r0, r2
 8000392:	eba4 040a 	sub.w	r4, r4, sl
 8000396:	454c      	cmp	r4, r9
 8000398:	46c2      	mov	sl, r8
 800039a:	464b      	mov	r3, r9
 800039c:	d354      	bcc.n	8000448 <__udivmoddi4+0x298>
 800039e:	d051      	beq.n	8000444 <__udivmoddi4+0x294>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d069      	beq.n	8000478 <__udivmoddi4+0x2c8>
 80003a4:	ebb1 050a 	subs.w	r5, r1, sl
 80003a8:	eb64 0403 	sbc.w	r4, r4, r3
 80003ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003b0:	40fd      	lsrs	r5, r7
 80003b2:	40fc      	lsrs	r4, r7
 80003b4:	ea4c 0505 	orr.w	r5, ip, r5
 80003b8:	e9c6 5400 	strd	r5, r4, [r6]
 80003bc:	2700      	movs	r7, #0
 80003be:	e747      	b.n	8000250 <__udivmoddi4+0xa0>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f703 	lsr.w	r7, r0, r3
 80003c8:	4095      	lsls	r5, r2
 80003ca:	fa01 f002 	lsl.w	r0, r1, r2
 80003ce:	fa21 f303 	lsr.w	r3, r1, r3
 80003d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d6:	4338      	orrs	r0, r7
 80003d8:	0c01      	lsrs	r1, r0, #16
 80003da:	fbb3 f7fe 	udiv	r7, r3, lr
 80003de:	fa1f f885 	uxth.w	r8, r5
 80003e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ea:	fb07 f308 	mul.w	r3, r7, r8
 80003ee:	428b      	cmp	r3, r1
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f6:	1869      	adds	r1, r5, r1
 80003f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3f02      	subs	r7, #2
 8000404:	4429      	add	r1, r5
 8000406:	1acb      	subs	r3, r1, r3
 8000408:	b281      	uxth	r1, r0
 800040a:	fbb3 f0fe 	udiv	r0, r3, lr
 800040e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb00 f308 	mul.w	r3, r0, r8
 800041a:	428b      	cmp	r3, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x27e>
 800041e:	1869      	adds	r1, r5, r1
 8000420:	f100 3cff 	add.w	ip, r0, #4294967295
 8000424:	d217      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000426:	428b      	cmp	r3, r1
 8000428:	d915      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042a:	3802      	subs	r0, #2
 800042c:	4429      	add	r1, r5
 800042e:	1ac9      	subs	r1, r1, r3
 8000430:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xfe>
 8000436:	4637      	mov	r7, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e709      	b.n	8000250 <__udivmoddi4+0xa0>
 800043c:	4607      	mov	r7, r0
 800043e:	e6e7      	b.n	8000210 <__udivmoddi4+0x60>
 8000440:	4618      	mov	r0, r3
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x8c>
 8000444:	4541      	cmp	r1, r8
 8000446:	d2ab      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 8000448:	ebb8 0a02 	subs.w	sl, r8, r2
 800044c:	eb69 020e 	sbc.w	r2, r9, lr
 8000450:	3801      	subs	r0, #1
 8000452:	4613      	mov	r3, r2
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4660      	mov	r0, ip
 8000458:	e7e9      	b.n	800042e <__udivmoddi4+0x27e>
 800045a:	4618      	mov	r0, r3
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4667      	mov	r7, ip
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	4681      	mov	r9, r0
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3802      	subs	r0, #2
 8000468:	442c      	add	r4, r5
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0x14c>
 800046c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000470:	442b      	add	r3, r5
 8000472:	e72f      	b.n	80002d4 <__udivmoddi4+0x124>
 8000474:	4638      	mov	r0, r7
 8000476:	e708      	b.n	800028a <__udivmoddi4+0xda>
 8000478:	4637      	mov	r7, r6
 800047a:	e6e9      	b.n	8000250 <__udivmoddi4+0xa0>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004de:	b480      	push	{r7}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4013      	ands	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fe2f 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f945 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fb09 	bl	8000b34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f000 fad5 	bl	8000ad0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000526:	f000 f9e3 	bl	80008f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800052a:	f000 fa5d 	bl	80009e8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800052e:	f000 faa7 	bl	8000a80 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000532:	f000 fa1b 	bl	800096c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //OE high
  GPIOA -> ODR |= GPIO_PIN_8;
 8000536:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000544:	6153      	str	r3, [r2, #20]

  int scan = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  int count = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  int frame = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
     {
    	// subframe finished, move onto next line
    	if(count >=16){
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	dd04      	ble.n	8000562 <main+0x52>
			scan++;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
			count = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
		}
    	// finished with animation, loop back
		if(frame>=framesN*frameMod){
 8000562:	2305      	movs	r3, #5
 8000564:	220b      	movs	r2, #11
 8000566:	fb02 f303 	mul.w	r3, r2, r3
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	db01      	blt.n	8000574 <main+0x64>
			frame = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
		}

		// last row, change frame and loop back
		if(scan>=16){
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b0f      	cmp	r3, #15
 8000578:	dd04      	ble.n	8000584 <main+0x74>
			scan = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
			frame ++;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3301      	adds	r3, #1
 8000582:	607b      	str	r3, [r7, #4]
		}

		// new row, set row selects
		if(count==0){
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d147      	bne.n	800061a <main+0x10a>
			if(scan & 0x1){
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d006      	beq.n	80005a2 <main+0x92>
				GPIOB -> ODR  |= GPIO_PIN_0;
 8000594:	4b7f      	ldr	r3, [pc, #508]	; (8000794 <main+0x284>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a7e      	ldr	r2, [pc, #504]	; (8000794 <main+0x284>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	e005      	b.n	80005ae <main+0x9e>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_0;
 80005a2:	4b7c      	ldr	r3, [pc, #496]	; (8000794 <main+0x284>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a7b      	ldr	r2, [pc, #492]	; (8000794 <main+0x284>)
 80005a8:	f023 0301 	bic.w	r3, r3, #1
 80005ac:	6153      	str	r3, [r2, #20]
			}
			if(scan & 0x2){
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d006      	beq.n	80005c6 <main+0xb6>
				GPIOB -> ODR  |= GPIO_PIN_1;
 80005b8:	4b76      	ldr	r3, [pc, #472]	; (8000794 <main+0x284>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a75      	ldr	r2, [pc, #468]	; (8000794 <main+0x284>)
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	6153      	str	r3, [r2, #20]
 80005c4:	e005      	b.n	80005d2 <main+0xc2>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_1;
 80005c6:	4b73      	ldr	r3, [pc, #460]	; (8000794 <main+0x284>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a72      	ldr	r2, [pc, #456]	; (8000794 <main+0x284>)
 80005cc:	f023 0302 	bic.w	r3, r3, #2
 80005d0:	6153      	str	r3, [r2, #20]
			}

			if(scan & 0x4){
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d006      	beq.n	80005ea <main+0xda>
				GPIOD -> ODR  |= GPIO_PIN_1;
 80005dc:	4b6e      	ldr	r3, [pc, #440]	; (8000798 <main+0x288>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a6d      	ldr	r2, [pc, #436]	; (8000798 <main+0x288>)
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	6153      	str	r3, [r2, #20]
 80005e8:	e005      	b.n	80005f6 <main+0xe6>
			}
			else{
				GPIOD -> ODR  &=~ GPIO_PIN_1;
 80005ea:	4b6b      	ldr	r3, [pc, #428]	; (8000798 <main+0x288>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a6a      	ldr	r2, [pc, #424]	; (8000798 <main+0x288>)
 80005f0:	f023 0302 	bic.w	r3, r3, #2
 80005f4:	6153      	str	r3, [r2, #20]
			}
			if(scan & 0x8){
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <main+0xfe>
				GPIOB -> ODR  |= GPIO_PIN_14;
 8000600:	4b64      	ldr	r3, [pc, #400]	; (8000794 <main+0x284>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a63      	ldr	r2, [pc, #396]	; (8000794 <main+0x284>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	e005      	b.n	800061a <main+0x10a>
			}
			else{
				GPIOB -> ODR  &=~ GPIO_PIN_14;
 800060e:	4b61      	ldr	r3, [pc, #388]	; (8000794 <main+0x284>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a60      	ldr	r2, [pc, #384]	; (8000794 <main+0x284>)
 8000614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000618:	6153      	str	r3, [r2, #20]
			}
		}

		// OE high (LEDs off)
		GPIOA -> ODR |= GPIO_PIN_8;
 800061a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000628:	6153      	str	r3, [r2, #20]

		// latch low (load on)
		GPIOC -> ODR &= ~GPIO_PIN_13;
 800062a:	4b5c      	ldr	r3, [pc, #368]	; (800079c <main+0x28c>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a5b      	ldr	r2, [pc, #364]	; (800079c <main+0x28c>)
 8000630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000634:	6153      	str	r3, [r2, #20]


		// brightness modulation
		if(count>=8){
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2b07      	cmp	r3, #7
 800063a:	dd19      	ble.n	8000670 <main+0x160>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[0+(frame/frameMod)*5][scan*4*3*2]), 24, 100);
 800063c:	220b      	movs	r2, #11
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	fb93 f2f2 	sdiv	r2, r3, r2
 8000644:	4613      	mov	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	441a      	add	r2, r3
 800064a:	68f9      	ldr	r1, [r7, #12]
 800064c:	460b      	mov	r3, r1
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	440b      	add	r3, r1
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	4619      	mov	r1, r3
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	01db      	lsls	r3, r3, #7
 800065e:	440b      	add	r3, r1
 8000660:	4a4f      	ldr	r2, [pc, #316]	; (80007a0 <main+0x290>)
 8000662:	1899      	adds	r1, r3, r2
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	2218      	movs	r2, #24
 8000668:	484e      	ldr	r0, [pc, #312]	; (80007a4 <main+0x294>)
 800066a:	f003 f8d5 	bl	8003818 <HAL_SPI_Transmit>
 800066e:	e076      	b.n	800075e <main+0x24e>
		}
		else if(count>=4){
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	2b03      	cmp	r3, #3
 8000674:	dd1a      	ble.n	80006ac <main+0x19c>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[1+(frame/frameMod)*5][scan*4*3*2]), 24, 100);
 8000676:	220b      	movs	r2, #11
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	fb93 f2f2 	sdiv	r2, r3, r2
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	68f9      	ldr	r1, [r7, #12]
 8000688:	460b      	mov	r3, r1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	440b      	add	r3, r1
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	4619      	mov	r1, r3
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	440b      	add	r3, r1
 800069c:	4a40      	ldr	r2, [pc, #256]	; (80007a0 <main+0x290>)
 800069e:	1899      	adds	r1, r3, r2
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2218      	movs	r2, #24
 80006a4:	483f      	ldr	r0, [pc, #252]	; (80007a4 <main+0x294>)
 80006a6:	f003 f8b7 	bl	8003818 <HAL_SPI_Transmit>
 80006aa:	e058      	b.n	800075e <main+0x24e>
		}
		else if(count>=2){
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	dd1a      	ble.n	80006e8 <main+0x1d8>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[2+(frame/frameMod)*5][scan*4*3*2]), 24, 100);
 80006b2:	220b      	movs	r2, #11
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	1c9a      	adds	r2, r3, #2
 80006c2:	68f9      	ldr	r1, [r7, #12]
 80006c4:	460b      	mov	r3, r1
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	440b      	add	r3, r1
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4619      	mov	r1, r3
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	01db      	lsls	r3, r3, #7
 80006d6:	440b      	add	r3, r1
 80006d8:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <main+0x290>)
 80006da:	1899      	adds	r1, r3, r2
 80006dc:	2364      	movs	r3, #100	; 0x64
 80006de:	2218      	movs	r2, #24
 80006e0:	4830      	ldr	r0, [pc, #192]	; (80007a4 <main+0x294>)
 80006e2:	f003 f899 	bl	8003818 <HAL_SPI_Transmit>
 80006e6:	e03a      	b.n	800075e <main+0x24e>
		}
		else if(count>=1){
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	dd1a      	ble.n	8000724 <main+0x214>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[3+(frame/frameMod)*5][scan*4*3*2]), 24, 100);
 80006ee:	220b      	movs	r2, #11
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	fb93 f2f2 	sdiv	r2, r3, r2
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	1cda      	adds	r2, r3, #3
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	460b      	mov	r3, r1
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	440b      	add	r3, r1
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	4619      	mov	r1, r3
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	01db      	lsls	r3, r3, #7
 8000712:	440b      	add	r3, r1
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <main+0x290>)
 8000716:	1899      	adds	r1, r3, r2
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2218      	movs	r2, #24
 800071c:	4821      	ldr	r0, [pc, #132]	; (80007a4 <main+0x294>)
 800071e:	f003 f87b 	bl	8003818 <HAL_SPI_Transmit>
 8000722:	e01c      	b.n	800075e <main+0x24e>
		}
		else if(count==0){
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d119      	bne.n	800075e <main+0x24e>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&(image[4+(frame/frameMod)*5][scan*4*3*2]), 24, 100);
 800072a:	220b      	movs	r2, #11
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	1d1a      	adds	r2, r3, #4
 800073a:	68f9      	ldr	r1, [r7, #12]
 800073c:	460b      	mov	r3, r1
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	440b      	add	r3, r1
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	4619      	mov	r1, r3
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	01db      	lsls	r3, r3, #7
 800074e:	440b      	add	r3, r1
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <main+0x290>)
 8000752:	1899      	adds	r1, r3, r2
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2218      	movs	r2, #24
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <main+0x294>)
 800075a:	f003 f85d 	bl	8003818 <HAL_SPI_Transmit>
		}

		// OE low (LEDs on)
		GPIOA -> ODR &= ~GPIO_PIN_8;
 800075e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800076c:	6153      	str	r3, [r2, #20]

		// LAT high (load off)
		GPIOC -> ODR |= GPIO_PIN_13;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <main+0x28c>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <main+0x28c>)
 8000774:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000778:	6153      	str	r3, [r2, #20]

		// delay so leds are on for certain time
		for(int i = 0; i<40; i++){}
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	e002      	b.n	8000786 <main+0x276>
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2b27      	cmp	r3, #39	; 0x27
 800078a:	ddf9      	ble.n	8000780 <main+0x270>

		// increase count
		count++;
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	3301      	adds	r3, #1
 8000790:	60bb      	str	r3, [r7, #8]
    	if(count >=16){
 8000792:	e6de      	b.n	8000552 <main+0x42>
 8000794:	48000400 	.word	0x48000400
 8000798:	48000c00 	.word	0x48000c00
 800079c:	48000800 	.word	0x48000800
 80007a0:	08005538 	.word	0x08005538
 80007a4:	2000017c 	.word	0x2000017c

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0ae      	sub	sp, #184	; 0xb8
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007b2:	2248      	movs	r2, #72	; 0x48
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fe8c 	bl	80054d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2250      	movs	r2, #80	; 0x50
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fe7c 	bl	80054d4 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007ea:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80007ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	f023 0303 	bic.w	r3, r3, #3
 80007f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff fe3d 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000806:	4b39      	ldr	r3, [pc, #228]	; (80008ec <SystemClock_Config+0x144>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800080e:	4a37      	ldr	r2, [pc, #220]	; (80008ec <SystemClock_Config+0x144>)
 8000810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <SystemClock_Config+0x144>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000822:	2327      	movs	r3, #39	; 0x27
 8000824:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000834:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000836:	2301      	movs	r3, #1
 8000838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fd1f 	bl	800229c <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000864:	f000 f9fa 	bl	8000c5c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000868:	236f      	movs	r3, #111	; 0x6f
 800086a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800086c:	2302      	movs	r3, #2
 800086e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000884:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000888:	2101      	movs	r1, #1
 800088a:	4618      	mov	r0, r3
 800088c:	f002 f864 	bl	8002958 <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000896:	f000 f9e1 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800089a:	f242 1301 	movw	r3, #8449	; 0x2101
 800089e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80008a0:	2318      	movs	r3, #24
 80008a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80008a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80008aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80008b0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80008b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ba:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80008c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80008c6:	2300      	movs	r3, #0
 80008c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80008ca:	2310      	movs	r3, #16
 80008cc:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fc8b 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80008dc:	f000 f9be 	bl	8000c5c <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008e0:	f002 fdf9 	bl	80034d6 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e4:	bf00      	nop
 80008e6:	37b8      	adds	r7, #184	; 0xb8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58000400 	.word	0x58000400

080008f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_SPI1_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_SPI1_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_SPI1_Init+0x74>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI1_Init+0x74>)
 800090a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800090e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI1_Init+0x74>)
 800091e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000922:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI1_Init+0x74>)
 800093e:	2207      	movs	r2, #7
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_SPI1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI1_Init+0x74>)
 800094a:	2208      	movs	r2, #8
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_SPI1_Init+0x74>)
 8000950:	f002 fed8 	bl	8003704 <HAL_SPI_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 f97f 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000017c 	.word	0x2000017c
 8000968:	40013000 	.word	0x40013000

0800096c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_SPI2_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_SPI2_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_SPI2_Init+0x74>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_SPI2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SPI2_Init+0x74>)
 8000986:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800098a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_SPI2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI2_Init+0x74>)
 800099a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI2_Init+0x74>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI2_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_SPI2_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI2_Init+0x74>)
 80009ba:	2207      	movs	r2, #7
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_SPI2_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI2_Init+0x74>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_SPI2_Init+0x74>)
 80009cc:	f002 fe9a 	bl	8003704 <HAL_SPI_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f941 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000002c 	.word	0x2000002c
 80009e4:	40003800 	.word	0x40003800

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_USART1_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a32:	f003 f994 	bl	8003d5e <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f90e 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a44:	f004 fbe3 	bl	800520e <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f905 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a56:	f004 fc18 	bl	800528a <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 f8fc 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a66:	f004 fb99 	bl	800519c <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f8f4 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000090 	.word	0x20000090
 8000a7c:	40013800 	.word	0x40013800

08000a80 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <MX_USB_PCD_Init+0x4c>)
 8000a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a8c:	2208      	movs	r2, #8
 8000a8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_USB_PCD_Init+0x48>)
 8000ab6:	f000 ff59 	bl	800196c <HAL_PCD_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ac0:	f000 f8cc 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200001e0 	.word	0x200001e0
 8000acc:	40006800 	.word	0x40006800

08000ad0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void) 
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ad4:	2004      	movs	r0, #4
 8000ad6:	f7ff fce9 	bl	80004ac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fce6 	bl	80004ac <LL_AHB1_GRP1_EnableClock>

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_DMA_Init+0x60>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_DMA_Init+0x5c>)
 8000b1a:	f000 fc95 	bl	8001448 <HAL_DMA_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_DMA_Init+0x58>
  {
    Error_Handler( );
 8000b24:	f000 f89a 	bl	8000c5c <Error_Handler>
  }

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000011c 	.word	0x2000011c
 8000b30:	40020008 	.word	0x40020008

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	2004      	movs	r0, #4
 8000b4a:	f7ff fcc8 	bl	80004de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fcc5 	bl	80004de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff fcc2 	bl	80004de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	2008      	movs	r0, #8
 8000b5c:	f7ff fcbf 	bl	80004de <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAT_GPIO_Port, LAT_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	483a      	ldr	r0, [pc, #232]	; (8000c50 <MX_GPIO_Init+0x11c>)
 8000b68:	f000 fee8 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f000 fee1 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RowA_Pin|RowB_Pin|RowD_Pin|RowC_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f244 0123 	movw	r1, #16419	; 0x4023
 8000b80:	4834      	ldr	r0, [pc, #208]	; (8000c54 <MX_GPIO_Init+0x120>)
 8000b82:	f000 fedb 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RowC_1_GPIO_Port, RowC_1_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4833      	ldr	r0, [pc, #204]	; (8000c58 <MX_GPIO_Init+0x124>)
 8000b8c:	f000 fed6 	bl	800193c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LAT_Pin */
  GPIO_InitStruct.Pin = LAT_Pin;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LAT_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	482a      	ldr	r0, [pc, #168]	; (8000c50 <MX_GPIO_Init+0x11c>)
 8000ba8:	f000 fd58 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fd49 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481d      	ldr	r0, [pc, #116]	; (8000c50 <MX_GPIO_Init+0x11c>)
 8000bdc:	f000 fd3e 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : RowA_Pin RowB_Pin RowC_Pin */
  GPIO_InitStruct.Pin = RowA_Pin|RowB_Pin|RowC_Pin;
 8000be0:	2323      	movs	r3, #35	; 0x23
 8000be2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4817      	ldr	r0, [pc, #92]	; (8000c54 <MX_GPIO_Init+0x120>)
 8000bf6:	f000 fd31 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : RowD_Pin */
  GPIO_InitStruct.Pin = RowD_Pin;
 8000bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c04:	2302      	movs	r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RowD_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_GPIO_Init+0x120>)
 8000c12:	f000 fd23 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000c16:	2301      	movs	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_GPIO_Init+0x124>)
 8000c28:	f000 fd18 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : RowC_1_Pin */
  GPIO_InitStruct.Pin = RowC_1_Pin;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c34:	2302      	movs	r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RowC_1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_GPIO_Init+0x124>)
 8000c42:	f000 fd0b 	bl	800165c <HAL_GPIO_Init>

}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	48000800 	.word	0x48000800
 8000c54:	48000400 	.word	0x48000400
 8000c58:	48000c00 	.word	0x48000c00

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <LL_AHB2_GRP1_EnableClock>:
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a30      	ldr	r2, [pc, #192]	; (8000df0 <HAL_SPI_MspInit+0xe0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d118      	bne.n	8000d64 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d36:	f7ff ffca 	bl	8000cce <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff ff95 	bl	8000c6a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000d40:	23c2      	movs	r3, #194	; 0xc2
 8000d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d50:	2305      	movs	r3, #5
 8000d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f000 fc7d 	bl	800165c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d62:	e040      	b.n	8000de6 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <HAL_SPI_MspInit+0xe4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d13b      	bne.n	8000de6 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d72:	f7ff ff93 	bl	8000c9c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	2004      	movs	r0, #4
 8000d78:	f7ff ff77 	bl	8000c6a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff ff74 	bl	8000c6a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d82:	2302      	movs	r3, #2
 8000d84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000d92:	2303      	movs	r3, #3
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4816      	ldr	r0, [pc, #88]	; (8000df8 <HAL_SPI_MspInit+0xe8>)
 8000d9e:	f000 fc5d 	bl	800165c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da2:	2304      	movs	r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db2:	2305      	movs	r3, #5
 8000db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480e      	ldr	r0, [pc, #56]	; (8000df8 <HAL_SPI_MspInit+0xe8>)
 8000dbe:	f000 fc4d 	bl	800165c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f000 fc3b 	bl	800165c <HAL_GPIO_Init>
}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40013000 	.word	0x40013000
 8000df4:	40003800 	.word	0x40003800
 8000df8:	48000800 	.word	0x48000800

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_UART_MspInit+0x58>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d116      	bne.n	8000e4c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e22:	f7ff ff54 	bl	8000cce <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	2002      	movs	r0, #2
 8000e28:	f7ff ff1f 	bl	8000c6a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <HAL_UART_MspInit+0x5c>)
 8000e48:	f000 fc08 	bl	800165c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013800 	.word	0x40013800
 8000e58:	48000400 	.word	0x48000400

08000e5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_PCD_MspInit+0x5c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d118      	bne.n	8000eb0 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fef3 	bl	8000c6a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e96:	230a      	movs	r3, #10
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f000 fbda 	bl	800165c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ea8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000eac:	f7ff fef6 	bl	8000c9c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40006800 	.word	0x40006800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f98c 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <SystemInit+0xa0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <SystemInit+0xa0>)
 8000f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f28:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <SystemInit+0xa0>)
 8000f2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f46:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f4a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <SystemInit+0xa4>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f68:	f023 0305 	bic.w	r3, r3, #5
 8000f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <SystemInit+0xa8>)
 8000f8a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <SystemInit+0xa8>)
 8000f92:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	faf6fefb 	.word	0xfaf6fefb
 8000fc0:	22041000 	.word	0x22041000

08000fc4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	4a47      	ldr	r2, [pc, #284]	; (80010f4 <SystemCoreClockUpdate+0x130>)
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	d867      	bhi.n	80010bc <SystemCoreClockUpdate+0xf8>
 8000fec:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <SystemCoreClockUpdate+0x30>)
 8000fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff2:	bf00      	nop
 8000ff4:	08001029 	.word	0x08001029
 8000ff8:	080010bd 	.word	0x080010bd
 8000ffc:	080010bd 	.word	0x080010bd
 8001000:	080010bd 	.word	0x080010bd
 8001004:	08001031 	.word	0x08001031
 8001008:	080010bd 	.word	0x080010bd
 800100c:	080010bd 	.word	0x080010bd
 8001010:	080010bd 	.word	0x080010bd
 8001014:	08001039 	.word	0x08001039
 8001018:	080010bd 	.word	0x080010bd
 800101c:	080010bd 	.word	0x080010bd
 8001020:	080010bd 	.word	0x080010bd
 8001024:	08001041 	.word	0x08001041
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001028:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <SystemCoreClockUpdate+0x134>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6013      	str	r3, [r2, #0]
      break;
 800102e:	e049      	b.n	80010c4 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <SystemCoreClockUpdate+0x134>)
 8001032:	4a32      	ldr	r2, [pc, #200]	; (80010fc <SystemCoreClockUpdate+0x138>)
 8001034:	601a      	str	r2, [r3, #0]
      break;
 8001036:	e045      	b.n	80010c4 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <SystemCoreClockUpdate+0x134>)
 800103a:	4a31      	ldr	r2, [pc, #196]	; (8001100 <SystemCoreClockUpdate+0x13c>)
 800103c:	601a      	str	r2, [r3, #0]
      break;
 800103e:	e041      	b.n	80010c4 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800104c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	3301      	adds	r3, #1
 800105a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d105      	bne.n	800106e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <SystemCoreClockUpdate+0x138>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e00d      	b.n	800108a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d105      	bne.n	8001080 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <SystemCoreClockUpdate+0x13c>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e004      	b.n	800108a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	fbb2 f3f3 	udiv	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800108a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800109e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0f5b      	lsrs	r3, r3, #29
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <SystemCoreClockUpdate+0x134>)
 80010b8:	6013      	str	r3, [r2, #0]
      break;
 80010ba:	e003      	b.n	80010c4 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80010bc:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <SystemCoreClockUpdate+0x134>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6013      	str	r3, [r2, #0]
      break;
 80010c2:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <SystemCoreClockUpdate+0x140>)
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <SystemCoreClockUpdate+0x134>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemCoreClockUpdate+0x134>)
 80010e4:	6013      	str	r3, [r2, #0]

}
 80010e6:	bf00      	nop
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	08009198 	.word	0x08009198
 80010f8:	20000004 	.word	0x20000004
 80010fc:	00f42400 	.word	0x00f42400
 8001100:	01e84800 	.word	0x01e84800
 8001104:	08009138 	.word	0x08009138

08001108 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001108:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110c:	3304      	adds	r3, #4

0800110e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001110:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001112:	d3f9      	bcc.n	8001108 <CopyDataInit>
  bx lr
 8001114:	4770      	bx	lr

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001116:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001118:	3004      	adds	r0, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800111a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>
  bx lr
 800111e:	4770      	bx	lr

08001120 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001122:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopForever+0x8>)
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopForever+0xc>)
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopForever+0x10>)
 800112a:	2300      	movs	r3, #0
 800112c:	f7ff ffef 	bl	800110e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <LoopForever+0x14>)
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <LoopForever+0x18>)
 8001134:	2300      	movs	r3, #0
 8001136:	f7ff fff0 	bl	800111a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <LoopForever+0x1c>)
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <LoopForever+0x20>)
 800113e:	2300      	movs	r3, #0
 8001140:	f7ff ffeb 	bl	800111a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001144:	f7ff fee8 	bl	8000f18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001148:	f004 f9a0 	bl	800548c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800114c:	f7ff f9e0 	bl	8000510 <main>

08001150 <LoopForever>:

LoopForever:
  b LoopForever
 8001150:	e7fe      	b.n	8001150 <LoopForever>
 8001152:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001154:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001158:	20000004 	.word	0x20000004
 800115c:	20000010 	.word	0x20000010
 8001160:	080091e8 	.word	0x080091e8
  INIT_BSS _sbss, _ebss
 8001164:	20000010 	.word	0x20000010
 8001168:	20000458 	.word	0x20000458
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800116c:	20030000 	.word	0x20030000
 8001170:	20030000 	.word	0x20030000

08001174 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_Init+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_Init+0x3c>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118e:	2003      	movs	r0, #3
 8001190:	f000 f928 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001194:	2000      	movs	r0, #0
 8001196:	f000 f80f 	bl	80011b8 <HAL_InitTick>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	e001      	b.n	80011aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a6:	f7ff fdab 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	58004000 	.word	0x58004000

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_InitTick+0x6c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d023      	beq.n	8001214 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80011cc:	f001 fd6a 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 80011d0:	4601      	mov	r1, r0
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_InitTick+0x6c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f923 	bl	800142e <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10f      	bne.n	800120e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d809      	bhi.n	8001208 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f8fd 	bl	80013fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_InitTick+0x70>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e007      	b.n	8001218 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e004      	b.n	8001218 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	e001      	b.n	8001218 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000000c 	.word	0x2000000c
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x1c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x20>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x1c>)
 800123c:	6013      	str	r3, [r2, #0]
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000454 	.word	0x20000454
 800124c:	2000000c 	.word	0x2000000c

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000454 	.word	0x20000454

08001268 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetTickPrio+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff8e 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff47 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff5e 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ff90 	bl	8001338 <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff5f 	bl	80012e4 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffb2 	bl	80013a0 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e08d      	b.n	8001576 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_DMA_Init+0x138>)
 8001462:	429a      	cmp	r2, r3
 8001464:	d80f      	bhi.n	8001486 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <HAL_DMA_Init+0x13c>)
 800146e:	4413      	add	r3, r2
 8001470:	4a45      	ldr	r2, [pc, #276]	; (8001588 <HAL_DMA_Init+0x140>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	009a      	lsls	r2, r3, #2
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a42      	ldr	r2, [pc, #264]	; (800158c <HAL_DMA_Init+0x144>)
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
 8001484:	e00e      	b.n	80014a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	4b40      	ldr	r3, [pc, #256]	; (8001590 <HAL_DMA_Init+0x148>)
 800148e:	4413      	add	r3, r2
 8001490:	4a3d      	ldr	r2, [pc, #244]	; (8001588 <HAL_DMA_Init+0x140>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	009a      	lsls	r2, r3, #2
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <HAL_DMA_Init+0x14c>)
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f84e 	bl	8001598 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001504:	d102      	bne.n	800150c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001520:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d010      	beq.n	800154c <HAL_DMA_Init+0x104>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b04      	cmp	r3, #4
 8001530:	d80c      	bhi.n	800154c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f86e 	bl	8001614 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	e008      	b.n	800155e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020407 	.word	0x40020407
 8001584:	bffdfff8 	.word	0xbffdfff8
 8001588:	cccccccd 	.word	0xcccccccd
 800158c:	40020000 	.word	0x40020000
 8001590:	bffdfbf8 	.word	0xbffdfbf8
 8001594:	40020400 	.word	0x40020400

08001598 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d80a      	bhi.n	80015c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015b8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6493      	str	r3, [r2, #72]	; 0x48
 80015c0:	e007      	b.n	80015d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	009a      	lsls	r2, r3, #2
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80015cc:	4413      	add	r3, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3b08      	subs	r3, #8
 80015da:	4a0c      	ldr	r2, [pc, #48]	; (800160c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80015e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 031c 	and.w	r3, r3, #28
 80015f0:	2201      	movs	r2, #1
 80015f2:	409a      	lsls	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40020407 	.word	0x40020407
 8001608:	4002081c 	.word	0x4002081c
 800160c:	cccccccd 	.word	0xcccccccd
 8001610:	40020880 	.word	0x40020880

08001614 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	461a      	mov	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a08      	ldr	r2, [pc, #32]	; (8001658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001636:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3b01      	subs	r3, #1
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2201      	movs	r2, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	1000823f 	.word	0x1000823f
 8001658:	40020940 	.word	0x40020940

0800165c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	e14c      	b.n	8001906 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 813e 	beq.w	8001900 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x38>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b12      	cmp	r3, #18
 8001692:	d123      	bne.n	80016dc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	6939      	ldr	r1, [r7, #16]
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d00b      	beq.n	8001730 <HAL_GPIO_Init+0xd4>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d007      	beq.n	8001730 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001724:	2b11      	cmp	r3, #17
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d130      	bne.n	8001792 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001766:	2201      	movs	r2, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	f003 0201 	and.w	r2, r3, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8098 	beq.w	8001900 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_GPIO_Init+0x2c8>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017fa:	d019      	beq.n	8001830 <HAL_GPIO_Init+0x1d4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <HAL_GPIO_Init+0x2cc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_GPIO_Init+0x1d0>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a49      	ldr	r2, [pc, #292]	; (800192c <HAL_GPIO_Init+0x2d0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_Init+0x1cc>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2d4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0x1c8>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_GPIO_Init+0x2d8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_Init+0x1c4>
 800181c:	2304      	movs	r3, #4
 800181e:	e008      	b.n	8001832 <HAL_GPIO_Init+0x1d6>
 8001820:	2307      	movs	r3, #7
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x1d6>
 8001824:	2303      	movs	r3, #3
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x1d6>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x1d6>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x1d6>
 8001830:	2300      	movs	r3, #0
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001842:	4938      	ldr	r1, [pc, #224]	; (8001924 <HAL_GPIO_Init+0x2c8>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 8001852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001876:	4a30      	ldr	r2, [pc, #192]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 8001880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018a4:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d0:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	f47f aeab 	bne.w	800166c <HAL_GPIO_Init+0x10>
  }
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40010000 	.word	0x40010000
 8001928:	48000400 	.word	0x48000400
 800192c:	48000800 	.word	0x48000800
 8001930:	48000c00 	.word	0x48000c00
 8001934:	48001000 	.word	0x48001000
 8001938:	58000800 	.word	0x58000800

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
 8001948:	4613      	mov	r3, r2
 800194a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001958:	e002      	b.n	8001960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af06      	add	r7, sp, #24
 8001972:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0ad      	b.n	8001ada <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fa62 	bl	8000e5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2203      	movs	r2, #3
 800199c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 fd2f 	bl	8005408 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e035      	b.n	8001a1c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	015b      	lsls	r3, r3, #5
 80019b6:	4413      	add	r3, r2
 80019b8:	3329      	adds	r3, #41	; 0x29
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	4413      	add	r3, r2
 80019c6:	3328      	adds	r3, #40	; 0x28
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	b291      	uxth	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	015b      	lsls	r3, r3, #5
 80019d6:	4413      	add	r3, r2
 80019d8:	3336      	adds	r3, #54	; 0x36
 80019da:	460a      	mov	r2, r1
 80019dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	015b      	lsls	r3, r3, #5
 80019e4:	4413      	add	r3, r2
 80019e6:	332b      	adds	r3, #43	; 0x2b
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	015b      	lsls	r3, r3, #5
 80019f2:	4413      	add	r3, r2
 80019f4:	3338      	adds	r3, #56	; 0x38
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	015b      	lsls	r3, r3, #5
 8001a00:	4413      	add	r3, r2
 8001a02:	333c      	adds	r3, #60	; 0x3c
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	4413      	add	r3, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3c4      	bcc.n	80019b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	e031      	b.n	8001a90 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	015b      	lsls	r3, r3, #5
 8001a32:	4413      	add	r3, r2
 8001a34:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	015b      	lsls	r3, r3, #5
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	015b      	lsls	r3, r3, #5
 8001a52:	4413      	add	r3, r2
 8001a54:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	015b      	lsls	r3, r3, #5
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	330a      	adds	r3, #10
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	4413      	add	r3, r2
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3c8      	bcc.n	8001a2c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	687e      	ldr	r6, [r7, #4]
 8001aa2:	466d      	mov	r5, sp
 8001aa4:	f106 0410 	add.w	r4, r6, #16
 8001aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	602b      	str	r3, [r5, #0]
 8001ab0:	1d33      	adds	r3, r6, #4
 8001ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab4:	6838      	ldr	r0, [r7, #0]
 8001ab6:	f003 fcc4 	bl	8005442 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f805 	bl	8001ae2 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ae2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	58000400 	.word	0x58000400

08001b58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	58000400 	.word	0x58000400

08001b74 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b86:	d101      	bne.n	8001b8c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_RCC_HSE_EnableBypass>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_RCC_HSE_DisableBypass>:
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_HSE_Enable>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_HSE_Disable>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_RCC_HSE_IsReady>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c22:	d101      	bne.n	8001c28 <LL_RCC_HSE_IsReady+0x18>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_RCC_HSE_IsReady+0x1a>
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_RCC_HSI_Enable>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_RCC_HSI_Disable>:
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_RCC_HSI_IsReady>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c82:	d101      	bne.n	8001c88 <LL_RCC_HSI_IsReady+0x18>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <LL_RCC_HSI_IsReady+0x1a>
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_RCC_HSI48_Enable>:
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_RCC_HSI48_Disable>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_RCC_HSI48_IsReady>:
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d101      	bne.n	8001d1a <LL_RCC_HSI48_IsReady+0x18>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_RCC_HSI48_IsReady+0x1a>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_LSE_Enable>:
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_RCC_LSE_Disable>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_RCC_LSE_EnableBypass>:
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_RCC_LSE_DisableBypass>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d101      	bne.n	8001dc6 <LL_RCC_LSE_IsReady+0x18>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <LL_RCC_LSE_IsReady+0x1a>
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d101      	bne.n	8001e2e <LL_RCC_LSI1_IsReady+0x18>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_RCC_LSI1_IsReady+0x1a>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d101      	bne.n	8001e96 <LL_RCC_LSI2_IsReady+0x18>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_RCC_LSI2_IsReady+0x1a>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6013      	str	r3, [r2, #0]
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d101      	bne.n	8001f22 <LL_RCC_MSI_IsReady+0x16>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_RCC_MSI_IsReady+0x18>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f66:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2bb0      	cmp	r3, #176	; 0xb0
 8001f6c:	d901      	bls.n	8001f72 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001f6e:	23b0      	movs	r3, #176	; 0xb0
 8001f70:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001f72:	687b      	ldr	r3, [r7, #4]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 0203 	bic.w	r2, r3, #3
 8001fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800204e:	f023 020f 	bic.w	r2, r3, #15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002150:	6013      	str	r3, [r2, #0]
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800216e:	d101      	bne.n	8002174 <LL_RCC_PLL_IsReady+0x18>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <LL_RCC_PLL_IsReady+0x1a>
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0303 	and.w	r3, r3, #3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d101      	bne.n	80021fa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800221a:	d101      	bne.n	8002220 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d101      	bne.n	8002246 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002264:	d101      	bne.n	800226a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002288:	d101      	bne.n	800228e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b08b      	sub	sp, #44	; 0x2c
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e34b      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 808f 	beq.w	80023da <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022bc:	f7ff fe89 	bl	8001fd2 <LL_RCC_GetSysClkSource>
 80022c0:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c2:	f7ff ff82 	bl	80021ca <LL_RCC_PLL_GetMainSource>
 80022c6:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x3e>
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d149      	bne.n	8002368 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d146      	bne.n	8002368 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022da:	f7ff fe17 	bl	8001f0c <LL_RCC_MSI_IsReady>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_OscConfig+0x54>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e32a      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80022f4:	f7ff fe2f 	bl	8001f56 <LL_RCC_MSI_GetRange>
 80022f8:	4603      	mov	r3, r0
 80022fa:	429c      	cmp	r4, r3
 80022fc:	d914      	bls.n	8002328 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fd0e 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e319      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fe09 	bl	8001f2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe2d 	bl	8001f80 <LL_RCC_MSI_SetCalibTrimming>
 8002326:	e013      	b.n	8002350 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fdfe 	bl	8001f2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fe22 	bl	8001f80 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fcef 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e2fa      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002350:	f7fe fe38 	bl	8000fc4 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002354:	4bb4      	ldr	r3, [pc, #720]	; (8002628 <HAL_RCC_OscConfig+0x38c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe ff2d 	bl	80011b8 <HAL_InitTick>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d039      	beq.n	80023d8 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e2ee      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01e      	beq.n	80023ae <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002370:	f7ff fdae 	bl	8001ed0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002374:	f7fe ff6c 	bl	8001250 <HAL_GetTick>
 8002378:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237c:	f7fe ff68 	bl	8001250 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e2db      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800238e:	f7ff fdbd 	bl	8001f0c <LL_RCC_MSI_IsReady>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f1      	beq.n	800237c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fdc6 	bl	8001f2e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fdea 	bl	8001f80 <LL_RCC_MSI_SetCalibTrimming>
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ae:	f7ff fd9e 	bl	8001eee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b2:	f7fe ff4d 	bl	8001250 <HAL_GetTick>
 80023b6:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ba:	f7fe ff49 	bl	8001250 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e2bc      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 80023cc:	f7ff fd9e 	bl	8001f0c <LL_RCC_MSI_IsReady>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f1      	bne.n	80023ba <HAL_RCC_OscConfig+0x11e>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d05a      	beq.n	800249c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e6:	f7ff fdf4 	bl	8001fd2 <LL_RCC_GetSysClkSource>
 80023ea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ec:	f7ff feed 	bl	80021ca <LL_RCC_PLL_GetMainSource>
 80023f0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_OscConfig+0x168>
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d10a      	bne.n	800241a <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	f7ff fc04 	bl	8001c10 <LL_RCC_HSE_IsReady>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d045      	beq.n	800249a <HAL_RCC_OscConfig+0x1fe>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d141      	bne.n	800249a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e295      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d102      	bne.n	800242a <HAL_RCC_OscConfig+0x18e>
 8002424:	f7ff fbd6 	bl	8001bd4 <LL_RCC_HSE_Enable>
 8002428:	e00d      	b.n	8002446 <HAL_RCC_OscConfig+0x1aa>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002432:	d104      	bne.n	800243e <HAL_RCC_OscConfig+0x1a2>
 8002434:	f7ff fbb0 	bl	8001b98 <LL_RCC_HSE_EnableBypass>
 8002438:	f7ff fbcc 	bl	8001bd4 <LL_RCC_HSE_Enable>
 800243c:	e003      	b.n	8002446 <HAL_RCC_OscConfig+0x1aa>
 800243e:	f7ff fbd8 	bl	8001bf2 <LL_RCC_HSE_Disable>
 8002442:	f7ff fbb8 	bl	8001bb6 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe feff 	bl	8001250 <HAL_GetTick>
 8002452:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002456:	f7fe fefb 	bl	8001250 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e26e      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002468:	f7ff fbd2 	bl	8001c10 <LL_RCC_HSE_IsReady>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f1      	beq.n	8002456 <HAL_RCC_OscConfig+0x1ba>
 8002472:	e013      	b.n	800249c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe feec 	bl	8001250 <HAL_GetTick>
 8002478:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fee8 	bl	8001250 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e25b      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800248e:	f7ff fbbf 	bl	8001c10 <LL_RCC_HSE_IsReady>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f1      	bne.n	800247c <HAL_RCC_OscConfig+0x1e0>
 8002498:	e000      	b.n	800249c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d051      	beq.n	800254c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a8:	f7ff fd93 	bl	8001fd2 <LL_RCC_GetSysClkSource>
 80024ac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ae:	f7ff fe8c 	bl	80021ca <LL_RCC_PLL_GetMainSource>
 80024b2:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x22a>
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b0c      	cmp	r3, #12
 80024be:	d113      	bne.n	80024e8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d110      	bne.n	80024e8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c6:	f7ff fbd3 	bl	8001c70 <LL_RCC_HSI_IsReady>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_OscConfig+0x240>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e234      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fbd7 	bl	8001c94 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e6:	e031      	b.n	800254c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d019      	beq.n	8002524 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	f7ff fba0 	bl	8001c34 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe feac 	bl	8001250 <HAL_GetTick>
 80024f8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fc:	f7fe fea8 	bl	8001250 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e21b      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800250e:	f7ff fbaf 	bl	8001c70 <LL_RCC_HSI_IsReady>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f1      	beq.n	80024fc <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fbb9 	bl	8001c94 <LL_RCC_HSI_SetCalibTrimming>
 8002522:	e013      	b.n	800254c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002524:	f7ff fb95 	bl	8001c52 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fe92 	bl	8001250 <HAL_GetTick>
 800252c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002530:	f7fe fe8e 	bl	8001250 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e201      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002542:	f7ff fb95 	bl	8001c70 <LL_RCC_HSI_IsReady>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f1      	bne.n	8002530 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80a2 	beq.w	80026aa <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d075      	beq.n	800265a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d046      	beq.n	8002608 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800257a:	f7ff fc4c 	bl	8001e16 <LL_RCC_LSI1_IsReady>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d113      	bne.n	80025ac <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002584:	f7ff fc25 	bl	8001dd2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002588:	f7fe fe62 	bl	8001250 <HAL_GetTick>
 800258c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002590:	f7fe fe5e 	bl	8001250 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1d1      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025a2:	f7ff fc38 	bl	8001e16 <LL_RCC_LSI1_IsReady>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f1      	beq.n	8002590 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025ac:	f7ff fc45 	bl	8001e3a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe4e 	bl	8001250 <HAL_GetTick>
 80025b4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025b8:	f7fe fe4a 	bl	8001250 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1bd      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025ca:	f7ff fc58 	bl	8001e7e <LL_RCC_LSI2_IsReady>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f1      	beq.n	80025b8 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fc62 	bl	8001ea2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80025de:	f7ff fc09 	bl	8001df4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fe35 	bl	8001250 <HAL_GetTick>
 80025e6:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025ea:	f7fe fe31 	bl	8001250 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1a4      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025fc:	f7ff fc0b 	bl	8001e16 <LL_RCC_LSI1_IsReady>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f1      	bne.n	80025ea <HAL_RCC_OscConfig+0x34e>
 8002606:	e050      	b.n	80026aa <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002608:	f7ff fbe3 	bl	8001dd2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fe20 	bl	8001250 <HAL_GetTick>
 8002610:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002614:	f7fe fe1c 	bl	8001250 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d904      	bls.n	800262c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e18f      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
 8002626:	bf00      	nop
 8002628:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 800262c:	f7ff fbf3 	bl	8001e16 <LL_RCC_LSI1_IsReady>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002636:	f7ff fc11 	bl	8001e5c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800263c:	f7fe fe08 	bl	8001250 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b03      	cmp	r3, #3
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e17b      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800264e:	f7ff fc16 	bl	8001e7e <LL_RCC_LSI2_IsReady>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f1      	bne.n	800263c <HAL_RCC_OscConfig+0x3a0>
 8002658:	e027      	b.n	80026aa <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800265a:	f7ff fbff 	bl	8001e5c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe fdf7 	bl	8001250 <HAL_GetTick>
 8002662:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002666:	f7fe fdf3 	bl	8001250 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b03      	cmp	r3, #3
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e166      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002678:	f7ff fc01 	bl	8001e7e <LL_RCC_LSI2_IsReady>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f1      	bne.n	8002666 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002682:	f7ff fbb7 	bl	8001df4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7fe fde3 	bl	8001250 <HAL_GetTick>
 800268a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800268e:	f7fe fddf 	bl	8001250 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e152      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026a0:	f7ff fbb9 	bl	8001e16 <LL_RCC_LSI1_IsReady>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f1      	bne.n	800268e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d05b      	beq.n	800276e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b6:	4ba6      	ldr	r3, [pc, #664]	; (8002950 <HAL_RCC_OscConfig+0x6b4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d114      	bne.n	80026ec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026c2:	f7ff fa39 	bl	8001b38 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fdc3 	bl	8001250 <HAL_GetTick>
 80026ca:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe fdbf 	bl	8001250 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e132      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e0:	4b9b      	ldr	r3, [pc, #620]	; (8002950 <HAL_RCC_OscConfig+0x6b4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_OscConfig+0x45e>
 80026f4:	f7ff fb17 	bl	8001d26 <LL_RCC_LSE_Enable>
 80026f8:	e00c      	b.n	8002714 <HAL_RCC_OscConfig+0x478>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d104      	bne.n	800270c <HAL_RCC_OscConfig+0x470>
 8002702:	f7ff fb32 	bl	8001d6a <LL_RCC_LSE_EnableBypass>
 8002706:	f7ff fb0e 	bl	8001d26 <LL_RCC_LSE_Enable>
 800270a:	e003      	b.n	8002714 <HAL_RCC_OscConfig+0x478>
 800270c:	f7ff fb1c 	bl	8001d48 <LL_RCC_LSE_Disable>
 8002710:	f7ff fb3c 	bl	8001d8c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d014      	beq.n	8002746 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe fd98 	bl	8001250 <HAL_GetTick>
 8002720:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe fd94 	bl	8001250 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e105      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800273a:	f7ff fb38 	bl	8001dae <LL_RCC_LSE_IsReady>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ef      	beq.n	8002724 <HAL_RCC_OscConfig+0x488>
 8002744:	e013      	b.n	800276e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe fd83 	bl	8001250 <HAL_GetTick>
 800274a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe fd7f 	bl	8001250 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0f0      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002764:	f7ff fb23 	bl	8001dae <LL_RCC_LSE_IsReady>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ef      	bne.n	800274e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d02c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d014      	beq.n	80027ac <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002782:	f7ff fa9c 	bl	8001cbe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fe fd63 	bl	8001250 <HAL_GetTick>
 800278a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800278e:	f7fe fd5f 	bl	8001250 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0d2      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027a0:	f7ff faaf 	bl	8001d02 <LL_RCC_HSI48_IsReady>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f1      	beq.n	800278e <HAL_RCC_OscConfig+0x4f2>
 80027aa:	e013      	b.n	80027d4 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ac:	f7ff fa98 	bl	8001ce0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fd4e 	bl	8001250 <HAL_GetTick>
 80027b4:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b8:	f7fe fd4a 	bl	8001250 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0bd      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027ca:	f7ff fa9a 	bl	8001d02 <LL_RCC_HSI48_IsReady>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f1      	bne.n	80027b8 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80b3 	beq.w	8002944 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027de:	f7ff fbf8 	bl	8001fd2 <LL_RCC_GetSysClkSource>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d076      	beq.n	80028d6 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d14b      	bne.n	8002888 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	f7ff fca5 	bl	800213e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fd2c 	bl	8001250 <HAL_GetTick>
 80027f8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fd28 	bl	8001250 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e09b      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800280e:	f7ff fca5 	bl	800215c <LL_RCC_PLL_IsReady>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f1      	bne.n	80027fc <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <HAL_RCC_OscConfig+0x6b8>)
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800282a:	4311      	orrs	r1, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002830:	0212      	lsls	r2, r2, #8
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002844:	430a      	orrs	r2, r1
 8002846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800284a:	4313      	orrs	r3, r2
 800284c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284e:	f7ff fc67 	bl	8002120 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002860:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fcf5 	bl	8001250 <HAL_GetTick>
 8002866:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fcf1 	bl	8001250 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e064      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800287c:	f7ff fc6e 	bl	800215c <LL_RCC_PLL_IsReady>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f1      	beq.n	800286a <HAL_RCC_OscConfig+0x5ce>
 8002886:	e05d      	b.n	8002944 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	f7ff fc59 	bl	800213e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fcce 	bl	8001250 <HAL_GetTick>
 80028b4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe fcca 	bl	8001250 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e03d      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028ca:	f7ff fc47 	bl	800215c <LL_RCC_PLL_IsReady>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f1      	bne.n	80028b8 <HAL_RCC_OscConfig+0x61c>
 80028d4:	e036      	b.n	8002944 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e031      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d123      	bne.n	8002940 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d11c      	bne.n	8002940 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d114      	bne.n	8002940 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	372c      	adds	r7, #44	; 0x2c
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	bf00      	nop
 8002950:	58000400 	.word	0x58000400
 8002954:	11c1808c 	.word	0x11c1808c

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e12a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b97      	ldr	r3, [pc, #604]	; (8002bcc <HAL_RCC_ClockConfig+0x274>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d91b      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b94      	ldr	r3, [pc, #592]	; (8002bcc <HAL_RCC_ClockConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	4992      	ldr	r1, [pc, #584]	; (8002bcc <HAL_RCC_ClockConfig+0x274>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298a:	f7fe fc61 	bl	8001250 <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002992:	f7fe fc5d 	bl	8001250 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e10e      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a4:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCC_ClockConfig+0x274>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d1ef      	bne.n	8002992 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d016      	beq.n	80029ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fb11 	bl	8001fea <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029c8:	f7fe fc42 	bl	8001250 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029d0:	f7fe fc3e 	bl	8001250 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0ef      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029e2:	f7ff fbfe 	bl	80021e2 <LL_RCC_IsActiveFlag_HPRE>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f1      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d016      	beq.n	8002a26 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fb08 	bl	8002012 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a02:	f7fe fc25 	bl	8001250 <HAL_GetTick>
 8002a06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a0a:	f7fe fc21 	bl	8001250 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0d2      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a1c:	f7ff fbf3 	bl	8002206 <LL_RCC_IsActiveFlag_C2HPRE>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f1      	beq.n	8002a0a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d016      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fb01 	bl	800203e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fc08 	bl	8001250 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a44:	f7fe fc04 	bl	8001250 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0b5      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a56:	f7ff fbe9 	bl	800222c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f1      	beq.n	8002a44 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d016      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fafb 	bl	800206c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fbeb 	bl	8001250 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a7e:	f7fe fbe7 	bl	8001250 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e098      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a90:	f7ff fbdf 	bl	8002252 <LL_RCC_IsActiveFlag_PPRE1>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f1      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d017      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff faf1 	bl	8002094 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe fbcd 	bl	8001250 <HAL_GetTick>
 8002ab6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aba:	f7fe fbc9 	bl	8001250 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e07a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002acc:	f7ff fbd3 	bl	8002276 <LL_RCC_IsActiveFlag_PPRE2>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f1      	beq.n	8002aba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d043      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002aea:	f7ff f891 	bl	8001c10 <LL_RCC_HSE_IsReady>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11e      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e064      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b00:	f7ff fb2c 	bl	800215c <LL_RCC_PLL_IsReady>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e059      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b16:	f7ff f9f9 	bl	8001f0c <LL_RCC_MSI_IsReady>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d108      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e04e      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b24:	f7ff f8a4 	bl	8001c70 <LL_RCC_HSI_IsReady>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e047      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fa37 	bl	8001faa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fb88 	bl	8001250 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fb84 	bl	8001250 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e033      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	f7ff fa3a 	bl	8001fd2 <LL_RCC_GetSysClkSource>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d1ec      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_RCC_ClockConfig+0x274>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d21b      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_RCC_ClockConfig+0x274>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 0207 	bic.w	r2, r3, #7
 8002b80:	4912      	ldr	r1, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x274>)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b88:	f7fe fb62 	bl	8001250 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b90:	f7fe fb5e 	bl	8001250 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e00f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_RCC_ClockConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1ef      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002bb0:	f7fe fa08 	bl	8000fc4 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002bb4:	f7fe fb58 	bl	8001268 <HAL_GetTickPrio>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fafc 	bl	80011b8 <HAL_InitTick>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	58004000 	.word	0x58004000

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd6:	f7ff f9fc 	bl	8001fd2 <LL_RCC_GetSysClkSource>
 8002bda:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002be2:	f7ff f9b8 	bl	8001f56 <LL_RCC_MSI_GetRange>
 8002be6:	4603      	mov	r3, r0
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e04a      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e044      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d10a      	bne.n	8002c20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c0a:	f7fe ffb3 	bl	8001b74 <LL_RCC_HSE_IsEnabledDiv2>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e039      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e036      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c20:	f7ff fad3 	bl	80021ca <LL_RCC_PLL_GetMainSource>
 8002c24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d002      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x62>
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d003      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x68>
 8002c30:	e00d      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c34:	60bb      	str	r3, [r7, #8]
        break;
 8002c36:	e015      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c38:	f7fe ff9c 	bl	8001b74 <LL_RCC_HSE_IsEnabledDiv2>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c44:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c46:	e00d      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c4a:	60bb      	str	r3, [r7, #8]
        break;
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c4e:	f7ff f982 	bl	8001f56 <LL_RCC_MSI_GetRange>
 8002c52:	4603      	mov	r3, r0
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	60bb      	str	r3, [r7, #8]
        break;
 8002c62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002c64:	f7ff fa8c 	bl	8002180 <LL_RCC_PLL_GetN>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	fb03 f402 	mul.w	r4, r3, r2
 8002c70:	f7ff fa9f 	bl	80021b2 <LL_RCC_PLL_GetDivider>
 8002c74:	4603      	mov	r3, r0
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	3301      	adds	r3, #1
 8002c7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c7e:	f7ff fa8c 	bl	800219a <LL_RCC_PLL_GetR>
 8002c82:	4603      	mov	r3, r0
 8002c84:	0f5b      	lsrs	r3, r3, #29
 8002c86:	3301      	adds	r3, #1
 8002c88:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c8c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	08009198 	.word	0x08009198
 8002c9c:	00f42400 	.word	0x00f42400
 8002ca0:	01e84800 	.word	0x01e84800

08002ca4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b598      	push	{r3, r4, r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ca8:	f7ff ff92 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002cac:	4604      	mov	r4, r0
 8002cae:	f7ff fa05 	bl	80020bc <LL_RCC_GetAHBPrescaler>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	4a03      	ldr	r2, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd98      	pop	{r3, r4, r7, pc}
 8002cc8:	08009138 	.word	0x08009138

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b598      	push	{r3, r4, r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cd0:	f7ff ffe8 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	f7ff fa0b 	bl	80020f0 <LL_RCC_GetAPB1Prescaler>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd98      	pop	{r3, r4, r7, pc}
 8002cf4:	08009178 	.word	0x08009178

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b598      	push	{r3, r4, r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002cfc:	f7ff ffd2 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002d00:	4604      	mov	r4, r0
 8002d02:	f7ff fa01 	bl	8002108 <LL_RCC_GetAPB2Prescaler>
 8002d06:	4603      	mov	r3, r0
 8002d08:	0adb      	lsrs	r3, r3, #11
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd98      	pop	{r3, r4, r7, pc}
 8002d20:	08009178 	.word	0x08009178

08002d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2bb0      	cmp	r3, #176	; 0xb0
 8002d30:	d903      	bls.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e007      	b.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d4a:	f7ff f9c3 	bl	80020d4 <LL_RCC_GetAHB4Prescaler>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	0c9c      	lsrs	r4, r3, #18
 8002d6e:	f7fe fef3 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4619      	mov	r1, r3
 8002d76:	4620      	mov	r0, r4
 8002d78:	f000 f80c 	bl	8002d94 <RCC_SetFlashLatency>
 8002d7c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	08009198 	.word	0x08009198
 8002d8c:	08009138 	.word	0x08009138
 8002d90:	431bde83 	.word	0x431bde83

08002d94 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b093      	sub	sp, #76	; 0x4c
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <RCC_SetFlashLatency+0xf0>)
 8002da0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002daa:	4a37      	ldr	r2, [pc, #220]	; (8002e88 <RCC_SetFlashLatency+0xf4>)
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002db2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002db6:	4b35      	ldr	r3, [pc, #212]	; (8002e8c <RCC_SetFlashLatency+0xf8>)
 8002db8:	f107 040c 	add.w	r4, r7, #12
 8002dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dcc:	d11c      	bne.n	8002e08 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002dd2:	e015      	b.n	8002e00 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002ddc:	4413      	add	r3, r2
 8002dde:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d808      	bhi.n	8002dfa <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002df0:	4413      	add	r3, r2
 8002df2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002df6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002df8:	e022      	b.n	8002e40 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8002e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d9e6      	bls.n	8002dd4 <RCC_SetFlashLatency+0x40>
 8002e06:	e01b      	b.n	8002e40 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0c:	e015      	b.n	8002e3a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e16:	4413      	add	r3, r2
 8002e18:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d808      	bhi.n	8002e34 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e30:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e32:	e005      	b.n	8002e40 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e36:	3301      	adds	r3, #1
 8002e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d9e6      	bls.n	8002e0e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <RCC_SetFlashLatency+0xfc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 0207 	bic.w	r2, r3, #7
 8002e48:	4911      	ldr	r1, [pc, #68]	; (8002e90 <RCC_SetFlashLatency+0xfc>)
 8002e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e50:	f7fe f9fe 	bl	8001250 <HAL_GetTick>
 8002e54:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e56:	e008      	b.n	8002e6a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e58:	f7fe f9fa 	bl	8001250 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e007      	b.n	8002e7a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <RCC_SetFlashLatency+0xfc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1ef      	bne.n	8002e58 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	374c      	adds	r7, #76	; 0x4c
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	080054fc 	.word	0x080054fc
 8002e88:	0800550c 	.word	0x0800550c
 8002e8c:	08005518 	.word	0x08005518
 8002e90:	58004000 	.word	0x58004000

08002e94 <LL_RCC_LSE_IsEnabled>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <LL_RCC_LSE_IsEnabled+0x18>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <LL_RCC_LSE_IsEnabled+0x1a>
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_RCC_LSE_IsReady>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d101      	bne.n	8002ed0 <LL_RCC_LSE_IsReady+0x18>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <LL_RCC_LSE_IsReady+0x1a>
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_MSI_EnablePLLMode>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eea:	f043 0304 	orr.w	r3, r3, #4
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_SetRFWKPClockSource>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_SetSMPSClockSource>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f023 0203 	bic.w	r2, r3, #3
 8002f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_RCC_SetSMPSPrescaler>:
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_RCC_SetUSARTClockSource>:
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f023 0203 	bic.w	r2, r3, #3
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_SetLPUARTClockSource>:
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_RCC_SetI2CClockSource>:
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	401a      	ands	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_RCC_SetLPTIMClockSource>:
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_RCC_SetSAIClockSource>:
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_RCC_SetRNGClockSource>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003078:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800307c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_RCC_SetCLK48ClockSource>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_SetUSBClockSource>:
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ffe3 	bl	8003094 <LL_RCC_SetCLK48ClockSource>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <LL_RCC_SetADCClockSource>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_RCC_SetRTCClockSource>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_RCC_GetRTCClockSource>:
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_RCC_ForceBackupDomainReset>:
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <LL_RCC_ReleaseBackupDomainReset>:
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800317a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_RCC_PLLSAI1_Enable>:
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_RCC_PLLSAI1_Disable>:
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031bc:	6013      	str	r3, [r2, #0]
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_RCC_PLLSAI1_IsReady>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031da:	d101      	bne.n	80031e0 <LL_RCC_PLLSAI1_IsReady+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d033      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003210:	d00c      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003216:	d802      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800321c:	e017      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800321e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003222:	d017      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003224:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003228:	d016      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800322a:	e010      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800323c:	e00d      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f94d 	bl	80034e2 <RCCEx_PLLSAI1_ConfigNP>
 8003248:	4603      	mov	r3, r0
 800324a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800324c:	e005      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	77fb      	strb	r3, [r7, #31]
        break;
 8003252:	e002      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003254:	bf00      	nop
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800325a:	7ffb      	ldrb	r3, [r7, #31]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fee9 	bl	800303c <LL_RCC_SetSAIClockSource>
 800326a:	e001      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7ffb      	ldrb	r3, [r7, #31]
 800326e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003278:	2b00      	cmp	r3, #0
 800327a:	d046      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800327c:	f7ff ff57 	bl	800312e <LL_RCC_GetRTCClockSource>
 8003280:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	429a      	cmp	r2, r3
 800328a:	d03c      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800328c:	f7fe fc54 	bl	8001b38 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff31 	bl	8003102 <LL_RCC_SetRTCClockSource>
 80032a0:	e02e      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80032ac:	f7ff ff4c 	bl	8003148 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80032b0:	f7ff ff5b 	bl	800316a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80032c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80032cc:	f7ff fde2 	bl	8002e94 <LL_RCC_LSE_IsEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d114      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032d6:	f7fd ffbb 	bl	8001250 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80032dc:	e00b      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fd ffb7 	bl	8001250 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d902      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	77fb      	strb	r3, [r7, #31]
              break;
 80032f4:	e004      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80032f6:	f7ff fddf 	bl	8002eb8 <LL_RCC_LSE_IsReady>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d1ee      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003300:	7ffb      	ldrb	r3, [r7, #31]
 8003302:	77bb      	strb	r3, [r7, #30]
 8003304:	e001      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003306:	7ffb      	ldrb	r3, [r7, #31]
 8003308:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fe2b 	bl	8002f76 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fe36 	bl	8002fa2 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fe5e 	bl	8003008 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fe53 	bl	8003008 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fe2b 	bl	8002fce <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fe20 	bl	8002fce <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d022      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe8e 	bl	80030c0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ac:	d107      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80033ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f8e3 	bl	8003598 <RCCEx_PLLSAI1_ConfigNQ>
 80033d2:	4603      	mov	r3, r0
 80033d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033d6:	7ffb      	ldrb	r3, [r7, #31]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
 80033de:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d008      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033fe:	d003      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fe2b 	bl	8003068 <LL_RCC_SetRNGClockSource>
 8003412:	e00a      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	2000      	movs	r0, #0
 8003420:	f7ff fe22 	bl	8003068 <LL_RCC_SetRNGClockSource>
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7ff fe35 	bl	8003094 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003432:	d107      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d022      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fe3e 	bl	80030d6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003462:	d107      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003472:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800347c:	d10b      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f8e3 	bl	800364e <RCCEx_PLLSAI1_ConfigNR>
 8003488:	4603      	mov	r3, r0
 800348a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800348c:	7ffb      	ldrb	r3, [r7, #31]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8003492:	7ffb      	ldrb	r3, [r7, #31]
 8003494:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fd27 	bl	8002efa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fd46 	bl	8002f4e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fd2d 	bl	8002f26 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 80034cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80034da:	f7ff fcff 	bl	8002edc <LL_RCC_MSI_EnablePLLMode>
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034ee:	f7ff fe5c 	bl	80031aa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034f2:	f7fd fead 	bl	8001250 <HAL_GetTick>
 80034f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034f8:	e009      	b.n	800350e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034fa:	f7fd fea9 	bl	8001250 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d902      	bls.n	800350e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	73fb      	strb	r3, [r7, #15]
      break;
 800350c:	e004      	b.n	8003518 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800350e:	f7ff fe5b 	bl	80031c8 <LL_RCC_PLLSAI1_IsReady>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d137      	bne.n	800358e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003532:	4313      	orrs	r3, r2
 8003534:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003548:	4313      	orrs	r3, r2
 800354a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800354c:	f7ff fe1e 	bl	800318c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003550:	f7fd fe7e 	bl	8001250 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003556:	e009      	b.n	800356c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003558:	f7fd fe7a 	bl	8001250 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d902      	bls.n	800356c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	73fb      	strb	r3, [r7, #15]
        break;
 800356a:	e004      	b.n	8003576 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800356c:	f7ff fe2c 	bl	80031c8 <LL_RCC_PLLSAI1_IsReady>
 8003570:	4603      	mov	r3, r0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d1f0      	bne.n	8003558 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d108      	bne.n	800358e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800358a:	4313      	orrs	r3, r2
 800358c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035a4:	f7ff fe01 	bl	80031aa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035a8:	f7fd fe52 	bl	8001250 <HAL_GetTick>
 80035ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035ae:	e009      	b.n	80035c4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035b0:	f7fd fe4e 	bl	8001250 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d902      	bls.n	80035c4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	73fb      	strb	r3, [r7, #15]
      break;
 80035c2:	e004      	b.n	80035ce <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035c4:	f7ff fe00 	bl	80031c8 <LL_RCC_PLLSAI1_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d137      	bne.n	8003644 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035e8:	4313      	orrs	r3, r2
 80035ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035fe:	4313      	orrs	r3, r2
 8003600:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003602:	f7ff fdc3 	bl	800318c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003606:	f7fd fe23 	bl	8001250 <HAL_GetTick>
 800360a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800360c:	e009      	b.n	8003622 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360e:	f7fd fe1f 	bl	8001250 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d902      	bls.n	8003622 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	73fb      	strb	r3, [r7, #15]
        break;
 8003620:	e004      	b.n	800362c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003622:	f7ff fdd1 	bl	80031c8 <LL_RCC_PLLSAI1_IsReady>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d1f0      	bne.n	800360e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003640:	4313      	orrs	r3, r2
 8003642:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800365a:	f7ff fda6 	bl	80031aa <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800365e:	f7fd fdf7 	bl	8001250 <HAL_GetTick>
 8003662:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003664:	e009      	b.n	800367a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003666:	f7fd fdf3 	bl	8001250 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d902      	bls.n	800367a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e004      	b.n	8003684 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800367a:	f7ff fda5 	bl	80031c8 <LL_RCC_PLLSAI1_IsReady>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d137      	bne.n	80036fa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800368a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369e:	4313      	orrs	r3, r2
 80036a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b4:	4313      	orrs	r3, r2
 80036b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036b8:	f7ff fd68 	bl	800318c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fd fdc8 	bl	8001250 <HAL_GetTick>
 80036c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036c2:	e009      	b.n	80036d8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c4:	f7fd fdc4 	bl	8001250 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d902      	bls.n	80036d8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	73fb      	strb	r3, [r7, #15]
        break;
 80036d6:	e004      	b.n	80036e2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036d8:	f7ff fd76 	bl	80031c8 <LL_RCC_PLLSAI1_IsReady>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d1f0      	bne.n	80036c4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d108      	bne.n	80036fa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f6:	4313      	orrs	r3, r2
 80036f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07c      	b.n	8003810 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7fd faed 	bl	8000d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003756:	d902      	bls.n	800375e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e002      	b.n	8003764 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800375e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800376c:	d007      	beq.n	800377e <HAL_SPI_Init+0x7a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003776:	d002      	beq.n	800377e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800378e:	d903      	bls.n	8003798 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
 8003796:	e002      	b.n	800379e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	ea42 0103 	orr.w	r1, r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0204 	and.w	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	ea42 0103 	orr.w	r1, r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_SPI_Transmit+0x22>
 8003836:	2302      	movs	r3, #2
 8003838:	e150      	b.n	8003adc <HAL_SPI_Transmit+0x2c4>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003842:	f7fd fd05 	bl	8001250 <HAL_GetTick>
 8003846:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d002      	beq.n	800385e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003858:	2302      	movs	r3, #2
 800385a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800385c:	e135      	b.n	8003aca <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_SPI_Transmit+0x52>
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800386e:	e12c      	b.n	8003aca <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2203      	movs	r2, #3
 8003874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d107      	bne.n	80038cc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d007      	beq.n	80038ea <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f2:	d94b      	bls.n	800398c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_Transmit+0xea>
 80038fc:	8afb      	ldrh	r3, [r7, #22]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d13e      	bne.n	8003980 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	1c9a      	adds	r2, r3, #2
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003926:	e02b      	b.n	8003980 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d112      	bne.n	800395c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	1c9a      	adds	r2, r3, #2
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800395a:	e011      	b.n	8003980 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395c:	f7fd fc78 	bl	8001250 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d803      	bhi.n	8003974 <HAL_SPI_Transmit+0x15c>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d102      	bne.n	800397a <HAL_SPI_Transmit+0x162>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800397e:	e0a4      	b.n	8003aca <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ce      	bne.n	8003928 <HAL_SPI_Transmit+0x110>
 800398a:	e07c      	b.n	8003a86 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_SPI_Transmit+0x182>
 8003994:	8afb      	ldrh	r3, [r7, #22]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d170      	bne.n	8003a7c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d912      	bls.n	80039ca <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	881a      	ldrh	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	1c9a      	adds	r2, r3, #2
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b02      	subs	r3, #2
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039c8:	e058      	b.n	8003a7c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	7812      	ldrb	r2, [r2, #0]
 80039d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039f0:	e044      	b.n	8003a7c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d12b      	bne.n	8003a58 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d912      	bls.n	8003a30 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	1c9a      	adds	r2, r3, #2
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b02      	subs	r3, #2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a2e:	e025      	b.n	8003a7c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	7812      	ldrb	r2, [r2, #0]
 8003a3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a56:	e011      	b.n	8003a7c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a58:	f7fd fbfa 	bl	8001250 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d803      	bhi.n	8003a70 <HAL_SPI_Transmit+0x258>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d102      	bne.n	8003a76 <HAL_SPI_Transmit+0x25e>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a7a:	e026      	b.n	8003aca <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1b5      	bne.n	80039f2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f901 	bl	8003c92 <SPI_EndRxTxTransaction>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e000      	b.n	8003aca <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003ac8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af4:	e04c      	b.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d048      	beq.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003afe:	f7fd fba7 	bl	8001250 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d902      	bls.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d13d      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2c:	d111      	bne.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b36:	d004      	beq.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b40:	d107      	bne.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5a:	d10f      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e00f      	b.n	8003bb0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d1a3      	bne.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bc6:	e057      	b.n	8003c78 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bce:	d106      	bne.n	8003bde <SPI_WaitFifoStateUntilTimeout+0x26>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d048      	beq.n	8003c78 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003be6:	f7fd fb33 	bl	8001250 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d902      	bls.n	8003bfc <SPI_WaitFifoStateUntilTimeout+0x44>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13d      	bne.n	8003c78 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c14:	d111      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0x82>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1e:	d004      	beq.n	8003c2a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c28:	d107      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c42:	d10f      	bne.n	8003c64 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e008      	b.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d19f      	bne.n	8003bc8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af02      	add	r7, sp, #8
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff ff84 	bl	8003bb8 <SPI_WaitFifoStateUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	f043 0220 	orr.w	r2, r3, #32
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e027      	b.n	8003d16 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff ff07 	bl	8003ae4 <SPI_WaitFlagStateUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e014      	b.n	8003d16 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff ff5d 	bl	8003bb8 <SPI_WaitFifoStateUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e000      	b.n	8003d16 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <LL_RCC_GetUSARTClockSource>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4013      	ands	r3, r2
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_RCC_GetLPUARTClockSource>:
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4013      	ands	r3, r2
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e042      	b.n	8003df6 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd f83a 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f82d 	bl	8003e00 <UART_SetConfig>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e022      	b.n	8003df6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f001 f885 	bl	8004ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ddc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f001 f90c 	bl	800500c <UART_CheckIdleState>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e04:	b08a      	sub	sp, #40	; 0x28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	4313      	orrs	r3, r2
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4ba4      	ldr	r3, [pc, #656]	; (80040d0 <UART_SetConfig+0x2d0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a99      	ldr	r2, [pc, #612]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	f023 010f 	bic.w	r1, r3, #15
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a8a      	ldr	r2, [pc, #552]	; (80040d8 <UART_SetConfig+0x2d8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d126      	bne.n	8003f02 <UART_SetConfig+0x102>
 8003eb4:	2003      	movs	r0, #3
 8003eb6:	f7ff ff32 	bl	8003d1e <LL_RCC_GetUSARTClockSource>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d81b      	bhi.n	8003ef8 <UART_SetConfig+0xf8>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <UART_SetConfig+0xc8>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ee9 	.word	0x08003ee9
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ef1 	.word	0x08003ef1
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e042      	b.n	8003f66 <UART_SetConfig+0x166>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e03e      	b.n	8003f66 <UART_SetConfig+0x166>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e03a      	b.n	8003f66 <UART_SetConfig+0x166>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e036      	b.n	8003f66 <UART_SetConfig+0x166>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	bf00      	nop
 8003f00:	e031      	b.n	8003f66 <UART_SetConfig+0x166>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a73      	ldr	r2, [pc, #460]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d129      	bne.n	8003f60 <UART_SetConfig+0x160>
 8003f0c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003f10:	f7ff ff15 	bl	8003d3e <LL_RCC_GetLPUARTClockSource>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d014      	beq.n	8003f46 <UART_SetConfig+0x146>
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	d802      	bhi.n	8003f28 <UART_SetConfig+0x128>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <UART_SetConfig+0x136>
 8003f26:	e016      	b.n	8003f56 <UART_SetConfig+0x156>
 8003f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2c:	d007      	beq.n	8003f3e <UART_SetConfig+0x13e>
 8003f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f32:	d00c      	beq.n	8003f4e <UART_SetConfig+0x14e>
 8003f34:	e00f      	b.n	8003f56 <UART_SetConfig+0x156>
 8003f36:	2300      	movs	r3, #0
 8003f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3c:	e013      	b.n	8003f66 <UART_SetConfig+0x166>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f44:	e00f      	b.n	8003f66 <UART_SetConfig+0x166>
 8003f46:	2304      	movs	r3, #4
 8003f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4c:	e00b      	b.n	8003f66 <UART_SetConfig+0x166>
 8003f4e:	2308      	movs	r3, #8
 8003f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f54:	e007      	b.n	8003f66 <UART_SetConfig+0x166>
 8003f56:	2310      	movs	r3, #16
 8003f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5c:	bf00      	nop
 8003f5e:	e002      	b.n	8003f66 <UART_SetConfig+0x166>
 8003f60:	2310      	movs	r3, #16
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5a      	ldr	r2, [pc, #360]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	f040 8428 	bne.w	80047c2 <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	f200 8171 	bhi.w	800425e <UART_SetConfig+0x45e>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <UART_SetConfig+0x184>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	0800425f 	.word	0x0800425f
 8003f8c:	0800404b 	.word	0x0800404b
 8003f90:	0800425f 	.word	0x0800425f
 8003f94:	0800410f 	.word	0x0800410f
 8003f98:	0800425f 	.word	0x0800425f
 8003f9c:	0800425f 	.word	0x0800425f
 8003fa0:	0800425f 	.word	0x0800425f
 8003fa4:	080041b1 	.word	0x080041b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003fa8:	f7fe fe90 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d044      	beq.n	8004040 <UART_SetConfig+0x240>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d03e      	beq.n	800403c <UART_SetConfig+0x23c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d038      	beq.n	8004038 <UART_SetConfig+0x238>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d032      	beq.n	8004034 <UART_SetConfig+0x234>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d02c      	beq.n	8004030 <UART_SetConfig+0x230>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d026      	beq.n	800402c <UART_SetConfig+0x22c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d020      	beq.n	8004028 <UART_SetConfig+0x228>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b07      	cmp	r3, #7
 8003fec:	d01a      	beq.n	8004024 <UART_SetConfig+0x224>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d014      	beq.n	8004020 <UART_SetConfig+0x220>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b09      	cmp	r3, #9
 8003ffc:	d00e      	beq.n	800401c <UART_SetConfig+0x21c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b0a      	cmp	r3, #10
 8004004:	d008      	beq.n	8004018 <UART_SetConfig+0x218>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b0b      	cmp	r3, #11
 800400c:	d102      	bne.n	8004014 <UART_SetConfig+0x214>
 800400e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004012:	e016      	b.n	8004042 <UART_SetConfig+0x242>
 8004014:	2301      	movs	r3, #1
 8004016:	e014      	b.n	8004042 <UART_SetConfig+0x242>
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	e012      	b.n	8004042 <UART_SetConfig+0x242>
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	e010      	b.n	8004042 <UART_SetConfig+0x242>
 8004020:	2320      	movs	r3, #32
 8004022:	e00e      	b.n	8004042 <UART_SetConfig+0x242>
 8004024:	2310      	movs	r3, #16
 8004026:	e00c      	b.n	8004042 <UART_SetConfig+0x242>
 8004028:	230c      	movs	r3, #12
 800402a:	e00a      	b.n	8004042 <UART_SetConfig+0x242>
 800402c:	230a      	movs	r3, #10
 800402e:	e008      	b.n	8004042 <UART_SetConfig+0x242>
 8004030:	2308      	movs	r3, #8
 8004032:	e006      	b.n	8004042 <UART_SetConfig+0x242>
 8004034:	2306      	movs	r3, #6
 8004036:	e004      	b.n	8004042 <UART_SetConfig+0x242>
 8004038:	2304      	movs	r3, #4
 800403a:	e002      	b.n	8004042 <UART_SetConfig+0x242>
 800403c:	2302      	movs	r3, #2
 800403e:	e000      	b.n	8004042 <UART_SetConfig+0x242>
 8004040:	2301      	movs	r3, #1
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	617b      	str	r3, [r7, #20]
        break;
 8004048:	e10c      	b.n	8004264 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d05a      	beq.n	8004108 <UART_SetConfig+0x308>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b01      	cmp	r3, #1
 8004058:	d054      	beq.n	8004104 <UART_SetConfig+0x304>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b02      	cmp	r3, #2
 8004060:	d04e      	beq.n	8004100 <UART_SetConfig+0x300>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b03      	cmp	r3, #3
 8004068:	d048      	beq.n	80040fc <UART_SetConfig+0x2fc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2b04      	cmp	r3, #4
 8004070:	d02c      	beq.n	80040cc <UART_SetConfig+0x2cc>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b05      	cmp	r3, #5
 8004078:	d026      	beq.n	80040c8 <UART_SetConfig+0x2c8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b06      	cmp	r3, #6
 8004080:	d020      	beq.n	80040c4 <UART_SetConfig+0x2c4>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b07      	cmp	r3, #7
 8004088:	d01a      	beq.n	80040c0 <UART_SetConfig+0x2c0>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b08      	cmp	r3, #8
 8004090:	d014      	beq.n	80040bc <UART_SetConfig+0x2bc>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b09      	cmp	r3, #9
 8004098:	d00e      	beq.n	80040b8 <UART_SetConfig+0x2b8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b0a      	cmp	r3, #10
 80040a0:	d008      	beq.n	80040b4 <UART_SetConfig+0x2b4>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b0b      	cmp	r3, #11
 80040a8:	d102      	bne.n	80040b0 <UART_SetConfig+0x2b0>
 80040aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040ae:	e02c      	b.n	800410a <UART_SetConfig+0x30a>
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <UART_SetConfig+0x2dc>)
 80040b2:	e02a      	b.n	800410a <UART_SetConfig+0x30a>
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <UART_SetConfig+0x2e0>)
 80040b6:	e028      	b.n	800410a <UART_SetConfig+0x30a>
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <UART_SetConfig+0x2e4>)
 80040ba:	e026      	b.n	800410a <UART_SetConfig+0x30a>
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <UART_SetConfig+0x2e8>)
 80040be:	e024      	b.n	800410a <UART_SetConfig+0x30a>
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <UART_SetConfig+0x2ec>)
 80040c2:	e022      	b.n	800410a <UART_SetConfig+0x30a>
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <UART_SetConfig+0x2f0>)
 80040c6:	e020      	b.n	800410a <UART_SetConfig+0x30a>
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <UART_SetConfig+0x2f4>)
 80040ca:	e01e      	b.n	800410a <UART_SetConfig+0x30a>
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <UART_SetConfig+0x2f8>)
 80040ce:	e01c      	b.n	800410a <UART_SetConfig+0x30a>
 80040d0:	cfff69f3 	.word	0xcfff69f3
 80040d4:	40008000 	.word	0x40008000
 80040d8:	40013800 	.word	0x40013800
 80040dc:	00f42400 	.word	0x00f42400
 80040e0:	0001e848 	.word	0x0001e848
 80040e4:	0003d090 	.word	0x0003d090
 80040e8:	0007a120 	.word	0x0007a120
 80040ec:	000f4240 	.word	0x000f4240
 80040f0:	00145855 	.word	0x00145855
 80040f4:	00186a00 	.word	0x00186a00
 80040f8:	001e8480 	.word	0x001e8480
 80040fc:	4ba6      	ldr	r3, [pc, #664]	; (8004398 <UART_SetConfig+0x598>)
 80040fe:	e004      	b.n	800410a <UART_SetConfig+0x30a>
 8004100:	4ba6      	ldr	r3, [pc, #664]	; (800439c <UART_SetConfig+0x59c>)
 8004102:	e002      	b.n	800410a <UART_SetConfig+0x30a>
 8004104:	4ba6      	ldr	r3, [pc, #664]	; (80043a0 <UART_SetConfig+0x5a0>)
 8004106:	e000      	b.n	800410a <UART_SetConfig+0x30a>
 8004108:	4ba6      	ldr	r3, [pc, #664]	; (80043a4 <UART_SetConfig+0x5a4>)
 800410a:	617b      	str	r3, [r7, #20]
        break;
 800410c:	e0aa      	b.n	8004264 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800410e:	f7fe fd5f 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d044      	beq.n	80041a6 <UART_SetConfig+0x3a6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	2b01      	cmp	r3, #1
 8004122:	d03e      	beq.n	80041a2 <UART_SetConfig+0x3a2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	2b02      	cmp	r3, #2
 800412a:	d038      	beq.n	800419e <UART_SetConfig+0x39e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2b03      	cmp	r3, #3
 8004132:	d032      	beq.n	800419a <UART_SetConfig+0x39a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	2b04      	cmp	r3, #4
 800413a:	d02c      	beq.n	8004196 <UART_SetConfig+0x396>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	2b05      	cmp	r3, #5
 8004142:	d026      	beq.n	8004192 <UART_SetConfig+0x392>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2b06      	cmp	r3, #6
 800414a:	d020      	beq.n	800418e <UART_SetConfig+0x38e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	2b07      	cmp	r3, #7
 8004152:	d01a      	beq.n	800418a <UART_SetConfig+0x38a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	2b08      	cmp	r3, #8
 800415a:	d014      	beq.n	8004186 <UART_SetConfig+0x386>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2b09      	cmp	r3, #9
 8004162:	d00e      	beq.n	8004182 <UART_SetConfig+0x382>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2b0a      	cmp	r3, #10
 800416a:	d008      	beq.n	800417e <UART_SetConfig+0x37e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b0b      	cmp	r3, #11
 8004172:	d102      	bne.n	800417a <UART_SetConfig+0x37a>
 8004174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004178:	e016      	b.n	80041a8 <UART_SetConfig+0x3a8>
 800417a:	2301      	movs	r3, #1
 800417c:	e014      	b.n	80041a8 <UART_SetConfig+0x3a8>
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	e012      	b.n	80041a8 <UART_SetConfig+0x3a8>
 8004182:	2340      	movs	r3, #64	; 0x40
 8004184:	e010      	b.n	80041a8 <UART_SetConfig+0x3a8>
 8004186:	2320      	movs	r3, #32
 8004188:	e00e      	b.n	80041a8 <UART_SetConfig+0x3a8>
 800418a:	2310      	movs	r3, #16
 800418c:	e00c      	b.n	80041a8 <UART_SetConfig+0x3a8>
 800418e:	230c      	movs	r3, #12
 8004190:	e00a      	b.n	80041a8 <UART_SetConfig+0x3a8>
 8004192:	230a      	movs	r3, #10
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x3a8>
 8004196:	2308      	movs	r3, #8
 8004198:	e006      	b.n	80041a8 <UART_SetConfig+0x3a8>
 800419a:	2306      	movs	r3, #6
 800419c:	e004      	b.n	80041a8 <UART_SetConfig+0x3a8>
 800419e:	2304      	movs	r3, #4
 80041a0:	e002      	b.n	80041a8 <UART_SetConfig+0x3a8>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e000      	b.n	80041a8 <UART_SetConfig+0x3a8>
 80041a6:	2301      	movs	r3, #1
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]
        break;
 80041ae:	e059      	b.n	8004264 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d04e      	beq.n	8004256 <UART_SetConfig+0x456>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d047      	beq.n	8004250 <UART_SetConfig+0x450>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d040      	beq.n	800424a <UART_SetConfig+0x44a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d039      	beq.n	8004244 <UART_SetConfig+0x444>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d032      	beq.n	800423e <UART_SetConfig+0x43e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	2b05      	cmp	r3, #5
 80041de:	d02b      	beq.n	8004238 <UART_SetConfig+0x438>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d024      	beq.n	8004232 <UART_SetConfig+0x432>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	2b07      	cmp	r3, #7
 80041ee:	d01d      	beq.n	800422c <UART_SetConfig+0x42c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d016      	beq.n	8004226 <UART_SetConfig+0x426>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d00f      	beq.n	8004220 <UART_SetConfig+0x420>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b0a      	cmp	r3, #10
 8004206:	d008      	beq.n	800421a <UART_SetConfig+0x41a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2b0b      	cmp	r3, #11
 800420e:	d101      	bne.n	8004214 <UART_SetConfig+0x414>
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	e022      	b.n	800425a <UART_SetConfig+0x45a>
 8004214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004218:	e01f      	b.n	800425a <UART_SetConfig+0x45a>
 800421a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800421e:	e01c      	b.n	800425a <UART_SetConfig+0x45a>
 8004220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004224:	e019      	b.n	800425a <UART_SetConfig+0x45a>
 8004226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800422a:	e016      	b.n	800425a <UART_SetConfig+0x45a>
 800422c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004230:	e013      	b.n	800425a <UART_SetConfig+0x45a>
 8004232:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004236:	e010      	b.n	800425a <UART_SetConfig+0x45a>
 8004238:	f640 43cc 	movw	r3, #3276	; 0xccc
 800423c:	e00d      	b.n	800425a <UART_SetConfig+0x45a>
 800423e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004242:	e00a      	b.n	800425a <UART_SetConfig+0x45a>
 8004244:	f241 5355 	movw	r3, #5461	; 0x1555
 8004248:	e007      	b.n	800425a <UART_SetConfig+0x45a>
 800424a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800424e:	e004      	b.n	800425a <UART_SetConfig+0x45a>
 8004250:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004254:	e001      	b.n	800425a <UART_SetConfig+0x45a>
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	617b      	str	r3, [r7, #20]
        break;
 800425c:	e002      	b.n	8004264 <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	76fb      	strb	r3, [r7, #27]
        break;
 8004262:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8604 	beq.w	8004e74 <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	d305      	bcc.n	8004288 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	429a      	cmp	r2, r3
 8004286:	d903      	bls.n	8004290 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	f000 bdf2 	b.w	8004e74 <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8004290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004294:	2b08      	cmp	r3, #8
 8004296:	f200 8281 	bhi.w	800479c <UART_SetConfig+0x99c>
 800429a:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0x4a0>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	0800479d 	.word	0x0800479d
 80042a8:	08004415 	.word	0x08004415
 80042ac:	0800479d 	.word	0x0800479d
 80042b0:	0800450b 	.word	0x0800450b
 80042b4:	0800479d 	.word	0x0800479d
 80042b8:	0800479d 	.word	0x0800479d
 80042bc:	0800479d 	.word	0x0800479d
 80042c0:	08004649 	.word	0x08004649
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80042c4:	f7fe fd02 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80042c8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d070      	beq.n	80043bc <UART_SetConfig+0x5bc>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d067      	beq.n	80043b2 <UART_SetConfig+0x5b2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d05e      	beq.n	80043a8 <UART_SetConfig+0x5a8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d04c      	beq.n	800438c <UART_SetConfig+0x58c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d043      	beq.n	8004382 <UART_SetConfig+0x582>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	2b05      	cmp	r3, #5
 8004300:	d03a      	beq.n	8004378 <UART_SetConfig+0x578>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b06      	cmp	r3, #6
 8004308:	d031      	beq.n	800436e <UART_SetConfig+0x56e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2b07      	cmp	r3, #7
 8004310:	d028      	beq.n	8004364 <UART_SetConfig+0x564>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	2b08      	cmp	r3, #8
 8004318:	d01f      	beq.n	800435a <UART_SetConfig+0x55a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	2b09      	cmp	r3, #9
 8004320:	d016      	beq.n	8004350 <UART_SetConfig+0x550>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	2b0a      	cmp	r3, #10
 8004328:	d00d      	beq.n	8004346 <UART_SetConfig+0x546>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b0b      	cmp	r3, #11
 8004330:	d104      	bne.n	800433c <UART_SetConfig+0x53c>
 8004332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004336:	f04f 0400 	mov.w	r4, #0
 800433a:	e043      	b.n	80043c4 <UART_SetConfig+0x5c4>
 800433c:	f04f 0301 	mov.w	r3, #1
 8004340:	f04f 0400 	mov.w	r4, #0
 8004344:	e03e      	b.n	80043c4 <UART_SetConfig+0x5c4>
 8004346:	f04f 0380 	mov.w	r3, #128	; 0x80
 800434a:	f04f 0400 	mov.w	r4, #0
 800434e:	e039      	b.n	80043c4 <UART_SetConfig+0x5c4>
 8004350:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004354:	f04f 0400 	mov.w	r4, #0
 8004358:	e034      	b.n	80043c4 <UART_SetConfig+0x5c4>
 800435a:	f04f 0320 	mov.w	r3, #32
 800435e:	f04f 0400 	mov.w	r4, #0
 8004362:	e02f      	b.n	80043c4 <UART_SetConfig+0x5c4>
 8004364:	f04f 0310 	mov.w	r3, #16
 8004368:	f04f 0400 	mov.w	r4, #0
 800436c:	e02a      	b.n	80043c4 <UART_SetConfig+0x5c4>
 800436e:	f04f 030c 	mov.w	r3, #12
 8004372:	f04f 0400 	mov.w	r4, #0
 8004376:	e025      	b.n	80043c4 <UART_SetConfig+0x5c4>
 8004378:	f04f 030a 	mov.w	r3, #10
 800437c:	f04f 0400 	mov.w	r4, #0
 8004380:	e020      	b.n	80043c4 <UART_SetConfig+0x5c4>
 8004382:	f04f 0308 	mov.w	r3, #8
 8004386:	f04f 0400 	mov.w	r4, #0
 800438a:	e01b      	b.n	80043c4 <UART_SetConfig+0x5c4>
 800438c:	f04f 0306 	mov.w	r3, #6
 8004390:	f04f 0400 	mov.w	r4, #0
 8004394:	e016      	b.n	80043c4 <UART_SetConfig+0x5c4>
 8004396:	bf00      	nop
 8004398:	0028b0aa 	.word	0x0028b0aa
 800439c:	003d0900 	.word	0x003d0900
 80043a0:	007a1200 	.word	0x007a1200
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	f04f 0304 	mov.w	r3, #4
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	e008      	b.n	80043c4 <UART_SetConfig+0x5c4>
 80043b2:	f04f 0302 	mov.w	r3, #2
 80043b6:	f04f 0400 	mov.w	r4, #0
 80043ba:	e003      	b.n	80043c4 <UART_SetConfig+0x5c4>
 80043bc:	f04f 0301 	mov.w	r3, #1
 80043c0:	f04f 0400 	mov.w	r4, #0
 80043c4:	461a      	mov	r2, r3
 80043c6:	4623      	mov	r3, r4
 80043c8:	f7fb feda 	bl	8000180 <__aeabi_uldivmod>
 80043cc:	4603      	mov	r3, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	4619      	mov	r1, r3
 80043d2:	4622      	mov	r2, r4
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	f04f 0400 	mov.w	r4, #0
 80043dc:	0214      	lsls	r4, r2, #8
 80043de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80043e2:	020b      	lsls	r3, r1, #8
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6852      	ldr	r2, [r2, #4]
 80043e8:	0852      	lsrs	r2, r2, #1
 80043ea:	4611      	mov	r1, r2
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	eb13 0b01 	adds.w	fp, r3, r1
 80043f4:	eb44 0c02 	adc.w	ip, r4, r2
 80043f8:	4658      	mov	r0, fp
 80043fa:	4661      	mov	r1, ip
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	461a      	mov	r2, r3
 8004406:	4623      	mov	r3, r4
 8004408:	f7fb feba 	bl	8000180 <__aeabi_uldivmod>
 800440c:	4603      	mov	r3, r0
 800440e:	460c      	mov	r4, r1
 8004410:	61fb      	str	r3, [r7, #28]
            break;
 8004412:	e1c6      	b.n	80047a2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05b      	beq.n	80044d4 <UART_SetConfig+0x6d4>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2b01      	cmp	r3, #1
 8004422:	d053      	beq.n	80044cc <UART_SetConfig+0x6cc>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b02      	cmp	r3, #2
 800442a:	d04b      	beq.n	80044c4 <UART_SetConfig+0x6c4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b03      	cmp	r3, #3
 8004432:	d043      	beq.n	80044bc <UART_SetConfig+0x6bc>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2b04      	cmp	r3, #4
 800443a:	d03b      	beq.n	80044b4 <UART_SetConfig+0x6b4>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b05      	cmp	r3, #5
 8004442:	d033      	beq.n	80044ac <UART_SetConfig+0x6ac>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b06      	cmp	r3, #6
 800444a:	d02b      	beq.n	80044a4 <UART_SetConfig+0x6a4>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b07      	cmp	r3, #7
 8004452:	d023      	beq.n	800449c <UART_SetConfig+0x69c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b08      	cmp	r3, #8
 800445a:	d01b      	beq.n	8004494 <UART_SetConfig+0x694>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b09      	cmp	r3, #9
 8004462:	d013      	beq.n	800448c <UART_SetConfig+0x68c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b0a      	cmp	r3, #10
 800446a:	d00b      	beq.n	8004484 <UART_SetConfig+0x684>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b0b      	cmp	r3, #11
 8004472:	d103      	bne.n	800447c <UART_SetConfig+0x67c>
 8004474:	4bae      	ldr	r3, [pc, #696]	; (8004730 <UART_SetConfig+0x930>)
 8004476:	f04f 0400 	mov.w	r4, #0
 800447a:	e02e      	b.n	80044da <UART_SetConfig+0x6da>
 800447c:	4bad      	ldr	r3, [pc, #692]	; (8004734 <UART_SetConfig+0x934>)
 800447e:	f04f 0400 	mov.w	r4, #0
 8004482:	e02a      	b.n	80044da <UART_SetConfig+0x6da>
 8004484:	4bac      	ldr	r3, [pc, #688]	; (8004738 <UART_SetConfig+0x938>)
 8004486:	f04f 0400 	mov.w	r4, #0
 800448a:	e026      	b.n	80044da <UART_SetConfig+0x6da>
 800448c:	4bab      	ldr	r3, [pc, #684]	; (800473c <UART_SetConfig+0x93c>)
 800448e:	f04f 0400 	mov.w	r4, #0
 8004492:	e022      	b.n	80044da <UART_SetConfig+0x6da>
 8004494:	4baa      	ldr	r3, [pc, #680]	; (8004740 <UART_SetConfig+0x940>)
 8004496:	f04f 0400 	mov.w	r4, #0
 800449a:	e01e      	b.n	80044da <UART_SetConfig+0x6da>
 800449c:	4ba9      	ldr	r3, [pc, #676]	; (8004744 <UART_SetConfig+0x944>)
 800449e:	f04f 0400 	mov.w	r4, #0
 80044a2:	e01a      	b.n	80044da <UART_SetConfig+0x6da>
 80044a4:	a49e      	add	r4, pc, #632	; (adr r4, 8004720 <UART_SetConfig+0x920>)
 80044a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80044aa:	e016      	b.n	80044da <UART_SetConfig+0x6da>
 80044ac:	4ba6      	ldr	r3, [pc, #664]	; (8004748 <UART_SetConfig+0x948>)
 80044ae:	f04f 0400 	mov.w	r4, #0
 80044b2:	e012      	b.n	80044da <UART_SetConfig+0x6da>
 80044b4:	4ba5      	ldr	r3, [pc, #660]	; (800474c <UART_SetConfig+0x94c>)
 80044b6:	f04f 0400 	mov.w	r4, #0
 80044ba:	e00e      	b.n	80044da <UART_SetConfig+0x6da>
 80044bc:	a49a      	add	r4, pc, #616	; (adr r4, 8004728 <UART_SetConfig+0x928>)
 80044be:	e9d4 3400 	ldrd	r3, r4, [r4]
 80044c2:	e00a      	b.n	80044da <UART_SetConfig+0x6da>
 80044c4:	4ba2      	ldr	r3, [pc, #648]	; (8004750 <UART_SetConfig+0x950>)
 80044c6:	f04f 0400 	mov.w	r4, #0
 80044ca:	e006      	b.n	80044da <UART_SetConfig+0x6da>
 80044cc:	4ba1      	ldr	r3, [pc, #644]	; (8004754 <UART_SetConfig+0x954>)
 80044ce:	f04f 0400 	mov.w	r4, #0
 80044d2:	e002      	b.n	80044da <UART_SetConfig+0x6da>
 80044d4:	4b97      	ldr	r3, [pc, #604]	; (8004734 <UART_SetConfig+0x934>)
 80044d6:	f04f 0400 	mov.w	r4, #0
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6852      	ldr	r2, [r2, #4]
 80044de:	0852      	lsrs	r2, r2, #1
 80044e0:	4611      	mov	r1, r2
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	eb13 0b01 	adds.w	fp, r3, r1
 80044ea:	eb44 0c02 	adc.w	ip, r4, r2
 80044ee:	4658      	mov	r0, fp
 80044f0:	4661      	mov	r1, ip
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f04f 0400 	mov.w	r4, #0
 80044fa:	461a      	mov	r2, r3
 80044fc:	4623      	mov	r3, r4
 80044fe:	f7fb fe3f 	bl	8000180 <__aeabi_uldivmod>
 8004502:	4603      	mov	r3, r0
 8004504:	460c      	mov	r4, r1
 8004506:	61fb      	str	r3, [r7, #28]
            break;
 8004508:	e14b      	b.n	80047a2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800450a:	f7fe fb61 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 800450e:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4618      	mov	r0, r3
 8004514:	f04f 0100 	mov.w	r1, #0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	2b00      	cmp	r3, #0
 800451e:	d067      	beq.n	80045f0 <UART_SetConfig+0x7f0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2b01      	cmp	r3, #1
 8004526:	d05e      	beq.n	80045e6 <UART_SetConfig+0x7e6>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2b02      	cmp	r3, #2
 800452e:	d055      	beq.n	80045dc <UART_SetConfig+0x7dc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	2b03      	cmp	r3, #3
 8004536:	d04c      	beq.n	80045d2 <UART_SetConfig+0x7d2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2b04      	cmp	r3, #4
 800453e:	d043      	beq.n	80045c8 <UART_SetConfig+0x7c8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2b05      	cmp	r3, #5
 8004546:	d03a      	beq.n	80045be <UART_SetConfig+0x7be>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	2b06      	cmp	r3, #6
 800454e:	d031      	beq.n	80045b4 <UART_SetConfig+0x7b4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	2b07      	cmp	r3, #7
 8004556:	d028      	beq.n	80045aa <UART_SetConfig+0x7aa>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	2b08      	cmp	r3, #8
 800455e:	d01f      	beq.n	80045a0 <UART_SetConfig+0x7a0>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2b09      	cmp	r3, #9
 8004566:	d016      	beq.n	8004596 <UART_SetConfig+0x796>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b0a      	cmp	r3, #10
 800456e:	d00d      	beq.n	800458c <UART_SetConfig+0x78c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b0b      	cmp	r3, #11
 8004576:	d104      	bne.n	8004582 <UART_SetConfig+0x782>
 8004578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800457c:	f04f 0400 	mov.w	r4, #0
 8004580:	e03a      	b.n	80045f8 <UART_SetConfig+0x7f8>
 8004582:	f04f 0301 	mov.w	r3, #1
 8004586:	f04f 0400 	mov.w	r4, #0
 800458a:	e035      	b.n	80045f8 <UART_SetConfig+0x7f8>
 800458c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004590:	f04f 0400 	mov.w	r4, #0
 8004594:	e030      	b.n	80045f8 <UART_SetConfig+0x7f8>
 8004596:	f04f 0340 	mov.w	r3, #64	; 0x40
 800459a:	f04f 0400 	mov.w	r4, #0
 800459e:	e02b      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045a0:	f04f 0320 	mov.w	r3, #32
 80045a4:	f04f 0400 	mov.w	r4, #0
 80045a8:	e026      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045aa:	f04f 0310 	mov.w	r3, #16
 80045ae:	f04f 0400 	mov.w	r4, #0
 80045b2:	e021      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045b4:	f04f 030c 	mov.w	r3, #12
 80045b8:	f04f 0400 	mov.w	r4, #0
 80045bc:	e01c      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045be:	f04f 030a 	mov.w	r3, #10
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	e017      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045c8:	f04f 0308 	mov.w	r3, #8
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	e012      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045d2:	f04f 0306 	mov.w	r3, #6
 80045d6:	f04f 0400 	mov.w	r4, #0
 80045da:	e00d      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045dc:	f04f 0304 	mov.w	r3, #4
 80045e0:	f04f 0400 	mov.w	r4, #0
 80045e4:	e008      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045e6:	f04f 0302 	mov.w	r3, #2
 80045ea:	f04f 0400 	mov.w	r4, #0
 80045ee:	e003      	b.n	80045f8 <UART_SetConfig+0x7f8>
 80045f0:	f04f 0301 	mov.w	r3, #1
 80045f4:	f04f 0400 	mov.w	r4, #0
 80045f8:	461a      	mov	r2, r3
 80045fa:	4623      	mov	r3, r4
 80045fc:	f7fb fdc0 	bl	8000180 <__aeabi_uldivmod>
 8004600:	4603      	mov	r3, r0
 8004602:	460c      	mov	r4, r1
 8004604:	4619      	mov	r1, r3
 8004606:	4622      	mov	r2, r4
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	0214      	lsls	r4, r2, #8
 8004612:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004616:	020b      	lsls	r3, r1, #8
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6852      	ldr	r2, [r2, #4]
 800461c:	0852      	lsrs	r2, r2, #1
 800461e:	4611      	mov	r1, r2
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	eb13 0b01 	adds.w	fp, r3, r1
 8004628:	eb44 0c02 	adc.w	ip, r4, r2
 800462c:	4658      	mov	r0, fp
 800462e:	4661      	mov	r1, ip
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	461a      	mov	r2, r3
 800463a:	4623      	mov	r3, r4
 800463c:	f7fb fda0 	bl	8000180 <__aeabi_uldivmod>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	61fb      	str	r3, [r7, #28]
            break;
 8004646:	e0ac      	b.n	80047a2 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8089 	beq.w	8004764 <UART_SetConfig+0x964>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b01      	cmp	r3, #1
 8004658:	d05b      	beq.n	8004712 <UART_SetConfig+0x912>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b02      	cmp	r3, #2
 8004660:	d052      	beq.n	8004708 <UART_SetConfig+0x908>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b03      	cmp	r3, #3
 8004668:	d04a      	beq.n	8004700 <UART_SetConfig+0x900>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b04      	cmp	r3, #4
 8004670:	d041      	beq.n	80046f6 <UART_SetConfig+0x8f6>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b05      	cmp	r3, #5
 8004678:	d039      	beq.n	80046ee <UART_SetConfig+0x8ee>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	2b06      	cmp	r3, #6
 8004680:	d031      	beq.n	80046e6 <UART_SetConfig+0x8e6>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	2b07      	cmp	r3, #7
 8004688:	d028      	beq.n	80046dc <UART_SetConfig+0x8dc>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	2b08      	cmp	r3, #8
 8004690:	d01f      	beq.n	80046d2 <UART_SetConfig+0x8d2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b09      	cmp	r3, #9
 8004698:	d016      	beq.n	80046c8 <UART_SetConfig+0x8c8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b0a      	cmp	r3, #10
 80046a0:	d00d      	beq.n	80046be <UART_SetConfig+0x8be>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b0b      	cmp	r3, #11
 80046a8:	d104      	bne.n	80046b4 <UART_SetConfig+0x8b4>
 80046aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	e05b      	b.n	800476c <UART_SetConfig+0x96c>
 80046b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80046b8:	f04f 0400 	mov.w	r4, #0
 80046bc:	e056      	b.n	800476c <UART_SetConfig+0x96c>
 80046be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c2:	f04f 0400 	mov.w	r4, #0
 80046c6:	e051      	b.n	800476c <UART_SetConfig+0x96c>
 80046c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046cc:	f04f 0400 	mov.w	r4, #0
 80046d0:	e04c      	b.n	800476c <UART_SetConfig+0x96c>
 80046d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046d6:	f04f 0400 	mov.w	r4, #0
 80046da:	e047      	b.n	800476c <UART_SetConfig+0x96c>
 80046dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046e0:	f04f 0400 	mov.w	r4, #0
 80046e4:	e042      	b.n	800476c <UART_SetConfig+0x96c>
 80046e6:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <UART_SetConfig+0x958>)
 80046e8:	f04f 0400 	mov.w	r4, #0
 80046ec:	e03e      	b.n	800476c <UART_SetConfig+0x96c>
 80046ee:	4b1b      	ldr	r3, [pc, #108]	; (800475c <UART_SetConfig+0x95c>)
 80046f0:	f04f 0400 	mov.w	r4, #0
 80046f4:	e03a      	b.n	800476c <UART_SetConfig+0x96c>
 80046f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046fa:	f04f 0400 	mov.w	r4, #0
 80046fe:	e035      	b.n	800476c <UART_SetConfig+0x96c>
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <UART_SetConfig+0x960>)
 8004702:	f04f 0400 	mov.w	r4, #0
 8004706:	e031      	b.n	800476c <UART_SetConfig+0x96c>
 8004708:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800470c:	f04f 0400 	mov.w	r4, #0
 8004710:	e02c      	b.n	800476c <UART_SetConfig+0x96c>
 8004712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004716:	f04f 0400 	mov.w	r4, #0
 800471a:	e027      	b.n	800476c <UART_SetConfig+0x96c>
 800471c:	f3af 8000 	nop.w
 8004720:	14585500 	.word	0x14585500
 8004724:	00000000 	.word	0x00000000
 8004728:	28b0aa00 	.word	0x28b0aa00
 800472c:	00000000 	.word	0x00000000
 8004730:	00f42400 	.word	0x00f42400
 8004734:	f4240000 	.word	0xf4240000
 8004738:	01e84800 	.word	0x01e84800
 800473c:	03d09000 	.word	0x03d09000
 8004740:	07a12000 	.word	0x07a12000
 8004744:	0f424000 	.word	0x0f424000
 8004748:	186a0000 	.word	0x186a0000
 800474c:	1e848000 	.word	0x1e848000
 8004750:	3d090000 	.word	0x3d090000
 8004754:	7a120000 	.word	0x7a120000
 8004758:	000aaa00 	.word	0x000aaa00
 800475c:	000ccc00 	.word	0x000ccc00
 8004760:	00155500 	.word	0x00155500
 8004764:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6852      	ldr	r2, [r2, #4]
 8004770:	0852      	lsrs	r2, r2, #1
 8004772:	4611      	mov	r1, r2
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	eb13 0b01 	adds.w	fp, r3, r1
 800477c:	eb44 0c02 	adc.w	ip, r4, r2
 8004780:	4658      	mov	r0, fp
 8004782:	4661      	mov	r1, ip
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f04f 0400 	mov.w	r4, #0
 800478c:	461a      	mov	r2, r3
 800478e:	4623      	mov	r3, r4
 8004790:	f7fb fcf6 	bl	8000180 <__aeabi_uldivmod>
 8004794:	4603      	mov	r3, r0
 8004796:	460c      	mov	r4, r1
 8004798:	61fb      	str	r3, [r7, #28]
            break;
 800479a:	e002      	b.n	80047a2 <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	76fb      	strb	r3, [r7, #27]
            break;
 80047a0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a8:	d308      	bcc.n	80047bc <UART_SetConfig+0x9bc>
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b0:	d204      	bcs.n	80047bc <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	60da      	str	r2, [r3, #12]
 80047ba:	e35b      	b.n	8004e74 <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	76fb      	strb	r3, [r7, #27]
 80047c0:	e358      	b.n	8004e74 <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ca:	f040 81a6 	bne.w	8004b1a <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80047ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047d2:	3b01      	subs	r3, #1
 80047d4:	2b07      	cmp	r3, #7
 80047d6:	f200 8180 	bhi.w	8004ada <UART_SetConfig+0xcda>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x9e0>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004801 	.word	0x08004801
 80047e4:	080048b9 	.word	0x080048b9
 80047e8:	08004adb 	.word	0x08004adb
 80047ec:	08004961 	.word	0x08004961
 80047f0:	08004adb 	.word	0x08004adb
 80047f4:	08004adb 	.word	0x08004adb
 80047f8:	08004adb 	.word	0x08004adb
 80047fc:	08004a19 	.word	0x08004a19
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004800:	f7fe fa7a 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8004804:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <UART_SetConfig+0xa98>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b01      	cmp	r3, #1
 8004814:	d03e      	beq.n	8004894 <UART_SetConfig+0xa94>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	2b02      	cmp	r3, #2
 800481c:	d038      	beq.n	8004890 <UART_SetConfig+0xa90>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b03      	cmp	r3, #3
 8004824:	d032      	beq.n	800488c <UART_SetConfig+0xa8c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b04      	cmp	r3, #4
 800482c:	d02c      	beq.n	8004888 <UART_SetConfig+0xa88>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	2b05      	cmp	r3, #5
 8004834:	d026      	beq.n	8004884 <UART_SetConfig+0xa84>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b06      	cmp	r3, #6
 800483c:	d020      	beq.n	8004880 <UART_SetConfig+0xa80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b07      	cmp	r3, #7
 8004844:	d01a      	beq.n	800487c <UART_SetConfig+0xa7c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	2b08      	cmp	r3, #8
 800484c:	d014      	beq.n	8004878 <UART_SetConfig+0xa78>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2b09      	cmp	r3, #9
 8004854:	d00e      	beq.n	8004874 <UART_SetConfig+0xa74>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b0a      	cmp	r3, #10
 800485c:	d008      	beq.n	8004870 <UART_SetConfig+0xa70>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	2b0b      	cmp	r3, #11
 8004864:	d102      	bne.n	800486c <UART_SetConfig+0xa6c>
 8004866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800486a:	e016      	b.n	800489a <UART_SetConfig+0xa9a>
 800486c:	2301      	movs	r3, #1
 800486e:	e014      	b.n	800489a <UART_SetConfig+0xa9a>
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	e012      	b.n	800489a <UART_SetConfig+0xa9a>
 8004874:	2340      	movs	r3, #64	; 0x40
 8004876:	e010      	b.n	800489a <UART_SetConfig+0xa9a>
 8004878:	2320      	movs	r3, #32
 800487a:	e00e      	b.n	800489a <UART_SetConfig+0xa9a>
 800487c:	2310      	movs	r3, #16
 800487e:	e00c      	b.n	800489a <UART_SetConfig+0xa9a>
 8004880:	230c      	movs	r3, #12
 8004882:	e00a      	b.n	800489a <UART_SetConfig+0xa9a>
 8004884:	230a      	movs	r3, #10
 8004886:	e008      	b.n	800489a <UART_SetConfig+0xa9a>
 8004888:	2308      	movs	r3, #8
 800488a:	e006      	b.n	800489a <UART_SetConfig+0xa9a>
 800488c:	2306      	movs	r3, #6
 800488e:	e004      	b.n	800489a <UART_SetConfig+0xa9a>
 8004890:	2304      	movs	r3, #4
 8004892:	e002      	b.n	800489a <UART_SetConfig+0xa9a>
 8004894:	2302      	movs	r3, #2
 8004896:	e000      	b.n	800489a <UART_SetConfig+0xa9a>
 8004898:	2301      	movs	r3, #1
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	005a      	lsls	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	61fb      	str	r3, [r7, #28]
        break;
 80048b6:	e113      	b.n	8004ae0 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d043      	beq.n	8004948 <UART_SetConfig+0xb48>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d03d      	beq.n	8004944 <UART_SetConfig+0xb44>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d037      	beq.n	8004940 <UART_SetConfig+0xb40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d031      	beq.n	800493c <UART_SetConfig+0xb3c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d02b      	beq.n	8004938 <UART_SetConfig+0xb38>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d025      	beq.n	8004934 <UART_SetConfig+0xb34>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	d01f      	beq.n	8004930 <UART_SetConfig+0xb30>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	2b07      	cmp	r3, #7
 80048f6:	d019      	beq.n	800492c <UART_SetConfig+0xb2c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d013      	beq.n	8004928 <UART_SetConfig+0xb28>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	2b09      	cmp	r3, #9
 8004906:	d00d      	beq.n	8004924 <UART_SetConfig+0xb24>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b0a      	cmp	r3, #10
 800490e:	d007      	beq.n	8004920 <UART_SetConfig+0xb20>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	2b0b      	cmp	r3, #11
 8004916:	d101      	bne.n	800491c <UART_SetConfig+0xb1c>
 8004918:	4b8c      	ldr	r3, [pc, #560]	; (8004b4c <UART_SetConfig+0xd4c>)
 800491a:	e016      	b.n	800494a <UART_SetConfig+0xb4a>
 800491c:	4b8c      	ldr	r3, [pc, #560]	; (8004b50 <UART_SetConfig+0xd50>)
 800491e:	e014      	b.n	800494a <UART_SetConfig+0xb4a>
 8004920:	4b8c      	ldr	r3, [pc, #560]	; (8004b54 <UART_SetConfig+0xd54>)
 8004922:	e012      	b.n	800494a <UART_SetConfig+0xb4a>
 8004924:	4b8c      	ldr	r3, [pc, #560]	; (8004b58 <UART_SetConfig+0xd58>)
 8004926:	e010      	b.n	800494a <UART_SetConfig+0xb4a>
 8004928:	4b8c      	ldr	r3, [pc, #560]	; (8004b5c <UART_SetConfig+0xd5c>)
 800492a:	e00e      	b.n	800494a <UART_SetConfig+0xb4a>
 800492c:	4b8c      	ldr	r3, [pc, #560]	; (8004b60 <UART_SetConfig+0xd60>)
 800492e:	e00c      	b.n	800494a <UART_SetConfig+0xb4a>
 8004930:	4b8c      	ldr	r3, [pc, #560]	; (8004b64 <UART_SetConfig+0xd64>)
 8004932:	e00a      	b.n	800494a <UART_SetConfig+0xb4a>
 8004934:	4b8c      	ldr	r3, [pc, #560]	; (8004b68 <UART_SetConfig+0xd68>)
 8004936:	e008      	b.n	800494a <UART_SetConfig+0xb4a>
 8004938:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <UART_SetConfig+0xd6c>)
 800493a:	e006      	b.n	800494a <UART_SetConfig+0xb4a>
 800493c:	4b8c      	ldr	r3, [pc, #560]	; (8004b70 <UART_SetConfig+0xd70>)
 800493e:	e004      	b.n	800494a <UART_SetConfig+0xb4a>
 8004940:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <UART_SetConfig+0xd74>)
 8004942:	e002      	b.n	800494a <UART_SetConfig+0xb4a>
 8004944:	4b8c      	ldr	r3, [pc, #560]	; (8004b78 <UART_SetConfig+0xd78>)
 8004946:	e000      	b.n	800494a <UART_SetConfig+0xb4a>
 8004948:	4b81      	ldr	r3, [pc, #516]	; (8004b50 <UART_SetConfig+0xd50>)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6852      	ldr	r2, [r2, #4]
 800494e:	0852      	lsrs	r2, r2, #1
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	61fb      	str	r3, [r7, #28]
        break;
 800495e:	e0bf      	b.n	8004ae0 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004960:	f7fe f936 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8004964:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d044      	beq.n	80049f8 <UART_SetConfig+0xbf8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b01      	cmp	r3, #1
 8004974:	d03e      	beq.n	80049f4 <UART_SetConfig+0xbf4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b02      	cmp	r3, #2
 800497c:	d038      	beq.n	80049f0 <UART_SetConfig+0xbf0>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b03      	cmp	r3, #3
 8004984:	d032      	beq.n	80049ec <UART_SetConfig+0xbec>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b04      	cmp	r3, #4
 800498c:	d02c      	beq.n	80049e8 <UART_SetConfig+0xbe8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b05      	cmp	r3, #5
 8004994:	d026      	beq.n	80049e4 <UART_SetConfig+0xbe4>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b06      	cmp	r3, #6
 800499c:	d020      	beq.n	80049e0 <UART_SetConfig+0xbe0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b07      	cmp	r3, #7
 80049a4:	d01a      	beq.n	80049dc <UART_SetConfig+0xbdc>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d014      	beq.n	80049d8 <UART_SetConfig+0xbd8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b09      	cmp	r3, #9
 80049b4:	d00e      	beq.n	80049d4 <UART_SetConfig+0xbd4>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b0a      	cmp	r3, #10
 80049bc:	d008      	beq.n	80049d0 <UART_SetConfig+0xbd0>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b0b      	cmp	r3, #11
 80049c4:	d102      	bne.n	80049cc <UART_SetConfig+0xbcc>
 80049c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049ca:	e016      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e014      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	e012      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049d4:	2340      	movs	r3, #64	; 0x40
 80049d6:	e010      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049d8:	2320      	movs	r3, #32
 80049da:	e00e      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049dc:	2310      	movs	r3, #16
 80049de:	e00c      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049e0:	230c      	movs	r3, #12
 80049e2:	e00a      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049e4:	230a      	movs	r3, #10
 80049e6:	e008      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049e8:	2308      	movs	r3, #8
 80049ea:	e006      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049ec:	2306      	movs	r3, #6
 80049ee:	e004      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049f0:	2304      	movs	r3, #4
 80049f2:	e002      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e000      	b.n	80049fa <UART_SetConfig+0xbfa>
 80049f8:	2301      	movs	r3, #1
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	005a      	lsls	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	61fb      	str	r3, [r7, #28]
        break;
 8004a16:	e063      	b.n	8004ae0 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d04f      	beq.n	8004ac0 <UART_SetConfig+0xcc0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d048      	beq.n	8004aba <UART_SetConfig+0xcba>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d041      	beq.n	8004ab4 <UART_SetConfig+0xcb4>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d03a      	beq.n	8004aae <UART_SetConfig+0xcae>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d033      	beq.n	8004aa8 <UART_SetConfig+0xca8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d02c      	beq.n	8004aa2 <UART_SetConfig+0xca2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	2b06      	cmp	r3, #6
 8004a4e:	d025      	beq.n	8004a9c <UART_SetConfig+0xc9c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2b07      	cmp	r3, #7
 8004a56:	d01e      	beq.n	8004a96 <UART_SetConfig+0xc96>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d017      	beq.n	8004a90 <UART_SetConfig+0xc90>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b09      	cmp	r3, #9
 8004a66:	d010      	beq.n	8004a8a <UART_SetConfig+0xc8a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b0a      	cmp	r3, #10
 8004a6e:	d009      	beq.n	8004a84 <UART_SetConfig+0xc84>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	2b0b      	cmp	r3, #11
 8004a76:	d102      	bne.n	8004a7e <UART_SetConfig+0xc7e>
 8004a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a7c:	e022      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a82:	e01f      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a88:	e01c      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8e:	e019      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a94:	e016      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a9a:	e013      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004a9c:	f241 5354 	movw	r3, #5460	; 0x1554
 8004aa0:	e010      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004aa2:	f641 1398 	movw	r3, #6552	; 0x1998
 8004aa6:	e00d      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aac:	e00a      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004aae:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004ab2:	e007      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ab8:	e004      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004abe:	e001      	b.n	8004ac4 <UART_SetConfig+0xcc4>
 8004ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6852      	ldr	r2, [r2, #4]
 8004ac8:	0852      	lsrs	r2, r2, #1
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e002      	b.n	8004ae0 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	76fb      	strb	r3, [r7, #27]
        break;
 8004ade:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	d916      	bls.n	8004b14 <UART_SetConfig+0xd14>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aec:	d212      	bcs.n	8004b14 <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f023 030f 	bic.w	r3, r3, #15
 8004af6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	89fb      	ldrh	r3, [r7, #14]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	89fa      	ldrh	r2, [r7, #14]
 8004b10:	60da      	str	r2, [r3, #12]
 8004b12:	e1af      	b.n	8004e74 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	e1ac      	b.n	8004e74 <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8004b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	2b07      	cmp	r3, #7
 8004b22:	f200 8196 	bhi.w	8004e52 <UART_SetConfig+0x1052>
 8004b26:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0xd2c>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b7d 	.word	0x08004b7d
 8004b30:	08004c33 	.word	0x08004c33
 8004b34:	08004e53 	.word	0x08004e53
 8004b38:	08004cdd 	.word	0x08004cdd
 8004b3c:	08004e53 	.word	0x08004e53
 8004b40:	08004e53 	.word	0x08004e53
 8004b44:	08004e53 	.word	0x08004e53
 8004b48:	08004d93 	.word	0x08004d93
 8004b4c:	0001e848 	.word	0x0001e848
 8004b50:	01e84800 	.word	0x01e84800
 8004b54:	0003d090 	.word	0x0003d090
 8004b58:	0007a120 	.word	0x0007a120
 8004b5c:	000f4240 	.word	0x000f4240
 8004b60:	001e8480 	.word	0x001e8480
 8004b64:	0028b0aa 	.word	0x0028b0aa
 8004b68:	0030d400 	.word	0x0030d400
 8004b6c:	003d0900 	.word	0x003d0900
 8004b70:	00516154 	.word	0x00516154
 8004b74:	007a1200 	.word	0x007a1200
 8004b78:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7fe f8bc 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8004b80:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d044      	beq.n	8004c14 <UART_SetConfig+0xe14>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d03e      	beq.n	8004c10 <UART_SetConfig+0xe10>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d038      	beq.n	8004c0c <UART_SetConfig+0xe0c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d032      	beq.n	8004c08 <UART_SetConfig+0xe08>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d02c      	beq.n	8004c04 <UART_SetConfig+0xe04>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d026      	beq.n	8004c00 <UART_SetConfig+0xe00>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d020      	beq.n	8004bfc <UART_SetConfig+0xdfc>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	d01a      	beq.n	8004bf8 <UART_SetConfig+0xdf8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d014      	beq.n	8004bf4 <UART_SetConfig+0xdf4>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d00e      	beq.n	8004bf0 <UART_SetConfig+0xdf0>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b0a      	cmp	r3, #10
 8004bd8:	d008      	beq.n	8004bec <UART_SetConfig+0xdec>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b0b      	cmp	r3, #11
 8004be0:	d102      	bne.n	8004be8 <UART_SetConfig+0xde8>
 8004be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004be6:	e016      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e014      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	e012      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004bf0:	2340      	movs	r3, #64	; 0x40
 8004bf2:	e010      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004bf4:	2320      	movs	r3, #32
 8004bf6:	e00e      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	e00c      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	e00a      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004c00:	230a      	movs	r3, #10
 8004c02:	e008      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004c04:	2308      	movs	r3, #8
 8004c06:	e006      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004c08:	2306      	movs	r3, #6
 8004c0a:	e004      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	e002      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e000      	b.n	8004c16 <UART_SetConfig+0xe16>
 8004c14:	2301      	movs	r3, #1
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	441a      	add	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	61fb      	str	r3, [r7, #28]
        break;
 8004c30:	e112      	b.n	8004e58 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d044      	beq.n	8004cc4 <UART_SetConfig+0xec4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d03e      	beq.n	8004cc0 <UART_SetConfig+0xec0>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d038      	beq.n	8004cbc <UART_SetConfig+0xebc>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d032      	beq.n	8004cb8 <UART_SetConfig+0xeb8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d02c      	beq.n	8004cb4 <UART_SetConfig+0xeb4>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d026      	beq.n	8004cb0 <UART_SetConfig+0xeb0>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d020      	beq.n	8004cac <UART_SetConfig+0xeac>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b07      	cmp	r3, #7
 8004c70:	d01a      	beq.n	8004ca8 <UART_SetConfig+0xea8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d014      	beq.n	8004ca4 <UART_SetConfig+0xea4>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	d00e      	beq.n	8004ca0 <UART_SetConfig+0xea0>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b0a      	cmp	r3, #10
 8004c88:	d008      	beq.n	8004c9c <UART_SetConfig+0xe9c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b0b      	cmp	r3, #11
 8004c90:	d102      	bne.n	8004c98 <UART_SetConfig+0xe98>
 8004c92:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c96:	e016      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004c98:	4b80      	ldr	r3, [pc, #512]	; (8004e9c <UART_SetConfig+0x109c>)
 8004c9a:	e014      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004c9c:	4b80      	ldr	r3, [pc, #512]	; (8004ea0 <UART_SetConfig+0x10a0>)
 8004c9e:	e012      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004ca0:	4b80      	ldr	r3, [pc, #512]	; (8004ea4 <UART_SetConfig+0x10a4>)
 8004ca2:	e010      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004ca4:	4b80      	ldr	r3, [pc, #512]	; (8004ea8 <UART_SetConfig+0x10a8>)
 8004ca6:	e00e      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004ca8:	4b80      	ldr	r3, [pc, #512]	; (8004eac <UART_SetConfig+0x10ac>)
 8004caa:	e00c      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004cac:	4b80      	ldr	r3, [pc, #512]	; (8004eb0 <UART_SetConfig+0x10b0>)
 8004cae:	e00a      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004cb0:	4b80      	ldr	r3, [pc, #512]	; (8004eb4 <UART_SetConfig+0x10b4>)
 8004cb2:	e008      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004cb4:	4b80      	ldr	r3, [pc, #512]	; (8004eb8 <UART_SetConfig+0x10b8>)
 8004cb6:	e006      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004cb8:	4b80      	ldr	r3, [pc, #512]	; (8004ebc <UART_SetConfig+0x10bc>)
 8004cba:	e004      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004cbc:	4b80      	ldr	r3, [pc, #512]	; (8004ec0 <UART_SetConfig+0x10c0>)
 8004cbe:	e002      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004cc0:	4b80      	ldr	r3, [pc, #512]	; (8004ec4 <UART_SetConfig+0x10c4>)
 8004cc2:	e000      	b.n	8004cc6 <UART_SetConfig+0xec6>
 8004cc4:	4b75      	ldr	r3, [pc, #468]	; (8004e9c <UART_SetConfig+0x109c>)
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6852      	ldr	r2, [r2, #4]
 8004cca:	0852      	lsrs	r2, r2, #1
 8004ccc:	441a      	add	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	61fb      	str	r3, [r7, #28]
        break;
 8004cda:	e0bd      	b.n	8004e58 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cdc:	f7fd ff78 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8004ce0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d044      	beq.n	8004d74 <UART_SetConfig+0xf74>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d03e      	beq.n	8004d70 <UART_SetConfig+0xf70>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d038      	beq.n	8004d6c <UART_SetConfig+0xf6c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d032      	beq.n	8004d68 <UART_SetConfig+0xf68>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d02c      	beq.n	8004d64 <UART_SetConfig+0xf64>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d026      	beq.n	8004d60 <UART_SetConfig+0xf60>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d020      	beq.n	8004d5c <UART_SetConfig+0xf5c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b07      	cmp	r3, #7
 8004d20:	d01a      	beq.n	8004d58 <UART_SetConfig+0xf58>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d014      	beq.n	8004d54 <UART_SetConfig+0xf54>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d00e      	beq.n	8004d50 <UART_SetConfig+0xf50>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b0a      	cmp	r3, #10
 8004d38:	d008      	beq.n	8004d4c <UART_SetConfig+0xf4c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	d102      	bne.n	8004d48 <UART_SetConfig+0xf48>
 8004d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d46:	e016      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e014      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	e012      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	e010      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d54:	2320      	movs	r3, #32
 8004d56:	e00e      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	e00c      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	e00a      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d60:	230a      	movs	r3, #10
 8004d62:	e008      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d64:	2308      	movs	r3, #8
 8004d66:	e006      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d68:	2306      	movs	r3, #6
 8004d6a:	e004      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	e002      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e000      	b.n	8004d76 <UART_SetConfig+0xf76>
 8004d74:	2301      	movs	r3, #1
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	441a      	add	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	61fb      	str	r3, [r7, #28]
        break;
 8004d90:	e062      	b.n	8004e58 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d04e      	beq.n	8004e38 <UART_SetConfig+0x1038>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d047      	beq.n	8004e32 <UART_SetConfig+0x1032>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d040      	beq.n	8004e2c <UART_SetConfig+0x102c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d039      	beq.n	8004e26 <UART_SetConfig+0x1026>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d032      	beq.n	8004e20 <UART_SetConfig+0x1020>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d02b      	beq.n	8004e1a <UART_SetConfig+0x101a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b06      	cmp	r3, #6
 8004dc8:	d024      	beq.n	8004e14 <UART_SetConfig+0x1014>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b07      	cmp	r3, #7
 8004dd0:	d01d      	beq.n	8004e0e <UART_SetConfig+0x100e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d016      	beq.n	8004e08 <UART_SetConfig+0x1008>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	d00f      	beq.n	8004e02 <UART_SetConfig+0x1002>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b0a      	cmp	r3, #10
 8004de8:	d008      	beq.n	8004dfc <UART_SetConfig+0xffc>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b0b      	cmp	r3, #11
 8004df0:	d101      	bne.n	8004df6 <UART_SetConfig+0xff6>
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	e022      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfa:	e01f      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e00:	e01c      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e06:	e019      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0c:	e016      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e12:	e013      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e14:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004e18:	e010      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e1a:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004e1e:	e00d      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e24:	e00a      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e26:	f241 5355 	movw	r3, #5461	; 0x1555
 8004e2a:	e007      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e30:	e004      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e36:	e001      	b.n	8004e3c <UART_SetConfig+0x103c>
 8004e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6852      	ldr	r2, [r2, #4]
 8004e40:	0852      	lsrs	r2, r2, #1
 8004e42:	441a      	add	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	61fb      	str	r3, [r7, #28]
        break;
 8004e50:	e002      	b.n	8004e58 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	76fb      	strb	r3, [r7, #27]
        break;
 8004e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d908      	bls.n	8004e70 <UART_SetConfig+0x1070>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e64:	d204      	bcs.n	8004e70 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e001      	b.n	8004e74 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004e90:	7efb      	ldrb	r3, [r7, #27]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3728      	adds	r7, #40	; 0x28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004e9c:	00f42400 	.word	0x00f42400
 8004ea0:	0001e848 	.word	0x0001e848
 8004ea4:	0003d090 	.word	0x0003d090
 8004ea8:	0007a120 	.word	0x0007a120
 8004eac:	000f4240 	.word	0x000f4240
 8004eb0:	00145855 	.word	0x00145855
 8004eb4:	00186a00 	.word	0x00186a00
 8004eb8:	001e8480 	.word	0x001e8480
 8004ebc:	0028b0aa 	.word	0x0028b0aa
 8004ec0:	003d0900 	.word	0x003d0900
 8004ec4:	007a1200 	.word	0x007a1200

08004ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01a      	beq.n	8004fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc6:	d10a      	bne.n	8004fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800501c:	f7fc f918 	bl	8001250 <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b08      	cmp	r3, #8
 800502e:	d10e      	bne.n	800504e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f82c 	bl	800509c <UART_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e022      	b.n	8005094 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b04      	cmp	r3, #4
 800505a:	d10e      	bne.n	800507a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f816 	bl	800509c <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00c      	b.n	8005094 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	e062      	b.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d05e      	beq.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fc f8cb 	bl	8001250 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <UART_WaitOnFlagUntilTimeout+0x30>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d11d      	bne.n	8005108 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e045      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02e      	beq.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d126      	bne.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800513e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e00f      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	429a      	cmp	r2, r3
 8005190:	d08d      	beq.n	80050ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e027      	b.n	8005202 <HAL_UARTEx_DisableFifoMode+0x66>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2224      	movs	r2, #36	; 0x24
 80051be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005222:	2302      	movs	r3, #2
 8005224:	e02d      	b.n	8005282 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2224      	movs	r2, #36	; 0x24
 8005232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f850 	bl	8005308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800529e:	2302      	movs	r3, #2
 80052a0:	e02d      	b.n	80052fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2224      	movs	r2, #36	; 0x24
 80052ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f812 	bl	8005308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005310:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <UARTEx_SetNbDataToProcess+0xc8>)
 8005312:	f107 0314 	add.w	r3, r7, #20
 8005316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800531a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800531e:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <UARTEx_SetNbDataToProcess+0xcc>)
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005328:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005330:	2b00      	cmp	r3, #0
 8005332:	d108      	bne.n	8005346 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005344:	e03d      	b.n	80053c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005346:	2308      	movs	r3, #8
 8005348:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800534a:	2308      	movs	r3, #8
 800534c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	0e5b      	lsrs	r3, r3, #25
 8005356:	b2db      	uxtb	r3, r3
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	0f5b      	lsrs	r3, r3, #29
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800536e:	7fbb      	ldrb	r3, [r7, #30]
 8005370:	7f3a      	ldrb	r2, [r7, #28]
 8005372:	f107 0120 	add.w	r1, r7, #32
 8005376:	440a      	add	r2, r1
 8005378:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	7f3a      	ldrb	r2, [r7, #28]
 8005382:	f107 0120 	add.w	r1, r7, #32
 8005386:	440a      	add	r2, r1
 8005388:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800538c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005398:	7ffb      	ldrb	r3, [r7, #31]
 800539a:	7f7a      	ldrb	r2, [r7, #29]
 800539c:	f107 0120 	add.w	r1, r7, #32
 80053a0:	440a      	add	r2, r1
 80053a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	7f7a      	ldrb	r2, [r7, #29]
 80053ac:	f107 0120 	add.w	r1, r7, #32
 80053b0:	440a      	add	r2, r1
 80053b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80053b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053c2:	bf00      	nop
 80053c4:	3724      	adds	r7, #36	; 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	08005528 	.word	0x08005528
 80053d4:	08005530 	.word	0x08005530

080053d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053e0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053e4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005410:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005414:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800541c:	b29b      	uxth	r3, r3
 800541e:	b21a      	sxth	r2, r3
 8005420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005424:	43db      	mvns	r3, r3
 8005426:	b21b      	sxth	r3, r3
 8005428:	4013      	ands	r3, r2
 800542a:	b21b      	sxth	r3, r3
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005442:	b084      	sub	sp, #16
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	f107 0014 	add.w	r0, r7, #20
 8005450:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ffaf 	bl	80053d8 <USB_EnableGlobalInt>

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005486:	b004      	add	sp, #16
 8005488:	4770      	bx	lr
	...

0800548c <__libc_init_array>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	4e0d      	ldr	r6, [pc, #52]	; (80054c4 <__libc_init_array+0x38>)
 8005490:	4c0d      	ldr	r4, [pc, #52]	; (80054c8 <__libc_init_array+0x3c>)
 8005492:	1ba4      	subs	r4, r4, r6
 8005494:	10a4      	asrs	r4, r4, #2
 8005496:	2500      	movs	r5, #0
 8005498:	42a5      	cmp	r5, r4
 800549a:	d109      	bne.n	80054b0 <__libc_init_array+0x24>
 800549c:	4e0b      	ldr	r6, [pc, #44]	; (80054cc <__libc_init_array+0x40>)
 800549e:	4c0c      	ldr	r4, [pc, #48]	; (80054d0 <__libc_init_array+0x44>)
 80054a0:	f000 f820 	bl	80054e4 <_init>
 80054a4:	1ba4      	subs	r4, r4, r6
 80054a6:	10a4      	asrs	r4, r4, #2
 80054a8:	2500      	movs	r5, #0
 80054aa:	42a5      	cmp	r5, r4
 80054ac:	d105      	bne.n	80054ba <__libc_init_array+0x2e>
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054b4:	4798      	blx	r3
 80054b6:	3501      	adds	r5, #1
 80054b8:	e7ee      	b.n	8005498 <__libc_init_array+0xc>
 80054ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054be:	4798      	blx	r3
 80054c0:	3501      	adds	r5, #1
 80054c2:	e7f2      	b.n	80054aa <__libc_init_array+0x1e>
 80054c4:	080091e0 	.word	0x080091e0
 80054c8:	080091e0 	.word	0x080091e0
 80054cc:	080091e0 	.word	0x080091e0
 80054d0:	080091e4 	.word	0x080091e4

080054d4 <memset>:
 80054d4:	4402      	add	r2, r0
 80054d6:	4603      	mov	r3, r0
 80054d8:	4293      	cmp	r3, r2
 80054da:	d100      	bne.n	80054de <memset+0xa>
 80054dc:	4770      	bx	lr
 80054de:	f803 1b01 	strb.w	r1, [r3], #1
 80054e2:	e7f9      	b.n	80054d8 <memset+0x4>

080054e4 <_init>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr

080054f0 <_fini>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr
